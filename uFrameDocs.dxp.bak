<?xml version="1.0" encoding="utf-8"?>
<DocumentXProject Id="53f0c6cf-6a1c-4155-add1-8022e701f874" Version="2011.1">
  <Features />
  <SeparateFiles>false</SeparateFiles>
  <Flags>
    <Flag Id="{46CEF21D-3301-4517-A875-A0906828390E}" HighlightColor="#FFA1FFD0">Exclude from Online</Flag>
    <Flag Id="{4AAE0FD4-7313-4FEE-A25F-0785B885F736}" HighlightColor="#FFFFFFA1">Exclude from Booklet</Flag>
  </Flags>
  <PropertyDefinitions />
  <PropertyDefinitionValues />
  <Title />
  <ContentFiles>
    <ContentFile FileName="Assembly-CSharp.dxc" Moniker="..\..\uFrameGit\Temp\UnityVS_bin\Release\Assembly-CSharp.dll" DocType="DX.NET" />
  </ContentFiles>
  <AutoDocFiles />
  <ContentFromProjectPlugin />
  <Filters>
    <ExcludedItems>
      <ExcludedItem>Assembly-CSharp~UniRx.Disposable+EmptyDisposable</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Disposable+AnonymousDisposable</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.RefCountDisposable+InnerDisposable</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+AnonymousObservable`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+ConnectableObservable`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Notification`1+OnNextNotification</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Notification`1+OnErrorNotification</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Notification`1+OnCompletedNotification</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observer+AnonymousObserver`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Stubs</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Scheduler+CurrentThreadScheduler</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Scheduler+CurrentThreadScheduler+Trampoline</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Scheduler+ImmediateScheduler</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Scheduler+ThreadPoolScheduler</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Scheduler+ThreadPoolScheduler+Timer</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Scheduler+MainThreadScheduler</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Scheduler+IgnoreTimeScaleMainThreadScheduler</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.AsyncSubject`1+Subscription</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Subject`1+Subscription</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.MainThreadDispatcher+EditorThreadDispatcher</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass5`1+--c__DisplayClass7</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClassb`2+--c__DisplayClassd</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass11`1+--c__DisplayClass13</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass20`1+--c__DisplayClass22</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass2c`1+--c__DisplayClass2e</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass2c`1+--c__DisplayClass2e+--c__DisplayClass30</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass3a`1+--c__DisplayClass3c</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass3a`1+--c__DisplayClass3c+--c__DisplayClass3e</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass48`3+--c__DisplayClass4a</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass5a`1+--c__DisplayClass5d</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass5a`1+--c__DisplayClass5d+--c__DisplayClass63</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass5a`1+--c__DisplayClass5d+--c__DisplayClass65</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass6f`3+--c__DisplayClass71</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass7d`1+--c__DisplayClass7f</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass7d`1+--c__DisplayClass7f+--c__DisplayClass83</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass7d`1+--c__DisplayClass86</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass8f`1+--c__DisplayClass91</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass8f`1+--c__DisplayClass91+--c__DisplayClass93</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass9a`1+--c__DisplayClass9c</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass9a`1+--c__DisplayClass9c+--c__DisplayClass9e</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClassa4`1+--c__DisplayClassa6</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClassaf`1+--c__DisplayClassb1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClassaf`1+--c__DisplayClassb1+--c__DisplayClassb3</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClassaf`1+--c__DisplayClassb1+--c__DisplayClassb5</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClassb9`1+--c__DisplayClassbb</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClassbf`1+--c__DisplayClassc1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClassc5`1+--c__DisplayClassc7</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClassce`1+--c__DisplayClassd0</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClassde`1+--c__DisplayClasse0</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClasse4`1+--c__DisplayClasse6</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClassea+--c__DisplayClassec</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClassf0`1+--c__DisplayClassf2</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClassf6`1+--c__DisplayClassf8</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass102`1+--c__DisplayClass104</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass108+--c__DisplayClass10a</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass10e`1+--c__DisplayClass110</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass114`2+--c__DisplayClass116</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass11c`1+--c__DisplayClass11e</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass11c`1+--c__DisplayClass11e+--c__DisplayClass121</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass128`2+--c__DisplayClass12a</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass12f`2+--c__DisplayClass131</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass136`1+--c__DisplayClass138</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass13c`2+--c__DisplayClass13e</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass143+--c__DisplayClass145</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass14a`1+--c__DisplayClass14c</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass150`1+--c__DisplayClass152</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass159`1+--c__DisplayClass15b</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass160`2+--c__DisplayClass162</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass166`1+--c__DisplayClass168</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass16f`1+--c__DisplayClass171</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass177`2+--c__DisplayClass179</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass17e`1+--c__DisplayClass180</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass185`1+--c__DisplayClass187</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass18d`1+--c__DisplayClass18f</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass196`1+--c__DisplayClass198</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass196`1+--c__DisplayClass198+--c__DisplayClass19a</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass1a3`2+--c__DisplayClass1a5</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass1aa`1+--c__DisplayClass1ac</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass1b1`1+--c__DisplayClass1b3</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass1b8`1+--c__DisplayClass1ba</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass1be+--c__DisplayClass1c0</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass1c4+--c__DisplayClass1c6</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass1ca+--c__DisplayClass1cc</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass1d0+--c__DisplayClass1d2</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass1d9`1+--c__DisplayClass1db</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass1e0`1+--c__DisplayClass1e2</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass1eb`1+--c__DisplayClass1ed</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass1f4`1+--c__DisplayClass1f6</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass1f4`1+--c__DisplayClass1f6+--c__DisplayClass1f8</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass1ff`1+--c__DisplayClass201</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass206`1+--c__DisplayClass208</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass20f`2+--c__DisplayClass211</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass218`1+--c__DisplayClass21a</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass221`3+--c__DisplayClass223</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass227`3+--c__DisplayClass229</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass22d`2+--c__DisplayClass22f</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass233`2+--c__DisplayClass235</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass239`3+--c__DisplayClass23b</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass23f`3+--c__DisplayClass241</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass246`1+--c__DisplayClass248</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass24e`1+--c__DisplayClass250</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass256`1+--c__DisplayClass258</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass25c`1+--c__DisplayClass25e</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass263`1+--c__DisplayClass265</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass269`1+--c__DisplayClass26b</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass26f`2+--c__DisplayClass271</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass275`1+--c__DisplayClass277</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass27b`2+--c__DisplayClass27d</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass29c`1+--c__DisplayClass29e</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass2b5`1+--c__DisplayClass2b7</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable+--c__DisplayClass2b5`1+--c__DisplayClass2b7+--c__DisplayClass2b9</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Notification`1+--c__DisplayClass2+--c__DisplayClass4</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Scheduler+--c__DisplayClass3+--c__DisplayClass5</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Scheduler+--c__DisplayClassa+--c__DisplayClassc</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Scheduler+--c__DisplayClass11+--c__DisplayClass13</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.ITuple</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Examples.Sample04_ConvertFromUnityCallback+LogCallback</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Examples.Sample04_ConvertFromUnityCallback+LogHelper</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.InternalUtil.PriorityQueue`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.InternalUtil.PriorityQueue`1+IndexedItem</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~System.Collections.ObjectModel.ObservableCollection`1+SimpleMonitor</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx_namespace</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.AotSafeExtensions</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.AsyncSubject`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.BehaviorSubject`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.BooleanDisposable</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.BooleanNotifier</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.CancellationToken</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.CompositeDisposable</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.CountChangedStatus</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.CountNotifier</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Disposable</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.DisposableExtensions</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.EventPattern`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.EventPattern`2</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.ICancelable</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.IConnectableObservable`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.IEventPattern`2</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.IObservable`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.IObserver`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.IObserver`2</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.IProgress`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.IScheduler</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.IStructuralComparable</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.IStructuralEquatable</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.ISubject`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.ISubject`2</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.LazyTask</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.LazyTask`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.LazyTask+TaskStatus</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.LazyTaskExtensions</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.MainThreadDispatcher</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.MultipleAssignmentDisposable</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Notification</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Notification`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.NotificationKind</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observable</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.ObservableExtensions</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.ObservableMonoBehaviour</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.ObservableWWW</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Observer</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.RefCountDisposable</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.ReplaySubject`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.ScenePlaybackDetector</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.ScheduledDisposable</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.ScheduledNotifier`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Scheduler</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Scheduler+DefaultSchedulers</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.SerialDisposable</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.SingleAssignmentDisposable</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Subject`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.TimeInterval`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Timestamped</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Timestamped`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Tuple</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Tuple`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Tuple`2</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Tuple`3</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Tuple`4</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Tuple`5</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Tuple`6</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Tuple`7</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Tuple`8</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.TypedMonoBehaviour</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Unit</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.UnityEventExtensions</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.WWWErrorException</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Diagnostics_namespace</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Diagnostics.LogEntry</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Diagnostics.LogEntryExtensions</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Diagnostics.Logger</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Diagnostics.ObservableLogger</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Diagnostics.UnityDebugSink</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Examples_namespace</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Examples.Sample01_ObservableWWW</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Examples.Sample02_TypedBehaviour</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Examples.Sample03_ObservableMonoBehaviour</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Examples.Sample04_ConvertFromUnityCallback</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Examples.Sample05_ConvertFromCoroutine</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Examples.Sample06_ConvertToCoroutine</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Examples.Sample07_OrchestratIEnumerator</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Examples.Sample08_DetectDoubleClick</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Examples.Sample09_EventHandling</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Examples.Sample09_EventHandling+MyEventArgs</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Examples.Sample10_MainThreadDispatcher</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.Examples.Sample11_Logger</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.InternalUtil_namespace</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.InternalUtil.DisposedObserver`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.InternalUtil.EmptyObserver`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.InternalUtil.ImmutableList`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.InternalUtil.ListObserver`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.InternalUtil.ScheduledItem</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.InternalUtil.SchedulerQueue</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.InternalUtil.ThreadSafeQueueWorker</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.UI_namespace</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UniRx.UI.ObserveExtensions</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~System.Collections.Specialized_namespace</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~System.Collections.Specialized.NotifyCollectionChangedEventArgs</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~System.Collections.ObjectModel_namespace</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~System.Collections.ObjectModel.INotifyCollectionChanged</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~System.Collections.ObjectModel.NotifyCollectionChangedAction</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~System.Collections.ObjectModel.NotifyCollectionChangedEventHandler</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~System.Collections.ObjectModel.ObservableCollection`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame_namespace</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.Building</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.GameRootController</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.GameRootControllerBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.GameRootHudView</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.GameRootHudViewViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.GameRootViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.GameRootViewModel</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.GameRootViewModelBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.GameScene</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.GameSceneBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.GameSceneSettings</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.GridCameraView</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.GridCameraViewViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.GridController</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.GridControllerBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.GridItemController</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.GridItemControllerBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.GridItemView</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.GridItemViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.GridItemViewModel</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.GridItemViewModelBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.GridItemViewViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.GridView</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.GridViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.GridViewModel</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.GridViewModelBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.GridViewViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.Idle</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.ItemInfoView</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.ItemInfoViewViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.NotSelected</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.PickedUp</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.PlayerController</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.PlayerControllerBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.PlayerHudView</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.PlayerHudViewViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.PlayerView</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.PlayerViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.PlayerViewModel</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.PlayerViewModelBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.PlayerViewViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.Selected</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.SelectionState</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.SelectionStateBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.UpgradeableItemController</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.UpgradeableItemControllerBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.UpgradeableItemViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.UpgradeableItemViewModel</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.UpgradeableItemViewModelBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.UpgradeableView</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.UpgradeableViewViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.UpgradeBarView</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.UpgradeBarViewViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.UpgradeDetailController</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.UpgradeDetailControllerBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.UpgradeDetailViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.UpgradeDetailViewModel</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.UpgradeDetailViewModelBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.UpgradeState</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.UpgradeStateBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RTSGame.Upgrading</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSBulletView</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSBulletViewModel</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSCrosshair</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSDamageableController</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSDamageableControllerBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSDamageableViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSDamageableViewModel</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSDamageableViewModelBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSEnemyController</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSEnemyView</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSEnemyControllerBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSEnemyViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSEnemyViewModel</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSEnemyViewModelBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSEnemyViewViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSGameController</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSGameControllerBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSGameState</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSGameView</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSGameViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSGameViewModel</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSGameViewModelBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSGameViewViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSHUDView</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSHUDViewViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSMainMenuManager</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSMainMenuManagerBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSMainMenuManagerSettings</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSMainMenuView</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSMainMenuViewViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSMapCamera</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSMenuController</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSMenuControllerBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSMenuViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSMenuViewModel</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSMenuViewModelBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSPlayerController</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSPlayerControllerBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSPlayerHUD</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSPlayerHUDView</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSPlayerHUDViewViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSPlayerState</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSPlayerView</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSPlayerViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSPlayerViewModel</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSPlayerViewModelBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSPlayerViewViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSShooterGamePlay</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSShooterGamePlayBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSWavesHudView</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSWavesHudViewViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSWeaponController</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSWeaponControllerBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSWeaponFire</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSWeaponHUDView</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSWeaponHUDViewViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSWeaponStateMachine</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSWeaponStateMachineBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSWeaponView</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSWeaponViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSWeaponViewModel</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSWeaponViewModelBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~FPSWeaponViewViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~HeywhatsupViewModel</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~GenericBinding</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~GameOver</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~Idle</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~IJsonSerializable</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~LevelLoaderController</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~LevelLoaderSceneManager</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~M16WeaponViewModel</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ManController</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ManControllerBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ManViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ManViewModel</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ManViewModelBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~MouseLook</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~MvcExtensions</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~MP5WeaponViewModel</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ObservableCollisionEnter2DBehaviour</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ObservableCollisionEnterBehaviour</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ObservableCollisionExit2DBehaviour</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ObservableCollisionExitBehaviour</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ObservableCollisionStay2DBehaviour</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ObservableCollisionStayBehaviour</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ObservableComponent</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ObservableFixedUpdateBehaviour</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ObservableMouseDragBehaviour</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ObservableMouseDownBehaviour</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ObservableMouseEnterBehaviour</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ObservableMouseExitBehaviour</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ObservableMouseOverBehaviour</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ObservableOnDestroyBehaviour</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ObservableMouseUpAsButtonBehaviour</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ObservablePropertyExtensions</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ObservableTriggerEnter2DBehaviour</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ObservableTriggerEnterBehaviour</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ObservableTriggerExit2DBehaviour</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ObservableTriggerExitBehaviour</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ObservableTriggerStay2DBehaviour</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ObservableTriggerStayBehaviour</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ParseRepository`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~PersonController</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~PersonControllerBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~PersonViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~PersonViewModel</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~PersonViewModelBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~PlayerDescriptionViewModel</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RapidFire</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RegisteredInstance</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~Reloading</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~RocketLauncher</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~SceneASceneManager</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~SceneBSceneManager</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~SceneContext</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~SceneStateResolver</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~SimpleDisposable</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~SocialManagerViewModel</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~TypeInstanceCollection</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~TypeMappingCollection</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~TypeRelationCollection</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UFCommand`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UFGroup</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UFRequireInstanceMethod</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UFToggleGroup</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UMP5WeaponViewModel</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~UnityGUILevelLoaderView</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~View`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ViewStateResolver</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~WaitForNextWave</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~Wave</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~WavesFPSGameController</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~WavesFPSGameControllerBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~WavesFPSGameManager</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~WavesFPSGameManagerBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~WavesFPSGameManagerSettings</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~WavesFPSGameViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~WavesFPSGameViewModel</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~WavesFPSGameViewModelBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~WavesGameView</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~WavesGameViewViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~WeaponType</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~WomanController</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~WomanControllerBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~WomanViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~WomanViewModel</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~WomanViewModelBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~YieldCommand</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~YieldCommandWith`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~YieldCommandWithSender`1</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~YieldCommandWithSenderAndArgument`2</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~DataClassNode</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~DamageableViewViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~DamageableView</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~DeathMatchGameViewModel</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~Firing</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~Empty</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ITwoWayBinding</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ColtView</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ColtWeaponViewModel</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ClassAViewModelBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ClassAViewModel</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ClassAViewBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ClassAControllerBase</ExcludedItem>
      <ExcludedItem>Assembly-CSharp~ClassAController</ExcludedItem>
    </ExcludedItems>
  </Filters>
  <JavascriptProjectPlugin />
  <ComProjectPlugin />
  <AjaxProjectPlugin />
  <JavaProjectPlugin />
  <DotNetAssemblies>
    <ReferencePaths>
      <ReferencePath Id="165169b5-6f3f-45d0-8682-59057042ca99" Name="Mono.Security" Directory="C:\Program Files (x86)\Unity\MonoDevelop\bin" />
      <ReferencePath Id="edb53066-808a-4aa7-a287-fd0f6ad9245e" Name="UnityEngine" Directory="..\..\uFrameGit\Library\UnityAssemblies" />
      <ReferencePath Id="8a770bed-1d75-401c-92d5-304bc5f18c69" Name="Parse.Unity" Directory="..\..\uFrameGit\Assets\uFramePlayground\ParseComPlugin" />
    </ReferencePaths>
  </DotNetAssemblies>
  <DatabaseProjectPlugin>
    <Databases />
  </DatabaseProjectPlugin>
  <XsdProjectPlugin>
    <XsdSchemas />
  </XsdProjectPlugin>
  <GlossaryProjectPlugin>
    <IsGlossaryOutputEnabled>true</IsGlossaryOutputEnabled>
    <Glossary>
      <GlossaryItems />
      <Title />
    </Glossary>
  </GlossaryProjectPlugin>
  <WebServiceProjectPlugin>
    <WebServices />
  </WebServiceProjectPlugin>
  <HelpProjectPlugin ShowGettingStartedPage="true" />
  <OtherFilesProjectPlugin>
    <OtherFiles>
      <OtherFile Id="1e1127d9-5ca0-46b7-8eaf-7162bf2c9c75" FileName="stylesheets\customstyles.css" SourceData="" BuildFlags="" />
      <OtherFile Id="f5925735-d908-4b63-ad38-cfe2feb8d2b0" FileName="images\FPSSceneFlow.png" SourceData="" BuildFlags="{46CEF21D-3301-4517-A875-A0906828390E},{4AAE0FD4-7313-4FEE-A25F-0785B885F736}" />
      <OtherFile Id="92908efb-159f-4c57-82c1-0c6cb8cd17f7" FileName="images\FPSSceneFlow_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="ff9dab52-e622-44e8-992d-5b148e51bd97" FileName="images\FPSSceneFlow.imk" SourceData="" BuildFlags="{46CEF21D-3301-4517-A875-A0906828390E},{4AAE0FD4-7313-4FEE-A25F-0785B885F736}" />
      <OtherFile Id="a2bc97d7-e879-4df0-90e5-19267d11947b" FileName="images\FPSSceneFlow_markedup.png" SourceData="" BuildFlags="" />
      <OtherFile Id="50dfe832-0fb7-40fe-93e6-38f0da816909" FileName="images\FPSSceneFlow_markedup_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="ecce9a54-ad77-4370-8d69-e3dd4ef55fd5" FileName="images\FPSSceneFlow_MenuSystem.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4493926b-9b6b-413e-923d-2012f95601c6" FileName="images\FPSSceneFlow_RegisterdInstances2.png" SourceData="" BuildFlags="" />
      <OtherFile Id="ff540e96-4703-485f-9079-bb087dd89920" FileName="images\FPSSceneFlow_Subsystems.png" SourceData="" BuildFlags="" />
      <OtherFile Id="76035cc9-5d16-418b-a2a6-05e6471ba6e5" FileName="images\FPSSceneFlow_SceneManagers.png" SourceData="" BuildFlags="" />
      <OtherFile Id="0c3d942c-0faf-42b0-adae-83fe312e1acb" FileName="images\Snagit\DesignerOverview.png" SourceData="" BuildFlags="{46CEF21D-3301-4517-A875-A0906828390E},{4AAE0FD4-7313-4FEE-A25F-0785B885F736}" />
      <OtherFile Id="93c3eed8-738a-4b88-8241-4e2e6aed32d2" FileName="images\Snagit\DesignerOverview.imk" SourceData="" BuildFlags="{46CEF21D-3301-4517-A875-A0906828390E},{4AAE0FD4-7313-4FEE-A25F-0785B885F736}" />
      <OtherFile Id="fbda03fc-0681-4d94-95ab-42d96fca03d1" FileName="images\Snagit\DesignerOverview_markedup.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d40721a9-bbad-4c5c-bccf-780d66f6d3f9" FileName="images\Snagit\DesignerOverview_markedup_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="9e0879fa-caad-40b8-93f7-ec98f87cc59a" FileName="images\Snagit\SelectDesignerWindow.png" SourceData="" BuildFlags="" />
      <OtherFile Id="bd640cd2-925d-4dc4-8ded-cd562ad76adf" FileName="images\Snagit\DiagramContextMenu.png" SourceData="" BuildFlags="" />
      <OtherFile Id="b7f4d66b-2378-483e-95f5-17ef930d82f4" FileName="images\Snagit\HideNode.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e520f7af-e977-40ae-bce4-23afbb6193ac" FileName="images\Snagit\ShowNode.png" SourceData="" BuildFlags="" />
      <OtherFile Id="02a45a1b-9026-41f0-bbdd-e9dabbb5a036" FileName="images\Snagit\ConnectionBegin.png" SourceData="" BuildFlags="" />
      <OtherFile Id="13ac0747-d5ca-45c1-82b4-421cdd0aa331" FileName="images\Snagit\ConnectionDrag.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d2a1caa0-e6e7-4335-9b53-86fac052b3d9" FileName="images\Snagit\ConnectionEnd.png" SourceData="" BuildFlags="" />
      <OtherFile Id="719f9231-c545-4240-b9fb-84f26cdbf413" FileName="images\Snagit\CreateProjectMenu.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4f9b4fbe-fe6c-4bf8-b555-fe4e14689ff5" FileName="images\Snagit\ProjectInspector.png" SourceData="" BuildFlags="{46CEF21D-3301-4517-A875-A0906828390E},{4AAE0FD4-7313-4FEE-A25F-0785B885F736}" />
      <OtherFile Id="53ff421b-4f88-45db-9ec3-8ea4f9a8e65e" FileName="images\Snagit\ImportProjectDiagram.png" SourceData="" BuildFlags="" />
      <OtherFile Id="2ddfab66-4a3d-42d3-a84d-bd558d9b208b" FileName="images\Snagit\ProjectInspector.imk" SourceData="" BuildFlags="{46CEF21D-3301-4517-A875-A0906828390E},{4AAE0FD4-7313-4FEE-A25F-0785B885F736}" />
      <OtherFile Id="9bd24c2b-023f-4614-9e78-b093f27ffc4c" FileName="images\Snagit\ProjectInspector_markedup.png" SourceData="" BuildFlags="" />
      <OtherFile Id="6f51f700-7b44-4183-972d-4bb170ee93a5" FileName="images\Snagit\ProjectInspector_markedup_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="b30da09a-2eac-40e0-9ff1-4ca84f2e5f7c" FileName="images\Snagit\ProjectInspector_Settings.png" SourceData="" BuildFlags="" />
      <OtherFile Id="9707fb06-0362-4f8d-81d5-93b2b35f48f8" FileName="images\Snagit\FPSSceneFlow.png" SourceData="" BuildFlags="" />
      <OtherFile Id="781c2af7-fbb3-4f0e-9136-51b879e10068" FileName="images\Snagit\uFrameSettings.png" SourceData="" BuildFlags="" />
      <OtherFile Id="06a96f7e-a53a-4abf-ade4-605083acc59d" FileName="images\Snagit\FPSWeaonStateMachine.png" SourceData="" BuildFlags="" />
      <OtherFile Id="5936cb53-3656-4ca3-a7f8-cb27d3aba92a" FileName="images\Snagit\WavesElementStateMachine.png" SourceData="" BuildFlags="{46CEF21D-3301-4517-A875-A0906828390E},{4AAE0FD4-7313-4FEE-A25F-0785B885F736}" />
      <OtherFile Id="bd0f8580-396d-4ce3-b251-7bcec5a6a5fe" FileName="images\Snagit\AddExternalStateMachine.png" SourceData="" BuildFlags="" />
      <OtherFile Id="b7868833-1731-483c-aab1-be05b87d903f" FileName="images\Snagit\AddStateMachineLocal.png" SourceData="" BuildFlags="" />
      <OtherFile Id="16847b49-47f5-41c9-89bf-0dde03d49f92" FileName="images\Snagit\FPSShooterGamePlay.png" SourceData="" BuildFlags="" />
      <OtherFile Id="cf8ad987-2442-45fe-bd28-59040925e876" FileName="images\Snagit\WavesElementStateMachine.imk" SourceData="" BuildFlags="{46CEF21D-3301-4517-A875-A0906828390E},{4AAE0FD4-7313-4FEE-A25F-0785B885F736}" />
      <OtherFile Id="6c025cb5-e083-480d-804b-61d8a90c9506" FileName="images\Snagit\WavesElementStateMachine_markedup.png" SourceData="" BuildFlags="" />
      <OtherFile Id="3f75f485-c972-49d4-bd5e-da7a6291719e" FileName="images\Snagit\WavesElementStateMachine_markedup_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="162e364a-3339-4e7b-834b-767137eacd5c" FileName="images\Snagit\ViewComponents.png" SourceData="" BuildFlags="" />
      <OtherFile Id="be86742c-db5d-4143-9f61-bd0a1fd4c076" FileName="images\Snagit\ComputedProperty.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4d75c58c-8d69-4cb2-a083-003f1b6d300f" FileName="images\Snagit\SceneManagerInspector.png" SourceData="" BuildFlags="" />
      <OtherFile Id="dbf9598f-9a32-431d-968f-dbdff3d2d218" FileName="images\Snagit\PullFrom.png" SourceData="" BuildFlags="" />
      <OtherFile Id="30baf3fa-a217-4034-b8bd-af52d8caece4" FileName="images\Snagit\PushTo.png" SourceData="" BuildFlags="" />
      <OtherFile Id="a2c445fc-4a00-4738-9ca8-70eea11068aa" FileName="images\Snagit\LoadingScreenSceneDetails.png" SourceData="" BuildFlags="{46CEF21D-3301-4517-A875-A0906828390E},{4AAE0FD4-7313-4FEE-A25F-0785B885F736}" />
      <OtherFile Id="dffbf27d-2167-4524-9b84-9e0304dac609" FileName="images\Snagit\LoadingScreenSceneDetails.imk" SourceData="" BuildFlags="{46CEF21D-3301-4517-A875-A0906828390E},{4AAE0FD4-7313-4FEE-A25F-0785B885F736}" />
      <OtherFile Id="cc89a85d-eb20-4ce1-83ca-4159b1345f0f" FileName="images\Snagit\LoadingScreenSceneDetails_markedup.png" SourceData="" BuildFlags="" />
      <OtherFile Id="ae656cc8-81cc-4058-b602-cbd26363881f" FileName="images\Snagit\LoadingScreenSceneDetails_markedup_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="75618f47-ebbd-44be-872e-2770ffe7ad83" FileName="images\Snagit\FPSShooterProjectInspector.png" SourceData="" BuildFlags="" />
      <OtherFile Id="311f7e33-4b5e-4395-84f2-685c13d6e197" FileName="images\Snagit\UseRegisteredInstance.png" SourceData="" BuildFlags="" />
      <OtherFile Id="3508de37-3b50-4f78-b1e7-cc2ad66accd9" FileName="images\Snagit\Inheritance.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4ba5bb0c-4ef3-4ed6-bdc8-62c2579b8079" FileName="images\Snagit\StandardCollectionBinding.png" SourceData="" BuildFlags="" />
      <OtherFile Id="cd26a8ae-6d0b-497e-9ed2-e4f65a412686" FileName="Snags\Bindings.png" SourceData="" BuildFlags="" />
      <OtherFile Id="63b6c1bd-3b9c-40fd-b386-6429b28c263c" FileName="Snags\ElementGraph.png" SourceData="" BuildFlags="" />
      <OtherFile Id="91a3d432-f5a5-4f12-b261-b52d46814b95" FileName="Snags\StandardGraph.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d2a4f19f-bd66-466c-b2d5-ebdfd62a937d" FileName="Snags\StateMachine.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e4d68443-26ad-47c9-a9ea-47e3c7f106ce" FileName="Snags\Subsystem.png" SourceData="" BuildFlags="" />
      <OtherFile Id="7870b55c-04cb-4f76-b2b4-1b240959ffef" FileName="Snags\ViewComponentExampleArm.png" SourceData="" BuildFlags="" />
      <OtherFile Id="94279b30-a385-47cf-a91c-4d7a89b0a3ea" FileName="Snags\ViewComponentExampleColliders.png" SourceData="" BuildFlags="" />
      <OtherFile Id="a3beebde-eb40-47c2-a6b3-45f7537f6ad3" FileName="Snags\ViewComponentExampleDiagram.png" SourceData="" BuildFlags="" />
      <OtherFile Id="a7900287-d93f-41f4-8897-77d56a0644d1" FileName="Snags\ViewComponentExampleArmArrows.png" SourceData="" BuildFlags="" />
      <OtherFile Id="a3bde98d-f2f2-4f61-a6ac-924240c2c355" FileName="Snags\ViewComponentExampleArmArrows_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="9607cd0e-4c93-488b-8fc3-e3b16098e51c" FileName="Snags\ViewComponentExampleColliders_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="35324606-1f6f-4868-9c43-7e50ad911293" FileName="Snags\AahzAbstractOverview.png" SourceData="" BuildFlags="" />
      <OtherFile Id="c89e5343-d25f-4567-81dc-f499a6176514" FileName="Snags\AahzAbstractOverview_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e5a3d422-439b-4880-9f19-342cb0929c4f" FileName="Snags\AahzMVCVMExampleWorkflow.png" SourceData="" BuildFlags="" />
      <OtherFile Id="3807823f-c086-4b47-9eb2-64022ceaa2e1" FileName="Snags\AahzMVCVMExampleWorkflow_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="137abb0b-4d5a-468c-ab1d-a031975430c2" FileName="Snags\ComputedPropertyExample.png" SourceData="" BuildFlags="" />
    </OtherFiles>
    <DefaultStylesheet>stylesheets\customstyles.css</DefaultStylesheet>
    <DefaultCaptureDirectory></DefaultCaptureDirectory>
  </OtherFilesProjectPlugin>
  <SourceControlProjectPlugin />
  <TasksProjectPlugin>
    <Tasks>
      <TaskItems />
    </Tasks>
  </TasksProjectPlugin>
  <BookletsProjectPlugin />
  <TableOfContents>
    <TocLayout Id="c7552482-a1ae-44a2-a9fc-c757d62b5073">
      <Name />
      <Description />
      <RootNodes>
        <TocNode Name="" Id="35b1eab5-47e0-48ce-a731-65ec1246473d" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
          <CaptionTemplate m="2014-10-13T18:20:44.148274Z">Getting Started</CaptionTemplate>
          <ChildNodes>
            <TocNode Name="" Id="6133b1c9-e85f-40dc-9992-b22df079c884" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate />
              <ChildNodes />
              <TargetItemId>04c14482-98e8-40bf-97e6-7409cde33af1</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
            <TocNode Name="" Id="3c201c45-e7cb-465f-857e-744b1db14bbe" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate />
              <ChildNodes />
              <TargetItemId>583badfd-f0f4-4b77-bd3c-d400e36ca4c5</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
            <TocNode Name="" Id="b853f822-b9bb-4f86-9326-36fee44a1468" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate />
              <ChildNodes>
                <TocNode Name="" Id="bbc24fae-03e7-4f5e-ba3f-0219722c4b24" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>76f31960-f608-49d5-a7b8-db6a6a72b43c</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
              <TargetItemId>437a5b4b-327e-42a3-af18-baed8011c184</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
            <TocNode Name="" Id="1aa0a23d-6531-422b-bf74-6437905089d8" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2014-10-29T14:17:24.5529914Z">Video Tutorials</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="21ab572a-2e72-4955-a27b-ac98ef4bcb9c" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>258a43a6-826c-4f5e-8575-c2f96a1b5900</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="1897723d-4288-4d76-a220-b28c08b0292c" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>91afe810-6a1b-40cf-ad84-1e54797bdb67</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="9e0f5314-04f0-4905-b950-3bfa45d060ea" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>549bf522-56d1-49f5-8390-55d7e756a53e</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="1bd5fdd5-b180-481e-baac-dfea77c265f4" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>abc5a31a-ca02-487d-8809-187acdc81fe8</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="4f80b7d5-fa57-40d1-9c0f-beb863d258a1" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>cfb007ad-c46a-4db4-a5b9-3d863d67be01</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="c3d22d0a-3bb1-4f4f-9288-899a83fa3b1f" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>cc78d8ca-2640-4a6f-9fd4-70ac45c2ae3a</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="9cd0bee2-ecc5-4035-9a91-372acc9fa129" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>8aeb927a-0644-41f0-98ff-794cec3b1286</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="0cbe90a7-1909-42db-b919-6aee5b627ea2" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>e8c51d6a-5c73-463c-993e-743967b92141</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="4e1ab6d4-e0f4-4a3a-bedd-a377097e6317" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>1acbb409-eed7-49e9-b884-b99016e5ec36</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="3c17029f-2cdf-470e-b137-badf33e2a21e" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>31e4332e-ad04-444a-a94d-03c018e4cccd</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="d7bb91ce-7bc2-4a5d-8cde-3c6b60cf243e" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>981f89d2-5b0d-4ceb-baff-5707b805ffe3</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="b21835aa-346f-4dc6-b326-9410b988c679" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>f01c64e6-c5f3-4ecc-a53b-8c753c8a299c</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="cbfb6a30-5baa-4fa4-af7b-7075a4641ba8" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate m="2014-10-16T20:39:49.0667588Z">uFrame Designer Overview</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="b6e52725-39cd-497e-ae35-44a3983987cb" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>caa76e7d-8e9f-43a4-bf73-f2fcbd4d9d86</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="651fbfba-9b32-49e2-a84e-781312bd0a4a" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>b51260b4-0c4e-4f21-90df-d971db93c767</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="2706e19a-b877-4c52-98bf-440c656bb79e" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>60ab37f3-8377-49bd-be22-b31e92be53d3</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="f9dcd4ad-21fa-4ccb-bc4a-27474ab886a3" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>02238864-9eea-4cf3-be6d-5b002912722b</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="6d5180bb-5c0d-4714-9b84-cfe3f00ff297" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>a29f996a-0ff7-4b69-afae-bfd05cea4d8c</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="fd31262a-39c2-433b-ab50-0e0621fc07f7" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>df126356-3e6c-4075-90eb-3945b589a5f2</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
              <TargetItemId>6486588d-9b70-4752-b7ff-12031971913e</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
            <TocNode Name="" Id="c12b01ec-c48c-4ebb-8dfd-9ba3c279f69c" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate />
              <ChildNodes>
                <TocNode Name="" Id="03dec2bc-27f0-4fc6-a21a-eaa085482e66" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>76f31960-f608-49d5-a7b8-db6a6a72b43c</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="f92eb264-2274-47b2-97fd-55540fd974a1" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>0dd4ebb1-0eff-457c-9e69-7a8cc0f83d8c</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
              <TargetItemId>b06099a7-ca47-4f5b-ba33-adf61f2087e2</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
            <TocNode Name="" Id="72a388bd-6728-4d04-aadb-787f42c3e8d0" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2014-11-01T15:21:06.4057653Z">General uFrame Architecture</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="16ae72ae-9ae9-45bb-a78e-d31779409951" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>c5917965-7b52-4578-930d-0561db7d148f</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="bf4ea0b9-b255-4697-8ad6-181c18e45f14" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>850a8a7a-38b3-4758-b31f-418ad4c27b08</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="a65ecf26-36b1-4dfe-9c8b-ec524e403d7d" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>7c6f1cc0-2fe3-4aaa-af9a-b630b05a6941</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="31fccd97-7ec1-4085-a63c-7bbd284c72d5" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate m="2014-11-01T15:25:49.8186955Z">Standard Graphs</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="524c2218-4b49-4ded-a2a1-df4f53901b5d" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>b3002e56-bf6f-45da-9f49-42e8bc6a1b75</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="7a941e04-88b5-49cf-ae3f-c10897c47974" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2014-10-13T18:21:19.411807Z">Subsystems</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="896eda86-4d96-4e64-bb91-fd49b254742c" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>1bd39002-76ff-4e66-aabf-6116e93d6531</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="76a74903-b88b-4161-95e1-211cdc0271bd" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>19471c2a-5a8c-4057-bd6d-a240e3b7d591</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="545ef447-2985-4480-86f4-ffc7cd068128" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>fd1a0a34-2b0e-44d7-a4af-17ea1f742925</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
              </ChildNodes>
              <TargetItemId>163a98a5-faa7-4766-bf23-5753540d1b36</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
            <TocNode Name="" Id="f6d46513-d1bb-4cfb-b4bd-14ac9db7a1cb" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate m="2014-10-16T21:15:10.7274586Z">Subsystem Graphs</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="6847840f-7ee4-435f-aa71-aad7c8cfa5e9" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>7edcf2c5-36ad-42af-8d3f-e835e4e09663</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
              <TargetItemId>045c826f-723f-49ca-bd8f-8d311bb4ce17</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
            <TocNode Name="" Id="c73a7d59-3e56-40ee-b4dd-bddaf8f2c5ae" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate m="2014-10-16T21:15:18.2027443Z">Element Graphs</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="21e9a43b-2252-4e0e-96fb-57a3b1523aef" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes>
                    <TocNode Name="" Id="000b9204-69df-46bf-801d-a34255b647ef" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>eb67ce5c-74be-4fec-ac3b-8c3da0d70429</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="4b0b9175-261d-4524-9b56-b2a9fa73a949" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes>
                        <TocNode Name="" Id="deeed889-a1b5-47f7-aafa-0b759dfac769" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                          <CaptionTemplate />
                          <ChildNodes />
                          <TargetItemId>72f02312-f677-46d4-b99d-e01cbb6b6b1e</TargetItemId>
                          <TargetItemBookmark></TargetItemBookmark>
                        </TocNode>
                        <TocNode Name="" Id="b982c7f9-b3b9-42ac-bf22-5fb6805347c9" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                          <CaptionTemplate />
                          <ChildNodes />
                          <TargetItemId>ad08f057-8008-420b-b346-7d872a9eb590</TargetItemId>
                          <TargetItemBookmark></TargetItemBookmark>
                        </TocNode>
                        <TocNode Name="" Id="1307f744-0e13-4452-bf6f-d39ee936f125" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                          <CaptionTemplate />
                          <ChildNodes />
                          <TargetItemId>15fea1be-94ab-4e58-bc17-407c80498c0b</TargetItemId>
                          <TargetItemBookmark></TargetItemBookmark>
                        </TocNode>
                        <TocNode Name="" Id="3db01ecd-e462-44b1-95a6-67cdeeebf90e" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                          <CaptionTemplate />
                          <ChildNodes />
                          <TargetItemId>abc30a82-9c31-48ef-8229-3d71b222f156</TargetItemId>
                          <TargetItemBookmark></TargetItemBookmark>
                        </TocNode>
                        <TocNode Name="" Id="7a75415a-f384-4541-9b5a-d635a31184b7" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                          <CaptionTemplate />
                          <ChildNodes />
                          <TargetItemId>744f3a47-dfc5-46c0-a89e-7e3f316ab3e1</TargetItemId>
                          <TargetItemBookmark></TargetItemBookmark>
                        </TocNode>
                      </ChildNodes>
                      <TargetItemId>c30e8c87-9490-4500-96d6-6a41b786b158</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                  <TargetItemId>730908da-4f6a-40f1-abe8-273314e2a44a</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="05ca88b2-2359-4d25-aead-29fab165baff" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2014-11-02T05:39:19.3667316Z">View Components</CaptionTemplate>
                  <ChildNodes />
                </TocNode>
                <TocNode Name="" Id="58701baf-896e-45b3-8664-367e84f987f4" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>101b79aa-5f98-4757-9ff7-9fdf728457c0</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="d623627a-9cd1-4bde-9f28-d25a84221837" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2014-10-16T20:41:42.9872838Z">Using Elements</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="50524a38-0b64-4526-96f9-fb0e2ef2488b" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes>
                        <TocNode Name="" Id="c8107f6d-396c-40e6-8925-ada9caf28976" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                          <CaptionTemplate />
                          <ChildNodes />
                          <TargetItemId>e1dbc736-3e4c-4f4e-81ce-5a33c68ed2e4</TargetItemId>
                          <TargetItemBookmark></TargetItemBookmark>
                        </TocNode>
                        <TocNode Name="" Id="d9f4bcf2-1272-4059-b8b9-13517be17ee4" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                          <CaptionTemplate />
                          <ChildNodes />
                          <TargetItemId>0a37bccf-fa89-4734-9440-24f8a22d383d</TargetItemId>
                          <TargetItemBookmark></TargetItemBookmark>
                        </TocNode>
                        <TocNode Name="" Id="96a4eca1-2c8b-4bf9-95e1-c202e0cd9b09" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                          <CaptionTemplate />
                          <ChildNodes />
                          <TargetItemId>e95b8198-24d7-43f4-890f-f655bb845961</TargetItemId>
                          <TargetItemBookmark></TargetItemBookmark>
                        </TocNode>
                      </ChildNodes>
                      <TargetItemId>15bc489a-f456-4def-ba39-62629d322612</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="f7814667-6d9e-4576-b969-d5d5e598e348" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes>
                        <TocNode Name="" Id="572dbe9b-5283-4f1a-9c08-18a38dafd97c" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                          <CaptionTemplate />
                          <ChildNodes />
                          <TargetItemId>7b5d5abb-f449-4e38-86e8-8b86c8edb835</TargetItemId>
                          <TargetItemBookmark></TargetItemBookmark>
                        </TocNode>
                      </ChildNodes>
                      <TargetItemId>5282f69d-509a-48c2-a820-5ac63a688825</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="810af5df-56de-421e-a857-3c69df51915c" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate m="2014-10-13T21:21:58.0228376Z">Computed Properties</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="b4b2b5f4-ecbd-4587-b144-2919a4a9ff12" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>cfb007ad-c46a-4db4-a5b9-3d863d67be01</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                  <TargetItemId>2f6e3256-0882-41c1-a390-15ec22cd6ca7</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
              <TargetItemId>33c7a085-1434-44ce-9c2e-3ae7c10cfe62</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
            <TocNode Name="" Id="6cab336c-f5ec-4c98-9b18-5a7f47a9e59d" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate m="2014-10-16T21:15:41.5722727Z">State Machine Graphs</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="af7a443e-78a7-4829-9c18-377e54398758" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>610cdbf6-7f3d-4106-bc73-b74e55dab5f7</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="08e6d038-0aa0-4561-a53c-8b7c949a3bd2" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes>
                    <TocNode Name="" Id="f96b8c0a-dcd0-42c9-8d47-985797e99b1c" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>c445d3d0-a7cc-4c29-9bcc-85f87c5c090c</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="df41d226-0cf6-45df-9531-15cb72bc810c" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>abc30a82-9c31-48ef-8229-3d71b222f156</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="3e11b53d-a300-4a52-a3a3-7bb2bb8083ce" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>3278a347-f0b1-480b-88a9-9e6028184857</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                  <TargetItemId>d4b39ca7-948e-4d28-81bd-8386fe0a2f60</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="f00971f2-6e7a-4db0-88f8-02e0747b52f8" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>a76df40e-954c-4908-be01-65a4cb724925</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
              <TargetItemId>a76df40e-954c-4908-be01-65a4cb724925</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
            <TocNode Name="" Id="6b648726-e16c-4b9a-9911-325ae22e0bd0" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate />
              <ChildNodes>
                <TocNode Name="" Id="f1983d91-4388-4039-9943-89fbf0935173" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes>
                    <TocNode Name="" Id="fcfcef0d-9d8a-46cd-b65f-448bef790eb4" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>4f07c8b5-2636-4ae7-8a32-caf63e8ab551</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="bcbb45ef-f5d8-494d-b845-77b2aba7d7ff" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>5319d3d7-68e3-4df9-9b42-c83e27c386de</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                  <TargetItemId>30c20df5-c0ca-4084-8229-97c5ad9ab8e4</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="6378dfe7-4283-404b-8810-1063d53ee875" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2015-01-08T05:41:21.4862119Z">MVCVM In-Depth</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="514ef18d-8ee9-4ad8-bca4-53074ace5c74" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>f18e15aa-5018-4752-ba7d-0464a3b81a10</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="6e80d890-f1ba-42c6-8bf2-7a379f1425fe" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes>
                        <TocNode Name="" Id="a3583155-7cf7-4a01-9e27-48fd03419530" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                          <CaptionTemplate />
                          <ChildNodes />
                          <TargetItemId>6f5c9720-828c-42e0-b28d-88a3d01a9ede</TargetItemId>
                          <TargetItemBookmark></TargetItemBookmark>
                        </TocNode>
                      </ChildNodes>
                      <TargetItemId>d940e93f-1a9a-4e7b-9886-375863d2376e</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="0dd6ec3d-9980-4677-9692-70abbd9d136b" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes>
                        <TocNode Name="" Id="7ca7d7d7-1592-4edb-beda-fd820e34b55f" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                          <CaptionTemplate />
                          <ChildNodes />
                          <TargetItemId>1556ba05-2036-493e-9c02-d1c355cd2cb1</TargetItemId>
                          <TargetItemBookmark></TargetItemBookmark>
                        </TocNode>
                      </ChildNodes>
                      <TargetItemId>f2680e3d-e92c-4f71-a91a-bdaed65a31d6</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="5ef116ac-ab88-4c22-9fac-4aee2bec82ea" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes>
                        <TocNode Name="" Id="93aaeeb8-0491-443f-aff5-bd4d40054986" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                          <CaptionTemplate />
                          <ChildNodes />
                          <TargetItemId>54b6b859-4c29-4fa3-a0e8-3dadefd40e50</TargetItemId>
                          <TargetItemBookmark></TargetItemBookmark>
                        </TocNode>
                        <TocNode Name="" Id="ecaef28a-1f72-45c1-86e4-47f9e6169cbf" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                          <CaptionTemplate />
                          <ChildNodes />
                          <TargetItemId>3375264e-cc07-4607-9d0d-9fb39199078d</TargetItemId>
                          <TargetItemBookmark></TargetItemBookmark>
                        </TocNode>
                        <TocNode Name="" Id="da5a8fa7-6958-4bdd-b1c2-24c5f35d5a13" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                          <CaptionTemplate />
                          <ChildNodes>
                            <TocNode Name="" Id="c2d327dd-4520-4f75-8d3e-fbaec3b57755" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                              <CaptionTemplate />
                              <ChildNodes />
                              <TargetItemId>1acbb409-eed7-49e9-b884-b99016e5ec36</TargetItemId>
                              <TargetItemBookmark></TargetItemBookmark>
                            </TocNode>
                          </ChildNodes>
                          <TargetItemId>47b69744-b74d-4ef3-9a00-7d5d19d3371a</TargetItemId>
                          <TargetItemBookmark></TargetItemBookmark>
                        </TocNode>
                        <TocNode Name="" Id="4e6c2524-e687-49a7-b21f-1b8b5a301513" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                          <CaptionTemplate />
                          <ChildNodes />
                          <TargetItemId>9ff4259c-c42d-41dd-9c1c-f6e2774be729</TargetItemId>
                          <TargetItemBookmark></TargetItemBookmark>
                        </TocNode>
                      </ChildNodes>
                      <TargetItemId>76bb978a-9044-4be5-a4b3-dd3bc891eb24</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="8e8cf617-c678-443e-951b-f02f2e1743ea" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                      <CaptionTemplate m="2015-01-21T00:54:13.3964452Z">uFrame Specifics</CaptionTemplate>
                      <ChildNodes>
                        <TocNode Name="" Id="5850a7b9-5939-4bac-91b4-cab3c17fb4f9" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                          <CaptionTemplate />
                          <ChildNodes>
                            <TocNode Name="" Id="6ca2abe7-2a19-421b-b2d0-a25678d675a0" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                              <CaptionTemplate />
                              <ChildNodes>
                                <TocNode Name="" Id="cb53671c-1af0-44e8-acac-2ee70bc4fd7b" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                                  <CaptionTemplate />
                                  <ChildNodes />
                                  <TargetItemId>611ba270-3498-4b75-a555-f7a16574dc04</TargetItemId>
                                  <TargetItemBookmark></TargetItemBookmark>
                                </TocNode>
                                <TocNode Name="" Id="5029b55d-a730-40c9-bcd8-4c655c03187f" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                                  <CaptionTemplate />
                                  <ChildNodes />
                                  <TargetItemId>28181020-f6c3-4772-97a7-fe1761a650ad</TargetItemId>
                                  <TargetItemBookmark></TargetItemBookmark>
                                </TocNode>
                                <TocNode Name="" Id="9f016c20-3cba-404a-9e59-1a1c76ae9440" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                                  <CaptionTemplate />
                                  <ChildNodes />
                                  <TargetItemId>d0365577-9a6f-43d8-ab64-ed30062ba4a8</TargetItemId>
                                  <TargetItemBookmark></TargetItemBookmark>
                                </TocNode>
                              </ChildNodes>
                              <TargetItemId>2dd53c97-d129-430b-8252-d86db7175b91</TargetItemId>
                              <TargetItemBookmark></TargetItemBookmark>
                            </TocNode>
                            <TocNode Name="" Id="2c97ea4c-6f52-442b-be3d-7777ce2dd0dd" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                              <CaptionTemplate />
                              <ChildNodes />
                              <TargetItemId>7d754988-6cf9-4b70-af5b-6c90edfcbacb</TargetItemId>
                              <TargetItemBookmark></TargetItemBookmark>
                            </TocNode>
                            <TocNode Name="" Id="8dde0638-9621-4a67-af1d-8951d997b254" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                              <CaptionTemplate />
                              <ChildNodes />
                              <TargetItemId>dfb72a29-0102-4bdf-bfc5-0f32cdf66a77</TargetItemId>
                              <TargetItemBookmark></TargetItemBookmark>
                            </TocNode>
                            <TocNode Name="" Id="ede68ce5-d01f-4569-82c6-58a8adc5c836" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                              <CaptionTemplate />
                              <ChildNodes>
                                <TocNode Name="" Id="2dfc30b5-f130-44e4-84d4-b865515b0fb0" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                                  <CaptionTemplate />
                                  <ChildNodes />
                                  <TargetItemId>56f421fb-9245-44f3-881f-2540fcbefeb3</TargetItemId>
                                  <TargetItemBookmark></TargetItemBookmark>
                                </TocNode>
                                <TocNode Name="" Id="2620954f-75e8-4ad4-a2e7-8ae2a2345a4e" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                                  <CaptionTemplate />
                                  <ChildNodes />
                                  <TargetItemId>a37ff8ec-f4e5-4c61-931e-dbdc3d17e72f</TargetItemId>
                                  <TargetItemBookmark></TargetItemBookmark>
                                </TocNode>
                                <TocNode Name="" Id="54f4f7b4-10d5-46ad-80d5-df4cf195ac32" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                                  <CaptionTemplate />
                                  <ChildNodes />
                                  <TargetItemId>bfc96d33-fd78-44dd-a495-9d5de2cbd348</TargetItemId>
                                  <TargetItemBookmark></TargetItemBookmark>
                                </TocNode>
                                <TocNode Name="" Id="e530c928-87f4-44b1-b361-27c41eaa9bff" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                                  <CaptionTemplate />
                                  <ChildNodes />
                                  <TargetItemId>c052d127-00c9-4df7-a384-577f3901d8cf</TargetItemId>
                                  <TargetItemBookmark></TargetItemBookmark>
                                </TocNode>
                                <TocNode Name="" Id="51524333-9793-4cc4-afdc-321e55e94cb3" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                                  <CaptionTemplate />
                                  <ChildNodes />
                                  <TargetItemId>7eb1a7c5-b876-434e-ae5c-e1aab2d5ec43</TargetItemId>
                                  <TargetItemBookmark></TargetItemBookmark>
                                </TocNode>
                              </ChildNodes>
                              <TargetItemId>a22c1df0-16cf-4c86-8a3c-a6a30b8eee96</TargetItemId>
                              <TargetItemBookmark></TargetItemBookmark>
                            </TocNode>
                            <TocNode Name="" Id="338c8d36-2d00-4e22-b344-f9ad09355991" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                              <CaptionTemplate />
                              <ChildNodes />
                              <TargetItemId>fff0c043-05aa-43c7-b574-016c61c1d4f6</TargetItemId>
                              <TargetItemBookmark></TargetItemBookmark>
                            </TocNode>
                          </ChildNodes>
                          <TargetItemId>92c7fe99-ece7-45c9-a6d2-4be43f1d913e</TargetItemId>
                          <TargetItemBookmark></TargetItemBookmark>
                        </TocNode>
                      </ChildNodes>
                    </TocNode>
                    <TocNode Name="" Id="16ee3837-0144-4363-af2f-2ba11acd0eed" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>483159df-5850-4689-b63a-7d0b9f9b81d7</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="6c1d2e32-fcdf-423a-8436-fd4d23d3c4bb" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2015-01-12T21:16:21.9038022Z">uFrame Extra Features</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="9777ae3a-3588-416a-bfc2-decb59eb6aef" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>ae1281a2-ab0b-4411-a4b6-e556db2a85c6</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="8bd53691-0f18-4ac3-8519-5879d6957217" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>8a5a4b1e-5fca-47f9-9a6e-8420300482a6</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="b52f3dbe-6f83-42d5-b8f0-a809a0e64d6d" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>2f2e05f3-6173-4678-b804-354e6b7f8a3e</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="44b0e6e5-27f6-4eb3-a38e-686074222d84" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2015-01-08T05:48:17.2559948Z">uFrame Element Designer</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="ef3550a0-db0b-4979-a263-7cd1bb4f2b02" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>452e9bb9-272b-42a4-9cec-214581b8d33c</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="98d63997-656a-45cf-9a58-ef817076381a" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>86c9f298-3f7e-4cf8-beb4-fc5550dcfdfa</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="4566e96d-d6f1-42c6-abe4-a9b9f1d2486d" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>dfbf597b-8ee8-44d0-b1a2-d34722c0e4ee</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="054cff88-2a88-4f83-a43b-5063390d49c9" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>9796cd9e-935d-4c3b-8537-f40af5d83dcd</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="0c6b11a7-417d-4f41-ac2e-4350c4e82c8f" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>eb2f17be-8cc4-4e59-ad38-6e77265a4ed4</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="5649e963-fb18-4c32-b150-b9b01b840824" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2015-01-08T06:29:14.3715337Z">UniRx and Observables</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="d77cadfc-31ac-4249-9568-03c4ee9709f3" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>d17135f4-edee-4d30-80fe-c80d8bd02cc2</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="a5175565-66cc-40ec-99af-071653fb5362" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes>
                        <TocNode Name="" Id="8120c6ba-9d31-4d45-8892-cff03f1b6aea" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                          <CaptionTemplate />
                          <ChildNodes />
                          <TargetItemId>71f0d65a-57fd-40d3-853e-3235ac9e2b82</TargetItemId>
                          <TargetItemBookmark></TargetItemBookmark>
                        </TocNode>
                        <TocNode Name="" Id="6d8e4412-32e4-46ee-b465-49ee8bfc0c68" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                          <CaptionTemplate />
                          <ChildNodes />
                          <TargetItemId>766162f3-1c66-4fd9-a52c-8cb75e142e19</TargetItemId>
                          <TargetItemBookmark></TargetItemBookmark>
                        </TocNode>
                      </ChildNodes>
                      <TargetItemId>2d0cf95b-6da0-4ecc-8d48-196fd5edf742</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="f0f875ab-0506-4666-b706-7984c6d2d592" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>df1a5d0d-5ffc-4727-893f-7528b0488171</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="d814a3e3-4ef5-4ded-ab75-e2c745fdafb7" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>5fc7b311-c58d-40ee-a267-48b7f1a63b90</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
              <TargetItemId>68250d2c-ebe7-4a11-905d-e893615d1d96</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
          </ChildNodes>
        </TocNode>
        <TocNode Name="" Id="c1061419-c047-49f0-afe5-cb28e5526af7" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" DependsOnItemTypeName="" NodeType="ALLTEMPLATETOCS">
          <ChildNodes />
        </TocNode>
      </RootNodes>
    </TocLayout>
  </TableOfContents>
  <TopicsProjectPlugin>
    <TopicCategories>
      <TopicCategory Id="-" AutoIndex="false">
        <Caption m="2009-09-11T10:57:19.7639331Z">(Un-categorized)</Caption>
        <ChildTopicCategories />
        <Topics>
          <Topic Id="080e24b1-dfe4-4655-81e2-f1b997704c7a" Status="New Topic" CreatedOn="2014-10-13T18:27:57.3047826Z" ModifiedOn="2014-10-17T15:59:52.3607161Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Installation" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-17T15:59:52.3607161Z">&lt;P&gt;Create an Empty Project, &lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="437a5b4b-327e-42a3-af18-baed8011c184" Status="New Topic" CreatedOn="2014-10-13T18:28:38.5825435Z" ModifiedOn="2014-11-01T15:09:25.3055912Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Upgrading to 1.5 from 1.4" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-11-01T15:09:25.3055912Z">&lt;P&gt;1.5 Is a rather large update.&amp;nbsp; So upgrading to 1.5 for some projects may not be feasible.&amp;nbsp; It would be worth it to watch some of the tutorials and learning some of the new concepts of 1.5 before attempting to upgrade a project.&amp;nbsp; The 1.4 package is included with 1.5 so that if a project is simply to far along to upgrade, the version is still available.&amp;nbsp; Most projects should be able to update rather smoothly depending on how well the project sticks to the uFrame way of doing things.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;0: BACKUP/BRANCH you're project.&amp;nbsp; Make sure you can successfully upgrade to 1.5 before attempting.&amp;nbsp; Especially if you are working on a time sensitive project.&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;1: Completely remove the "uFrameComplete"&amp;nbsp;folder.&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;2: Import the uFame 1.5 Package into the Unity Project.&lt;/STRONG&gt;&lt;/P&gt;&lt;innovasys:widget type="Collapsible Heading" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Heading"&gt;Step 3: Update Bind Methods&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;In Previous versions of uFrame the bind methods used to bind various Unity specific features no longer have a lambda method requirement.&lt;/P&gt;
&lt;P&gt;The compiler will most display errors or warnings if you are using&amp;nbsp;any of these methods. In order to&amp;nbsp;fix this&amp;nbsp;just remove the lambda syntax.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;BindingMethodsUpdate&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Old Syntax&lt;/P&gt;
&lt;P&gt;this.BindKey(()=&amp;gt;FPSWeapon.NextZoom, KeyCode.LeftShift);&lt;/P&gt;
&lt;P&gt;// New Syntax&lt;/P&gt;
&lt;P&gt;this.BindKey(FPSWeapon.NextZoom, KeyCode.LeftShift);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Collapsible Heading" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Heading"&gt;Step 4: Create A New Project&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;uFrame 1.5 has a new way of combining multiple diagram files into a single repository aka "Projects".&amp;nbsp; So we need to create a project to import our 1.4 diagrams files into.&lt;/P&gt;
&lt;P&gt;Navigate to the folder of your diagram file.&amp;nbsp; On the folder right-click and choose uFrame-&amp;gt;New uFrame Project&lt;/P&gt;
&lt;P&gt;Rename it something more meaningful.&lt;/P&gt;
&lt;P&gt;Now click on the project file and look in the inspector.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;By Default a graph file is already created for you.&amp;nbsp; You can remove this by click on the 'X' next to it in the "Project Diagrams" section.&lt;IMG border=0 alt="" src="images/Snagit/FPSShooterProjectInspector.png"&gt;&lt;/P&gt;
&lt;P&gt;Once it has been removed. Lets now add your existing diagram file.&amp;nbsp; You can do this by clicking the '+' button on the "Project Diagrams" section header.&lt;/P&gt;
&lt;P&gt;In the dialog select the diagram file you wish to include.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; Do not set a root namespace until you have completed the upgrade process.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Collapsible Heading" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Heading"&gt;Step 5: The "Upgrade Now" button&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;The diagram needs to update some things internally.&amp;nbsp; Luckily we've added a "Upgrade Now" button that will allow you to easily do this.&amp;nbsp; Click the button.&lt;/P&gt;
&lt;P&gt;This process will do quite a few things in order to convert to the new ways of doing this.&amp;nbsp;Lets examine these:&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Registered Instances:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;In 1.4 a SIE was basically just a registered instance that had some special code generation features.&amp;nbsp; All SIE element's from your 1.4 diagram will become a registered instance on it's parent subsystem.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;View Connections:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;The upgrade process does the best it can to reconnect the view to their elements, but in some cases it doesn't work as expected.&amp;nbsp; Double-check all of the connections in your diagram to make sure things are back to normal.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;View Bindings:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;In 1.5 they way bindings work has completely changed both in generated code and in they way they are stored.&amp;nbsp; The upgrade process will attempt to add the bindings based on the generated code.&amp;nbsp; Usually this part of it is pretty accurate, but it wouldn't hurt to double check them as well.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;View Components:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;In 1.4 View-Components where connected directly to the Element.&amp;nbsp; In 1.5 you now connect view components directly to a view.&amp;nbsp; So to fix this navigate to anywhere you have a view-component you'll need to reconnect them to the view that requires them.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Collapsible Heading" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Heading"&gt;Step 6: Save &amp;amp; Compile&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Once you have carefully completed step 5: Save &amp;amp; Compile your diagram.&amp;nbsp; This undoubtedly create some errors in your console. Don't be to alarmed as we'll go through them in the next steps.&lt;/P&gt;
&lt;P&gt;Designer Files have a new location.&amp;nbsp; They are now stored under a "_DesignerFiles" Folder.&amp;nbsp; So if there are any remaining diagram files in the project folder. Simply delete them.&lt;/P&gt;
&lt;P&gt;At this point you should have some errors that will be fairly specific to you're project.&amp;nbsp; We'll cover the main ones in the next steps.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Collapsible Heading" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Heading"&gt;Step 7: Fixing Controllers&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Since there is no longer a "Single Instance Element" concepts in 1.5 All controllers should mimic the way multi-instance controllers where generated in 1.4.&amp;nbsp; This makes all controllers consistent moving forward.&lt;/P&gt;
&lt;P&gt;To do this you'll need to modify all command implementations for these outdated controllers.&amp;nbsp; You simply just need to add a parameter for the sender ViewModel.&amp;nbsp; Here is an example:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;UpgradeControllerCommands&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Old way&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void MainMenu()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.MainMenu();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // New Way&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void MainMenu(FPSGameViewModel fPSGame)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.MainMenu(fPSGame);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Collapsible Heading" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Heading"&gt;Step 8: Fixing Yield Commands&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp;In uFrame 1.5 yield commands have been removed to greater support external compatibility.&amp;nbsp; This transition will be painless once you understand the new UniRX features.&amp;nbsp; In order to create time based functions you can use Observable.Timer, and Observable.Interval.&amp;nbsp; These are a more generic implementation of time based operations that can be recreated elsewhere (I.E. Server Implementations)&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Fixing Yield Commands&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Old Way&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public override IEnumerator Reload(FPSWeaponViewModel fpsWeapon)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fpsWeapon.State = FPSWeaponState.Reloading;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yield return new WaitForSeconds(fpsWeapon.ReloadTime);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fpsWeapon.Ammo = fpsWeapon.RoundSize;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fpsWeapon.State = FPSWeaponState.Active;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// New Way&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void Reload(FPSWeaponViewModel fpsWeapon)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fpsWeapon.State = FPSWeaponState.Reloading;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Observable.Timer(TimeSpan.FromSeconds(fpsWeapon.ReloadTime))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .Subscribe(_ =&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fpsWeapon.Ammo = fpsWeapon.RoundSize;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fpsWeapon.State = FPSWeaponState.Active;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Collapsible Heading" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Heading"&gt;Step 9: View Collection Binding Signatures&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp;On your views that bind to a collection of view-models.&amp;nbsp; you'll need to update the signature of the Added method and the RemoveMethod.&amp;nbsp; If you aren't using these you shouldn't worry about it.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;ViewCollectionOverrides&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Old way&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;public override void EnemiesAdded(FPSEnemyViewBase item)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//...etc&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void EnemiesRemoved(FPSEnemyViewBase item)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//...etc&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // New Way&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void EnemiesAdded(ViewBase item)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //...etc&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void EnemiesRemoved(ViewBase item)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //...etc&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The Create{Collection}View method has also been modified as just an empty method.&amp;nbsp; The uFrame code generator for this binding no longer generates the default implementation for you.&amp;nbsp; This is for consistency reasons and to remove any black magic.&amp;nbsp; Luckily to recreate this method it's nothing more than the following:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;CreateWeapon&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override ViewBase CreateWeaponsView(FPSWeaponViewModel fPSWeapon)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return InstantiateView(fPSWeapon);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt; 
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Collapsible Heading" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Heading"&gt;Step 10: Updating View Resolution&amp;nbsp;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Now navigate to all the scenes where you have views that are single instance views.&amp;nbsp; The should now be registered instances, so any view that previously used an SIE ViewModel.&amp;nbsp; You'll just need to click the button at the top of the Initialization section on the view in order to use that instance.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/UseRegisteredInstance.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Collapsible Heading" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Heading"&gt;Step 11: Project Specific Issues&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;If you've made it this far, your project should be correctly updated to the changes, there might be some small issues that we simply haven't been able to account for.&amp;nbsp; Let the compiler be your guide.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="6486588d-9b70-4752-b7ff-12031971913e" Status="New Topic" CreatedOn="2014-10-13T18:28:59.8159881Z" ModifiedOn="2014-10-13T18:57:06.0169649Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Element Designer Overview" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-13T18:57:06.0169649Z">&lt;P&gt;&lt;STRONG&gt;Opening The uFrame&amp;nbsp;Designer&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/SelectDesignerWindow.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;uFrame Designer Overview&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/DesignerOverview_markedup.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="5ac0cca2-d666-4b11-9353-36aca269321b" Status="New Topic" CreatedOn="2014-10-13T18:30:05.5721165Z" ModifiedOn="2014-10-24T17:03:41.1596186Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Code Generation Overview" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-24T17:03:41.1576172Z">&lt;P&gt;uFrame is a very powerful tool becuase of its code generation features, it's not just a UML diagram, it generates a very sophisticated and intelligent&amp;nbsp;code base base on uFrame Core architecture.&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=170&gt;&lt;STRONG&gt;Folder Name&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD width=619&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=170&gt;_DesignerFiles&lt;/TD&gt;
&lt;TD width=619&gt;All the files in this directory are maintained by the uFrame Designer, nothing inside of this folder should be edited as the next time a project is "Save &amp;amp; Compiled" it will regenerate them.&amp;nbsp; These usually consist of base classes that editable files derive from for custom implementation.&lt;/TD&gt;
&lt;TD&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=170&gt;Components&lt;/TD&gt;
&lt;TD width=619&gt;All editable View Component classes.&lt;/TD&gt;
&lt;TD&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=170&gt;Controllers&lt;/TD&gt;
&lt;TD width=619&gt;All editable Controller classes.&lt;/TD&gt;
&lt;TD&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=170&gt;Machines&lt;/TD&gt;
&lt;TD width=619&gt;All editable State Machine classes.&lt;/TD&gt;
&lt;TD&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=170&gt;SceneManagers&lt;/TD&gt;
&lt;TD width=619&gt;All editable scene managers classes.&lt;/TD&gt;
&lt;TD&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=170&gt;Scenes&lt;/TD&gt;
&lt;TD width=619&gt;When creating a scene from a scene manager, the created scene will be stored in this directory.&lt;/TD&gt;
&lt;TD&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=170&gt;Types&lt;/TD&gt;
&lt;TD width=619&gt;All editable simple class node files.&lt;/TD&gt;
&lt;TD&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=170&gt;ViewModels&lt;/TD&gt;
&lt;TD width=619&gt;All editable view-models.&lt;/TD&gt;
&lt;TD&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=170&gt;Views&lt;/TD&gt;
&lt;TD width=619&gt;All editable View files.&lt;/TD&gt;
&lt;TD&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="f654953e-09cb-4056-9c65-80cbf919a901" Status="New Topic" CreatedOn="2014-10-13T18:35:53.417588Z" ModifiedOn="2014-10-13T18:36:15.4970532Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Changes in 1.5" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-13T18:35:53.417588Z">&lt;p&gt; &lt;/p&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="caa76e7d-8e9f-43a4-bf73-f2fcbd4d9d86" Status="New Topic" CreatedOn="2014-10-13T18:58:21.4483986Z" ModifiedOn="2014-11-01T15:19:41.9544916Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Adding Nodes" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-13T19:16:03.5584038Z">&lt;P&gt;To add a node right-click on any empty space on the diagram, then the availble nodes in the current context are displayed.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/DiagramContextMenu.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks>
              <TopicLink Id="d5a71e11-edd6-4b37-9769-8855f256facf" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b51260b4-0c4e-4f21-90df-d971db93c767" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
            </TopicLinks>
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="b51260b4-0c4e-4f21-90df-d971db93c767" Status="New Topic" CreatedOn="2014-10-13T19:05:55.3123772Z" ModifiedOn="2014-10-28T17:41:44.5901693Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Showing and Hiding Nodes" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-17T15:59:52.3637012Z">&lt;P&gt;Sometimes you need to easily move items around within the same diagram or you might want to display the same node in different&amp;nbsp;graphs throught your diagram&amp;nbsp;as well. This can be done with showing &amp;amp; hiding nodes.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;To Hide a node right-click on the node top bar and choose hide.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/HideNode.png"&gt;&lt;/P&gt;
&lt;P&gt;To show an item navigate to a valid context where the node can be displayed, right-click on an empty space in the graph area and select it from the "Show Item" menu.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/ShowNode.png"&gt;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks>
              <TopicLink Id="d7b62bdd-92cb-42de-81bc-a8f37e755562" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="60ab37f3-8377-49bd-be22-b31e92be53d3" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
            </TopicLinks>
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="60ab37f3-8377-49bd-be22-b31e92be53d3" Status="New Topic" CreatedOn="2014-10-13T19:11:00.1663726Z" ModifiedOn="2014-10-28T17:41:27.4344822Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Pushing &amp; Pulling Nodes" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-28T17:41:19.7304939Z">&lt;P&gt;All nodes belong to a diagram file that&amp;nbsp;lives in&amp;nbsp;the current uFrame project.&amp;nbsp;&amp;nbsp; When the project is saved all nodes will be serialized with their corresponding diagram.&amp;nbsp; This makes working with teams, and reusable modules possible.&amp;nbsp; Since a diagram owns a node, in many cases it may make sense to change it's ownership to another diagram.&amp;nbsp; This is often the case when a previously created diagram needs to be separated into reusable diagrams for other projects.&amp;nbsp; To do this uFrame has a push and pull mechanism:&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;To push a node (i.e. move to another diagram) right click on element and choose Push To-&amp;gt;{TargetDiagram}.&amp;nbsp; &lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/PushTo.png"&gt;&lt;/P&gt;
&lt;P&gt;When the node is not local to the current diagram&amp;nbsp;the node will be slightly darker than normal to indicate this.&amp;nbsp;To make a node local to the current diagram: Right-click the node and choose Pull From.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/PullFrom.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks>
              <TopicLink Id="b103f5cd-8a76-4de7-8529-4695a1da55eb" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b51260b4-0c4e-4f21-90df-d971db93c767" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
            </TopicLinks>
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="c1bf5c79-c79f-4500-a2fa-f25b4ddca532" Status="New Topic" CreatedOn="2014-10-13T19:11:54.8307998Z" ModifiedOn="2014-10-13T19:12:02.5459257Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Exporting Nodes" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-13T19:11:54.8307998Z">&lt;p&gt; &lt;/p&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="02238864-9eea-4cf3-be6d-5b002912722b" Status="New Topic" CreatedOn="2014-10-13T19:12:41.0560078Z" ModifiedOn="2014-10-13T19:16:03.5634069Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Diagram Navigation" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-13T19:16:03.5634069Z">&lt;P&gt;&lt;STRONG&gt;Navigating Sub-Diagrams&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;Some nodes are context for other types of nodes, to navigate to them, double click on a node to view a sub-diagram that will allow for further definition.&lt;/P&gt;
&lt;P&gt;To back-out of a sub diagram you can either use the context path area on the top left of the toolbar, or simple double-click the node again.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="a29f996a-0ff7-4b69-afae-bfd05cea4d8c" Status="New Topic" CreatedOn="2014-10-13T19:16:19.8407569Z" ModifiedOn="2014-10-13T19:24:08.5565494Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Making Connections" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-13T19:24:08.5565494Z">&lt;P&gt;When you hover over an item, arrow will be displayed showing connection points.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/ConnectionBegin.png"&gt;&lt;/P&gt;
&lt;P&gt;Click and hold, and begin dragging. While dragging other connection end points will display to guide you to what can be connected to.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/ConnectionDrag.png"&gt;&lt;/P&gt;
&lt;P&gt;While dragging when holding your mouse over another node, it will attempt to connect to the first acceptable input, if this is input not correct drag to the correct one.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/ConnectionEnd.png"&gt;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="b06099a7-ca47-4f5b-ba33-adf61f2087e2" Status="New Topic" CreatedOn="2014-10-13T19:27:02.2549421Z" ModifiedOn="2014-10-13T19:31:02.4862001Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Using Projects" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-13T19:31:02.4862001Z">&lt;P&gt;To create a new project simply open the designer window and if there aren't any projects in your Unity project simply fill out the new project window dialog that is displayed.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;If you've already got a project in your Unity project you can create other projects by right-clicking on a folder and choosing create-project.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/CreateProjectMenu.png"&gt;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="76f31960-f608-49d5-a7b8-db6a6a72b43c" Status="New Topic" CreatedOn="2014-10-13T19:31:36.7920202Z" ModifiedOn="2014-11-02T17:55:12.8562223Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Importing Diagram Files" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-11-02T17:55:12.8562223Z">&lt;P&gt;In some cases whether it be upgrading, or sharing a common set of nodes between various projects you might need to load a diagram from another project.&lt;/P&gt;
&lt;P&gt;To do this navigate to the project diagram inspector by clicking on your project asset file that was created for you when you created your project.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/ProjectInspector.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;From within this window you can click the add button next to the project diagrams window and choose from any diagram file within your current Unity project file.&lt;IMG border=0 alt="" src="images/Snagit/ImportProjectDiagram.png"&gt;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="0dd4ebb1-0eff-457c-9e69-7a8cc0f83d8c" Status="New Topic" CreatedOn="2014-10-13T19:36:58.2096408Z" ModifiedOn="2014-10-31T16:15:08.2677426Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Project Settings" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-31T16:15:08.2677426Z">&lt;P&gt;Currently there are only a few options for settings, but in the future this area will continue to grow providing more options.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Root Namespace&lt;/STRONG&gt; - setting is for defining the root namespace at which all generated code will reside.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Generate Comments&lt;/STRONG&gt; - setting for whether or not to generate helper comments in editable generated files.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Code Generators -&lt;/STRONG&gt; In the future of uFrame there are situations where swapping a generator for a different type of generator will be necessary, this configuration setting is currently not available and should be disregaurded until a future release.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/ProjectInspector_Settings.png"&gt;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks>
              <TopicLink Id="affea3d3-8ac1-4f95-a481-8c6a7d14a25f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="76f31960-f608-49d5-a7b8-db6a6a72b43c" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
              <TopicLink Id="60b9f79a-fae1-47e9-88cd-d45435ec2c38" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b06099a7-ca47-4f5b-ba33-adf61f2087e2" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
            </TopicLinks>
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="b3002e56-bf6f-45da-9f49-42e8bc6a1b75" Status="New Topic" CreatedOn="2014-10-13T21:06:13.0761253Z" ModifiedOn="2014-10-29T14:38:23.4464352Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Scene Managers" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-16T20:27:06.7403186Z">&lt;P&gt;Scene Managers ultimatley provide context to a scene defining how it loads, unloads&amp;nbsp;and transitions to other scenes.&amp;nbsp; It is maintained by the Game Manager and only one will be active at a time.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Every scene manager requires an appropriate sub-system to&amp;nbsp;be attached to it.&amp;nbsp; This will define how uFrame will generate it's boot loader, every element&amp;nbsp;defined in the subsystem will&amp;nbsp;have its controller registered, as well as any Registered Instances initialized.&amp;nbsp; This will also include any subsystems that are included into the attached subsystem.&lt;/P&gt;
&lt;P&gt;In short, if a scene&amp;nbsp;is going to&amp;nbsp;use an element&amp;nbsp;make sure its included in a subsystem that leads into the scene manager.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/FPSSceneFlow_SceneManagers.png"&gt;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks>
              <TopicLink Id="dbb18605-5734-4c9b-8f46-586e0ed89f65" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="1bd39002-76ff-4e66-aabf-6116e93d6531" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
              <TopicLink Id="e6cc4577-47c2-4385-a8ac-bae18bb582c8" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="a22c1df0-16cf-4c86-8a3c-a6a30b8eee96" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
              <TopicLink Id="10490934-3798-4fa9-8577-18df6e84d170" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="549bf522-56d1-49f5-8390-55d7e756a53e" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
            </TopicLinks>
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="045c826f-723f-49ca-bd8f-8d311bb4ce17" Status="New Topic" CreatedOn="2014-10-13T21:10:41.5274043Z" ModifiedOn="2014-11-01T15:27:41.9607471Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Subsystem Diagrams" BuildFlags="">
            <Title m="2014-11-01T15:26:15.7278794Z">Subsystem Graphs</Title>
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-11-01T15:27:41.9607471Z">&lt;P&gt;Subsystem Graphs allow you to focus in on the elements of the game.&amp;nbsp; In this step it's great to start by creating all of the elements/entities and defining how they relate to each other.&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks>
              <TopicLink Id="3b848cdf-124d-41b7-8ce8-3c83d703af3e" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="981f89d2-5b0d-4ceb-baff-5707b805ffe3" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
            </TopicLinks>
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="7edcf2c5-36ad-42af-8d3f-e835e4e09663" Status="New Topic" CreatedOn="2014-10-13T21:11:22.6205317Z" ModifiedOn="2015-01-07T13:58:55.1657526Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Element Inheritance" BuildFlags="">
            <Title />
            <ContentsTitle m="2015-01-07T13:58:55.1657526Z">Element Inheritance</ContentsTitle>
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-31T17:50:26.9142809Z">&lt;P&gt;Inheritance is a great way to make your classes maintainable and extensible.&amp;nbsp; With uFrame you can express this via the input and output connectors of the element nodes. For Example examine the following image:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/Inheritance.png"&gt;&lt;/P&gt;
&lt;P&gt;Dog and Cat both derive from Animal.&amp;nbsp; This means that the generated controller for Dog and Cat will derive from AnimalController, and the ViewModel will derived from AnimalViewModel.&amp;nbsp; So anything you implement inside AnimalController, or AnimalViewModel will also be a part of Dog, and Cat as well. So here is what it looks like in the generated&amp;nbsp;code.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;GeneratedElementInheritance&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public abstract class DogControllerBase : AnimalController {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public abstract void InitializeDog(DogViewModel dog);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override ViewModel CreateEmpty() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return new DogViewModel(this);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public virtual DogViewModel CreateDog() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return ((DogViewModel)(this.Create()));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void Initialize(ViewModel viewModel) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.Initialize(viewModel);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.InitializeDog(((DogViewModel)(viewModel)));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;public abstract class AnimalControllerBase : Controller {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public abstract void InitializeAnimal(AnimalViewModel animal);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public virtual AnimalViewModel CreateAnimal() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return ((AnimalViewModel)(this.Create()));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void Initialize(ViewModel viewModel) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.InitializeAnimal(((AnimalViewModel)(viewModel)));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;public abstract class CatControllerBase : AnimalController {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public abstract void InitializeCat(CatViewModel cat);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override ViewModel CreateEmpty() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return new CatViewModel(this);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public virtual CatViewModel CreateCat() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return ((CatViewModel)(this.Create()));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void Initialize(ViewModel viewModel) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.Initialize(viewModel);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.InitializeCat(((CatViewModel)(viewModel)));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks>
              <TopicLink Id="9fab2f70-6179-417f-8dd4-50e7be1dfe6e" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="981f89d2-5b0d-4ceb-baff-5707b805ffe3" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
            </TopicLinks>
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="33c7a085-1434-44ce-9c2e-3ae7c10cfe62" Status="New Topic" CreatedOn="2014-10-13T21:18:41.3708415Z" ModifiedOn="2014-11-03T16:22:00.5605814Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Element Diagrams" BuildFlags="">
            <Title m="2014-11-01T15:26:28.0815034Z">Element Graphs</Title>
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-11-03T16:22:00.5605814Z">&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="a76df40e-954c-4908-be01-65a4cb724925" Status="New Topic" CreatedOn="2014-10-13T21:19:37.6092233Z" ModifiedOn="2014-10-26T17:07:33.6945684Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="State Machine Diagrams" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-26T17:07:33.6945684Z">&lt;P&gt;uFrame utilizes a new concept developed to fit the uFrame and RX paradigm of programming.&amp;nbsp; We like to call this "Re-active" state machines.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;The main concept if re-active state machines (RSM's)&amp;nbsp;is that when defining them in your diagrams you don't need to focus on anything other than the states and transitions that make up the machine.&amp;nbsp; Making the machine come to life is a matter of wiring them to computed properties, command bindings, and view bindings.&amp;nbsp; But initially, you can focus purely on the high-level rather than implementation, once commands and transitions are all wired together transitions and states can be easily tweaked with minimal to zero changes in your code.&lt;/P&gt;
&lt;P&gt;Reactive State Machines employ the concept of subscribing to data changes rather than polling data every frame, this can give a definate increase in performance.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/FPSWeaonStateMachine.png"&gt;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks>
              <TopicLink Id="b1f7a0ed-e37a-4e28-b677-a1cc36d5d101" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f01c64e6-c5f3-4ecc-a53b-8c753c8a299c" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
            </TopicLinks>
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="eb7da142-e1ca-4213-b4f2-424c9ddfc2e5" Status="New Topic" CreatedOn="2014-10-13T21:20:20.1400962Z" ModifiedOn="2014-10-13T21:21:43.9367314Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Computed Properties" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-13T21:20:20.1400962Z">&lt;p&gt; &lt;/p&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="730908da-4f6a-40f1-abe8-273314e2a44a" Status="New Topic" CreatedOn="2014-10-13T21:23:06.746384Z" ModifiedOn="2014-10-13T21:23:24.3761576Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Views" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-13T21:23:06.746384Z">&lt;p&gt; &lt;/p&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="0569aec9-1eb3-428b-89fa-cc11b2d97dd2" Status="New Topic" CreatedOn="2014-10-13T21:23:54.8565824Z" ModifiedOn="2014-10-13T21:24:56.8210783Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="View Components" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-13T21:23:54.8565824Z">&lt;p&gt; &lt;/p&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="101b79aa-5f98-4757-9ff7-9fdf728457c0" Status="New Topic" CreatedOn="2014-10-13T21:25:03.9957535Z" ModifiedOn="2014-10-13T21:44:34.4580655Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Simple Classes" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-13T21:44:34.4580655Z">&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="df126356-3e6c-4075-90eb-3945b589a5f2" Status="New Topic" CreatedOn="2014-10-13T21:28:29.6345339Z" ModifiedOn="2014-10-28T17:49:02.9630419Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Editor Settings &amp; Plugins" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-28T17:49:02.9630419Z">&lt;P&gt;&amp;nbsp;You can access uFrame settings by navigating to the Tools Menu-&amp;gt;uFrame-&amp;gt;Settings option.&amp;nbsp;Here you can change the diagram background color, grid line colors, and activate plug ins as necessary.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/uFrameSettings.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="d505408c-b737-4ba9-9116-abc43c7c3aba" Status="New Topic" CreatedOn="2014-10-13T21:45:54.534901Z" ModifiedOn="2014-10-16T20:27:06.7383172Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Using Scene Managers" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-16T20:27:06.7383172Z">&lt;P&gt;&lt;SPAN style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); TEXT-ALIGN: left; FONT: 17px/26px Calibri; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"&gt;For every Scene Manager, located in the Element Designer, uFrame will generate the following things when saving the diagram&lt;/SPAN&gt;&lt;/P&gt;&lt;SPAN style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); TEXT-ALIGN: left; FONT: 17px/26px Calibri; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"&gt;
&lt;P style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/21px "Open Sans", Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 0.25in; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px'&gt;&lt;STRONG&gt;&lt;SPAN style="FONT-SIZE: 13pt; FONT-FAMILY: Calibri"&gt;The Derived Class:&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN style="FONT-SIZE: 13pt; FONT-FAMILY: Calibri"&gt;This class is generated for extensibility and represents the actual name of the Scene Manager created in the Element Designer. It is also the component that is used in a scene. This file will be kept in the SceneManager folder and it will not be created again, so as to avoid removing any custom code.&amp;nbsp;&lt;/SPAN&gt;&lt;BR _moz_dirty="true"&gt;&lt;/P&gt;
&lt;P style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/21px "Open Sans", Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 0.25in; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px'&gt;&lt;STRONG style="LINE-HEIGHT: 1.5"&gt;&lt;SPAN style="FONT-SIZE: 13pt; FONT-FAMILY: Calibri"&gt;The Settings Class:&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;STRONG style="LINE-HEIGHT: 1.5"&gt;&lt;SPAN style="FONT-SIZE: 13pt; FONT-FAMILY: Times"&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/STRONG&gt;&lt;SPAN style="FONT-SIZE: 13pt; FONT-FAMILY: Calibri"&gt;This is also generated inside of the Element Designer file and is meant to give the Scene Manager information about setting up a scene. These are used for transitions or for setting up the current scene you are working in.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;Scene Managers give context to a scene by&lt;/P&gt;&lt;/SPAN&gt;
&lt;P&gt;&lt;FONT face=Calibri&gt;&lt;/FONT&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="0f5c677c-08c3-41b8-8d33-62a26ab2ba86" Status="New Topic" CreatedOn="2014-10-13T21:46:18.7326439Z" ModifiedOn="2014-10-13T21:46:44.5400256Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Using Element Generated Code" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-13T21:46:18.7326439Z">&lt;p&gt; &lt;/p&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="eb67ce5c-74be-4fec-ac3b-8c3da0d70429" Status="New Topic" CreatedOn="2014-10-13T21:47:23.5253563Z" ModifiedOn="2014-10-13T21:47:31.8918792Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Using Views" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-13T21:47:23.5253563Z">&lt;p&gt; &lt;/p&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="2373e834-5297-445c-ae8e-81efb52389ba" Status="New Topic" CreatedOn="2014-10-13T21:47:54.9770633Z" ModifiedOn="2015-02-03T09:53:27.2993521Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Using View Components" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2015-02-03T09:53:27.2993521Z">&lt;P&gt;View Components are meant to provide an extra level of "View" extensibility that plays nicely with Unity's component system.&amp;nbsp; All View-Components derive from MonoBehaviours and allow you to compose Views with various different components.&amp;nbsp; Each View-Component requires a View at which the Element View-Model can be accessed.&amp;nbsp; View-Components also have a property for the same View-Model that the connected view has as well as the corresponding execute methods.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="163a98a5-faa7-4766-bf23-5753540d1b36" Status="New Topic" CreatedOn="2014-10-14T23:10:52.7626289Z" ModifiedOn="2014-11-01T15:27:41.9577423Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Scene Flow" BuildFlags="">
            <Title m="2014-11-01T15:25:41.8428299Z">Standard Graphs</Title>
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-11-01T15:27:41.9577423Z">&lt;P&gt;The purpose of a&amp;nbsp;standard graph in uFrame&amp;nbsp;is to focus purely on high level categorization and how they relate to a scene, and creating context for these scene by connecting subsystems to scene managers.&amp;nbsp; Scene Flow allows you to focus on how everything will be categorized or separated either for re-use, or to separate workload to team members.&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="75ea236f-0fea-4079-bf1c-32495270dba2" Status="New Topic" CreatedOn="2014-10-15T00:02:47.7759366Z" ModifiedOn="2014-10-26T18:09:11.8946212Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Code Architecture" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-26T18:09:11.8946212Z">&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="850a8a7a-38b3-4758-b31f-418ad4c27b08" Status="New Topic" CreatedOn="2014-10-15T00:04:46.1233143Z" ModifiedOn="2015-01-30T08:54:03.5670197Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="uFrame Startup" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2015-01-30T08:54:03.5670197Z">&lt;DIV class=sf_cols style='HEIGHT: 1835px; WIDTH: 1053px; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/21px "Open Sans", Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -ms-zoom: 1; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;
&lt;DIV class="sf_colsOut sf_1col_1_100" style="FLOAT: none; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"&gt;
&lt;DIV id=contentPlaceholder_TC36A8D30002_Col00 class="sf_colsIn sf_1col_1in_100" style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"&gt;
&lt;DIV class=sfContentBlock style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"&gt;
&lt;H3 style='BORDER-BOTTOM: rgb(204,204,204) 1px solid; TEXT-TRANSFORM: capitalize; PADDING-BOTTOM: 5px; PADDING-TOP: 0px; FONT: bold 1.28em/1.4em "Open Sans", sans-serif; PADDING-LEFT: 0px; MARGIN: 30px 0px 10px; PADDING-RIGHT: 0px; font-size-adjust: none; font-stretch: normal'&gt;The Anatomy Of UFrame&lt;/H3&gt;
&lt;P style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; PADDING-RIGHT: 0px"&gt;So now that we've talked about the general concept of uFrame. &amp;nbsp;We need to go over how this is all put together in uFrame.&lt;/P&gt;
&lt;H3 style='BORDER-BOTTOM: rgb(204,204,204) 1px solid; TEXT-TRANSFORM: capitalize; PADDING-BOTTOM: 5px; PADDING-TOP: 0px; FONT: bold 1.28em/1.4em "Open Sans", sans-serif; PADDING-LEFT: 0px; MARGIN: 30px 0px 10px; PADDING-RIGHT: 0px; font-size-adjust: none; font-stretch: normal'&gt;Scene Loading/Booting&lt;/H3&gt;
&lt;P style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; PADDING-RIGHT: 0px"&gt;The first thing to load in uFrame is the GameManager. &amp;nbsp;This happens because of its predefined "Script Execution Order". &amp;nbsp;When the GameManager loads it makes sure that it is the first instance to load. &amp;nbsp;If it's not the first instance then it will transfer the properties of itself to the current instance and then destroy itself.&lt;BR&gt;&lt;BR&gt;Then the GameManager will begin by calling the "Start" SceneManger's setup method that is specified in the "Start" property located on the GameManger's inspector options. &amp;nbsp;Before we go much further lets examine this setup method.&lt;BR&gt;&lt;/P&gt;
&lt;H3 style='BORDER-BOTTOM: rgb(204,204,204) 1px solid; TEXT-TRANSFORM: capitalize; PADDING-BOTTOM: 5px; PADDING-TOP: 0px; FONT: bold 1.28em/1.4em "Open Sans", sans-serif; PADDING-LEFT: 0px; MARGIN: 30px 0px 10px; PADDING-RIGHT: 0px; font-size-adjust: none; font-stretch: normal'&gt;The Setup Method&lt;/H3&gt;
&lt;P style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; PADDING-RIGHT: 0px"&gt;This method could be defined as the scene bootstraper. &amp;nbsp;It's responsibility is to register any dependencies with the dependency container that comes with uFrame.&lt;BR&gt;&lt;/P&gt;
&lt;DIV class=reCodeBlock style="BORDER-TOP: rgb(127,157,185) 1px solid; BORDER-RIGHT: rgb(127,157,185) 1px solid; BORDER-BOTTOM: rgb(127,157,185) 1px solid; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; BORDER-LEFT: rgb(127,157,185) 1px solid; PADDING-RIGHT: 0px; -ms-overflow-y: auto"&gt;
&lt;DIV style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255)"&gt;&lt;CODE style="WIDTH: 3em; FLOAT: left; FONT-WEIGHT: normal; COLOR: rgb(92,92,92); FONT-STYLE: normal; TEXT-ALIGN: right; DISPLAY: block; PADDING-RIGHT: 0.3em"&gt;1.&lt;/CODE&gt;&lt;SPAN style="MARGIN-LEFT: 0px !important"&gt;&lt;CODE style="FONT-WEIGHT: bold; COLOR: rgb(0,102,153); FONT-STYLE: normal"&gt;public&lt;/CODE&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE style="FONT-WEIGHT: bold; COLOR: rgb(0,102,153); FONT-STYLE: normal"&gt;override&lt;/CODE&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE style="FONT-WEIGHT: bold; COLOR: rgb(0,102,153); FONT-STYLE: normal"&gt;void&lt;/CODE&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;Setup()&lt;/CODE&gt;&lt;/SPAN&gt; &lt;/DIV&gt;
&lt;DIV style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(248,248,248)"&gt;&lt;CODE style="WIDTH: 3em; FLOAT: left; FONT-WEIGHT: normal; COLOR: rgb(92,92,92); FONT-STYLE: normal; TEXT-ALIGN: right; DISPLAY: block; PADDING-RIGHT: 0.3em"&gt;2.&lt;/CODE&gt;&lt;SPAN style="MARGIN-LEFT: 0px !important"&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;{&lt;/CODE&gt;&lt;/SPAN&gt; &lt;/DIV&gt;
&lt;DIV style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255)"&gt;&lt;CODE style="WIDTH: 3em; FLOAT: left; FONT-WEIGHT: normal; COLOR: rgb(92,92,92); FONT-STYLE: normal; TEXT-ALIGN: right; DISPLAY: block; PADDING-RIGHT: 0.3em"&gt;3.&lt;/CODE&gt;&lt;SPAN&gt;&lt;CODE style="FONT-WEIGHT: normal; FONT-STYLE: normal"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/CODE&gt;&lt;SPAN style="MARGIN-LEFT: 12px !important"&gt;&lt;CODE style="FONT-WEIGHT: bold; COLOR: rgb(0,102,153); FONT-STYLE: normal"&gt;base&lt;/CODE&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;.Setup();&lt;/CODE&gt;&lt;/SPAN&gt;&lt;/SPAN&gt; &lt;/DIV&gt;
&lt;DIV style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(248,248,248)"&gt;&lt;CODE style="WIDTH: 3em; FLOAT: left; FONT-WEIGHT: normal; COLOR: rgb(92,92,92); FONT-STYLE: normal; TEXT-ALIGN: right; DISPLAY: block; PADDING-RIGHT: 0.3em"&gt;4.&lt;/CODE&gt;&lt;SPAN&gt;&lt;CODE style="FONT-WEIGHT: normal; FONT-STYLE: normal"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/CODE&gt;&lt;SPAN style="MARGIN-LEFT: 24px !important"&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt; &lt;/DIV&gt;
&lt;DIV style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255)"&gt;&lt;CODE style="WIDTH: 3em; FLOAT: left; FONT-WEIGHT: normal; COLOR: rgb(92,92,92); FONT-STYLE: normal; TEXT-ALIGN: right; DISPLAY: block; PADDING-RIGHT: 0.3em"&gt;5.&lt;/CODE&gt;&lt;SPAN style="MARGIN-LEFT: 0px !important"&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;}&lt;/CODE&gt;&lt;/SPAN&gt; &lt;/DIV&gt;&lt;/DIV&gt;
&lt;P style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; PADDING-RIGHT: 0px"&gt;&lt;BR&gt;&lt;/P&gt;
&lt;P style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; PADDING-RIGHT: 0px"&gt;At first glance, it looks like an empty method that calls its base class's setup method. &amp;nbsp;They key here is in the base call because uFrame generates the basic bootstrapper for you. &amp;nbsp;To fully understand how its registering dependencies lets take a look at simple example of a generated setup method.&lt;BR&gt;&lt;/P&gt;&lt;/DIV&gt;
&lt;DIV class=sfContentBlock style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"&gt;
&lt;DIV class=reCodeBlock style="BORDER-TOP: rgb(127,157,185) 1px solid; BORDER-RIGHT: rgb(127,157,185) 1px solid; BORDER-BOTTOM: rgb(127,157,185) 1px solid; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; BORDER-LEFT: rgb(127,157,185) 1px solid; PADDING-RIGHT: 0px; -ms-overflow-y: auto"&gt;
&lt;DIV style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255)"&gt;&lt;CODE style="WIDTH: 3em; FLOAT: left; FONT-WEIGHT: normal; COLOR: rgb(92,92,92); FONT-STYLE: normal; TEXT-ALIGN: right; DISPLAY: block; PADDING-RIGHT: 0.3em"&gt;1.&lt;/CODE&gt;&lt;SPAN style="MARGIN-LEFT: 0px !important"&gt;&lt;CODE style="FONT-WEIGHT: bold; COLOR: rgb(0,102,153); FONT-STYLE: normal"&gt;public&lt;/CODE&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE style="FONT-WEIGHT: bold; COLOR: rgb(0,102,153); FONT-STYLE: normal"&gt;override&lt;/CODE&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE style="FONT-WEIGHT: bold; COLOR: rgb(0,102,153); FONT-STYLE: normal"&gt;void&lt;/CODE&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;Setup() {&lt;/CODE&gt;&lt;/SPAN&gt; &lt;/DIV&gt;
&lt;DIV style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(248,248,248)"&gt;&lt;CODE style="WIDTH: 3em; FLOAT: left; FONT-WEIGHT: normal; COLOR: rgb(92,92,92); FONT-STYLE: normal; TEXT-ALIGN: right; DISPLAY: block; PADDING-RIGHT: 0.3em"&gt;2.&lt;/CODE&gt;&lt;SPAN&gt;&lt;CODE style="FONT-WEIGHT: normal; FONT-STYLE: normal"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/CODE&gt;&lt;SPAN style="MARGIN-LEFT: 15px !important"&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,130,0); FONT-STYLE: normal"&gt;// Register every controller defined in the subsystems that are connected to the scene manager in the designer&lt;/CODE&gt;&lt;/SPAN&gt;&lt;/SPAN&gt; &lt;/DIV&gt;
&lt;DIV style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255)"&gt;&lt;CODE style="WIDTH: 3em; FLOAT: left; FONT-WEIGHT: normal; COLOR: rgb(92,92,92); FONT-STYLE: normal; TEXT-ALIGN: right; DISPLAY: block; PADDING-RIGHT: 0.3em"&gt;3.&lt;/CODE&gt;&lt;SPAN&gt;&lt;CODE style="FONT-WEIGHT: normal; FONT-STYLE: normal"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/CODE&gt;&lt;SPAN style="MARGIN-LEFT: 15px !important"&gt;&lt;CODE style="FONT-WEIGHT: bold; COLOR: rgb(0,102,153); FONT-STYLE: normal"&gt;this&lt;/CODE&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;.MyElementController =&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/CODE&gt;&lt;CODE style="FONT-WEIGHT: bold; COLOR: rgb(0,102,153); FONT-STYLE: normal"&gt;new&lt;/CODE&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;MyElementController() { Container = Container, Context = Context };&lt;/CODE&gt;&lt;/SPAN&gt;&lt;/SPAN&gt; &lt;/DIV&gt;
&lt;DIV style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(248,248,248)"&gt;&lt;CODE style="WIDTH: 3em; FLOAT: left; FONT-WEIGHT: normal; COLOR: rgb(92,92,92); FONT-STYLE: normal; TEXT-ALIGN: right; DISPLAY: block; PADDING-RIGHT: 0.3em"&gt;4.&lt;/CODE&gt;&lt;SPAN&gt;&lt;CODE style="FONT-WEIGHT: normal; FONT-STYLE: normal"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/CODE&gt;&lt;SPAN style="MARGIN-LEFT: 15px !important"&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;Container.RegisterInstance(&lt;/CODE&gt;&lt;CODE style="FONT-WEIGHT: bold; COLOR: rgb(0,102,153); FONT-STYLE: normal"&gt;this&lt;/CODE&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;.MyElementController,&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/CODE&gt;&lt;CODE style="FONT-WEIGHT: bold; COLOR: rgb(0,102,153); FONT-STYLE: normal"&gt;false&lt;/CODE&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;);&lt;/CODE&gt;&lt;/SPAN&gt;&lt;/SPAN&gt; &lt;/DIV&gt;
&lt;DIV style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255)"&gt;&lt;CODE style="WIDTH: 3em; FLOAT: left; FONT-WEIGHT: normal; COLOR: rgb(92,92,92); FONT-STYLE: normal; TEXT-ALIGN: right; DISPLAY: block; PADDING-RIGHT: 0.3em"&gt;5.&lt;/CODE&gt;&lt;SPAN&gt;&lt;CODE style="FONT-WEIGHT: normal; FONT-STYLE: normal"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/CODE&gt;&lt;SPAN style="MARGIN-LEFT: 15px !important"&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;Container.InjectAll(); // Inject all the controllers at once&lt;/CODE&gt;&lt;/SPAN&gt;&lt;/SPAN&gt; &lt;/DIV&gt;
&lt;DIV style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(248,248,248)"&gt;&lt;CODE style="WIDTH: 3em; FLOAT: left; FONT-WEIGHT: normal; COLOR: rgb(92,92,92); FONT-STYLE: normal; TEXT-ALIGN: right; DISPLAY: block; PADDING-RIGHT: 0.3em"&gt;6.&lt;/CODE&gt;&lt;SPAN style="MARGIN-LEFT: 0px !important"&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;}&lt;/CODE&gt;&lt;/SPAN&gt; &lt;/DIV&gt;&lt;/DIV&gt;
&lt;P style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; PADDING-RIGHT: 0px"&gt;There is more to this method than displayed but we'll talk about that in a second. &amp;nbsp;The key points to notice in the above example is line 3 and 4 where it's registering a single instance of a controller. &amp;nbsp;This means that when we call&lt;BR&gt;&lt;/P&gt;
&lt;DIV class=reCodeBlock style="BORDER-TOP: rgb(127,157,185) 1px solid; BORDER-RIGHT: rgb(127,157,185) 1px solid; BORDER-BOTTOM: rgb(127,157,185) 1px solid; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; BORDER-LEFT: rgb(127,157,185) 1px solid; PADDING-RIGHT: 0px; -ms-overflow-y: auto"&gt;
&lt;DIV style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255)"&gt;&lt;CODE style="WIDTH: 3em; FLOAT: left; FONT-WEIGHT: normal; COLOR: rgb(92,92,92); FONT-STYLE: normal; TEXT-ALIGN: right; DISPLAY: block; PADDING-RIGHT: 0.3em"&gt;1.&lt;/CODE&gt;&lt;SPAN style="MARGIN-LEFT: 0px !important"&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;Container.Resolve&amp;lt;MyElementController&amp;gt;();&lt;/CODE&gt;&lt;/SPAN&gt; &lt;/DIV&gt;&lt;/DIV&gt;
&lt;P style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; PADDING-RIGHT: 0px"&gt;it will return the same instance of the controller we registered in the Setup method. &amp;nbsp;All this means is that the controller, in its own form is a Singleton. &amp;nbsp;&lt;BR&gt;&lt;BR&gt;We register these controllers in the setup method because it is important that they are ready to be used as unity loads the views and GameObjects in the scene.&lt;BR&gt;&lt;BR&gt;&lt;/P&gt;&lt;/DIV&gt;
&lt;DIV class=sfContentBlock style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"&gt;
&lt;P style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; PADDING-RIGHT: 0px"&gt;&lt;BR&gt;&lt;/P&gt;
&lt;P style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; PADDING-RIGHT: 0px"&gt;Ok and now for the next part of the setup method. &amp;nbsp;The next part is where we register every single instance Element's View-Model so that they will behave like a Singleton just like all of the controllers do.&lt;BR&gt;&lt;/P&gt;
&lt;DIV class=reCodeBlock style="BORDER-TOP: rgb(127,157,185) 1px solid; BORDER-RIGHT: rgb(127,157,185) 1px solid; BORDER-BOTTOM: rgb(127,157,185) 1px solid; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; BORDER-LEFT: rgb(127,157,185) 1px solid; PADDING-RIGHT: 0px; -ms-overflow-y: auto"&gt;
&lt;DIV style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255)"&gt;&lt;CODE style="WIDTH: 3em; FLOAT: left; FONT-WEIGHT: normal; COLOR: rgb(92,92,92); FONT-STYLE: normal; TEXT-ALIGN: right; DISPLAY: block; PADDING-RIGHT: 0.3em"&gt;1.&lt;/CODE&gt;&lt;SPAN style="MARGIN-LEFT: 0px !important"&gt;&lt;CODE style="FONT-WEIGHT: bold; COLOR: rgb(0,102,153); FONT-STYLE: normal"&gt;public&lt;/CODE&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE style="FONT-WEIGHT: bold; COLOR: rgb(0,102,153); FONT-STYLE: normal"&gt;override&lt;/CODE&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE style="FONT-WEIGHT: bold; COLOR: rgb(0,102,153); FONT-STYLE: normal"&gt;void&lt;/CODE&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;Setup() {&lt;/CODE&gt;&lt;/SPAN&gt; &lt;/DIV&gt;
&lt;DIV style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(248,248,248)"&gt;&lt;CODE style="WIDTH: 3em; FLOAT: left; FONT-WEIGHT: normal; COLOR: rgb(92,92,92); FONT-STYLE: normal; TEXT-ALIGN: right; DISPLAY: block; PADDING-RIGHT: 0.3em"&gt;2.&lt;/CODE&gt;&lt;SPAN&gt;&lt;CODE style="FONT-WEIGHT: normal; FONT-STYLE: normal"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/CODE&gt;&lt;SPAN style="MARGIN-LEFT: 15px !important"&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,130,0); FONT-STYLE: normal"&gt;// ... the other stuff from above&lt;/CODE&gt;&lt;/SPAN&gt;&lt;/SPAN&gt; &lt;/DIV&gt;
&lt;DIV style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255)"&gt;&lt;CODE style="WIDTH: 3em; FLOAT: left; FONT-WEIGHT: normal; COLOR: rgb(92,92,92); FONT-STYLE: normal; TEXT-ALIGN: right; DISPLAY: block; PADDING-RIGHT: 0.3em"&gt;3.&lt;/CODE&gt;&lt;SPAN&gt;&lt;CODE style="FONT-WEIGHT: normal; FONT-STYLE: normal"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/CODE&gt;&lt;SPAN style="MARGIN-LEFT: 15px !important"&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;Container.RegisterInstance&amp;lt;MyElementViewModel&amp;gt;(SetupViewModel&amp;lt;MyElementViewModel&amp;gt;(MyElementController,&lt;/CODE&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: blue; FONT-STYLE: normal"&gt;"MyElement"&lt;/CODE&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;));&lt;/CODE&gt;&lt;/SPAN&gt;&lt;/SPAN&gt; &lt;/DIV&gt;
&lt;DIV style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(248,248,248)"&gt;&lt;CODE style="WIDTH: 3em; FLOAT: left; FONT-WEIGHT: normal; COLOR: rgb(92,92,92); FONT-STYLE: normal; TEXT-ALIGN: right; DISPLAY: block; PADDING-RIGHT: 0.3em"&gt;4.&lt;/CODE&gt;&lt;SPAN style="MARGIN-LEFT: 0px !important"&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;}&lt;/CODE&gt;&lt;/SPAN&gt; &lt;/DIV&gt;&lt;/DIV&gt;
&lt;P style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; PADDING-RIGHT: 0px"&gt;The key part to note here is that we are calling "SetupViewModel". &amp;nbsp;This is simply a helper method for creating Single-Instance View-Models. &amp;nbsp;This method will create the ViewModel and assign it the appropriate controller passed in the first argument if it doesn't already exist.&lt;BR&gt;&lt;BR&gt;Another to thing to note is that when we register instances with this container. &amp;nbsp;It will inject the instances with any dependencies they require. &amp;nbsp;This is done with the "Inject" attribute defined on a property or field. uFrame automatically generates controller properties inside of each controller based on the relationships to its element. &amp;nbsp;For example:&lt;BR&gt;&lt;/P&gt;
&lt;DIV class=reCodeBlock style="BORDER-TOP: rgb(127,157,185) 1px solid; BORDER-RIGHT: rgb(127,157,185) 1px solid; BORDER-BOTTOM: rgb(127,157,185) 1px solid; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; BORDER-LEFT: rgb(127,157,185) 1px solid; PADDING-RIGHT: 0px; -ms-overflow-y: auto"&gt;
&lt;DIV style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255)"&gt;&lt;CODE style="WIDTH: 3em; FLOAT: left; FONT-WEIGHT: normal; COLOR: rgb(92,92,92); FONT-STYLE: normal; TEXT-ALIGN: right; DISPLAY: block; PADDING-RIGHT: 0.3em"&gt;1.&lt;/CODE&gt;&lt;SPAN style="MARGIN-LEFT: 0px !important"&gt;&lt;CODE style="FONT-WEIGHT: bold; COLOR: rgb(0,102,153); FONT-STYLE: normal"&gt;public&lt;/CODE&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE style="FONT-WEIGHT: bold; COLOR: rgb(0,102,153); FONT-STYLE: normal"&gt;abstract&lt;/CODE&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE style="FONT-WEIGHT: bold; COLOR: rgb(0,102,153); FONT-STYLE: normal"&gt;class&lt;/CODE&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;CheckerBoardControllerBase : Controller {&lt;/CODE&gt;&lt;/SPAN&gt; &lt;/DIV&gt;
&lt;DIV style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(248,248,248)"&gt;&lt;CODE style="WIDTH: 3em; FLOAT: left; FONT-WEIGHT: normal; COLOR: rgb(92,92,92); FONT-STYLE: normal; TEXT-ALIGN: right; DISPLAY: block; PADDING-RIGHT: 0.3em"&gt;2.&lt;/CODE&gt;&lt;SPAN&gt;&lt;CODE style="FONT-WEIGHT: normal; FONT-STYLE: normal"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/CODE&gt;&lt;SPAN style="MARGIN-LEFT: 12px !important"&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt; &lt;/DIV&gt;
&lt;DIV style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255)"&gt;&lt;CODE style="WIDTH: 3em; FLOAT: left; FONT-WEIGHT: normal; COLOR: rgb(92,92,92); FONT-STYLE: normal; TEXT-ALIGN: right; DISPLAY: block; PADDING-RIGHT: 0.3em"&gt;3.&lt;/CODE&gt;&lt;SPAN&gt;&lt;CODE style="FONT-WEIGHT: normal; FONT-STYLE: normal"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/CODE&gt;&lt;SPAN style="MARGIN-LEFT: 12px !important"&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;[Inject]&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/CODE&gt;&lt;CODE style="FONT-WEIGHT: bold; COLOR: rgb(0,102,153); FONT-STYLE: normal"&gt;public&lt;/CODE&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;CheckerController CheckerController {&lt;/CODE&gt;&lt;CODE style="FONT-WEIGHT: bold; COLOR: rgb(0,102,153); FONT-STYLE: normal"&gt;get&lt;/CODE&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;;&lt;/CODE&gt;&lt;CODE style="FONT-WEIGHT: bold; COLOR: rgb(0,102,153); FONT-STYLE: normal"&gt;set&lt;/CODE&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;;}&lt;/CODE&gt;&lt;/SPAN&gt;&lt;/SPAN&gt; &lt;/DIV&gt;
&lt;DIV style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(248,248,248)"&gt;&lt;CODE style="WIDTH: 3em; FLOAT: left; FONT-WEIGHT: normal; COLOR: rgb(92,92,92); FONT-STYLE: normal; TEXT-ALIGN: right; DISPLAY: block; PADDING-RIGHT: 0.3em"&gt;4.&lt;/CODE&gt;&lt;SPAN&gt;&lt;CODE style="FONT-WEIGHT: normal; FONT-STYLE: normal"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/CODE&gt;&lt;SPAN style="MARGIN-LEFT: 12px !important"&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;[Inject]&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/CODE&gt;&lt;CODE style="FONT-WEIGHT: bold; COLOR: rgb(0,102,153); FONT-STYLE: normal"&gt;public&lt;/CODE&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;CheckerPlateController CheckerPlateController {&lt;/CODE&gt;&lt;CODE style="FONT-WEIGHT: bold; COLOR: rgb(0,102,153); FONT-STYLE: normal"&gt;get&lt;/CODE&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;;&lt;/CODE&gt;&lt;CODE style="FONT-WEIGHT: bold; COLOR: rgb(0,102,153); FONT-STYLE: normal"&gt;set&lt;/CODE&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;;}&lt;/CODE&gt;&lt;/SPAN&gt;&lt;/SPAN&gt; &lt;/DIV&gt;
&lt;DIV style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255)"&gt;&lt;CODE style="WIDTH: 3em; FLOAT: left; FONT-WEIGHT: normal; COLOR: rgb(92,92,92); FONT-STYLE: normal; TEXT-ALIGN: right; DISPLAY: block; PADDING-RIGHT: 0.3em"&gt;5.&lt;/CODE&gt;&lt;SPAN&gt;&lt;CODE style="FONT-WEIGHT: normal; FONT-STYLE: normal"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/CODE&gt;&lt;SPAN style="MARGIN-LEFT: 12px !important"&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;[Inject]&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/CODE&gt;&lt;CODE style="FONT-WEIGHT: bold; COLOR: rgb(0,102,153); FONT-STYLE: normal"&gt;public&lt;/CODE&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;CheckersGameController CheckersGameController {&lt;/CODE&gt;&lt;CODE style="FONT-WEIGHT: bold; COLOR: rgb(0,102,153); FONT-STYLE: normal"&gt;get&lt;/CODE&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;;&lt;/CODE&gt;&lt;CODE style="FONT-WEIGHT: bold; COLOR: rgb(0,102,153); FONT-STYLE: normal"&gt;set&lt;/CODE&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;;}&lt;/CODE&gt;&lt;/SPAN&gt;&lt;/SPAN&gt; &lt;/DIV&gt;
&lt;DIV style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(248,248,248)"&gt;&lt;CODE style="WIDTH: 3em; FLOAT: left; FONT-WEIGHT: normal; COLOR: rgb(92,92,92); FONT-STYLE: normal; TEXT-ALIGN: right; DISPLAY: block; PADDING-RIGHT: 0.3em"&gt;6.&lt;/CODE&gt;&lt;SPAN&gt;&lt;CODE style="FONT-WEIGHT: normal; FONT-STYLE: normal"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/CODE&gt;&lt;SPAN style="MARGIN-LEFT: 12px !important"&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt; &lt;/DIV&gt;
&lt;DIV style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255)"&gt;&lt;CODE style="WIDTH: 3em; FLOAT: left; FONT-WEIGHT: normal; COLOR: rgb(92,92,92); FONT-STYLE: normal; TEXT-ALIGN: right; DISPLAY: block; PADDING-RIGHT: 0.3em"&gt;7.&lt;/CODE&gt;&lt;SPAN&gt;&lt;CODE style="FONT-WEIGHT: normal; FONT-STYLE: normal"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/CODE&gt;&lt;SPAN style="MARGIN-LEFT: 12px !important"&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,130,0); FONT-STYLE: normal"&gt;//... other stuff removed for clarity&lt;/CODE&gt;&lt;/SPAN&gt;&lt;/SPAN&gt; &lt;/DIV&gt;
&lt;DIV style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(248,248,248)"&gt;&lt;CODE style="WIDTH: 3em; FLOAT: left; FONT-WEIGHT: normal; COLOR: rgb(92,92,92); FONT-STYLE: normal; TEXT-ALIGN: right; DISPLAY: block; PADDING-RIGHT: 0.3em"&gt;8.&lt;/CODE&gt;&lt;SPAN style="MARGIN-LEFT: 0px !important"&gt;&lt;CODE style="FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal"&gt;}&lt;/CODE&gt;&lt;/SPAN&gt; &lt;/DIV&gt;&lt;/DIV&gt;
&lt;P style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; PADDING-RIGHT: 0px"&gt;This is a generated base controller for the CheckerBoard element in the included checkers game example.&amp;nbsp;&lt;BR&gt;&lt;BR&gt;So when we register the instance of this controller. &amp;nbsp;The container will scan it looking for properties with inject attribute. &amp;nbsp;If it finds a property with the inject attribute it will "Resolve" a registered instance based on the type of the property.&lt;BR&gt;&lt;BR&gt;You could easily create your own properties and mark them with the [Inject] attribute and they will work the same way controllers do as long as you have registered it in the Setup method before the base.Setup() line is executed.&lt;BR&gt;&lt;/P&gt;
&lt;P style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; PADDING-RIGHT: 0px"&gt;This basically sums up how the purpose of the Setup method and how it initializes controllers and single instance view-models on scene load. &amp;nbsp;Lets move on to what happens next after the setup method is invoked.&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;BR&gt;&lt;/P&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;
&lt;DIV class=sf_cols style='HEIGHT: 1098px; WIDTH: 1014px; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/21px "Open Sans", Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -ms-zoom: 1; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;
&lt;DIV class="sf_colsOut sf_1col_1_100" style="FLOAT: none; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"&gt;
&lt;DIV id=contentPlaceholder_TC36A8D30008_Col00 class="sf_colsIn sf_1col_1in_100" style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"&gt;
&lt;DIV class=sfContentBlock style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"&gt;
&lt;H3 style='BORDER-BOTTOM: rgb(204,204,204) 1px solid; TEXT-TRANSFORM: capitalize; PADDING-BOTTOM: 5px; PADDING-TOP: 0px; FONT: bold 1.28em/1.4em "Open Sans", sans-serif; PADDING-LEFT: 0px; MARGIN: 30px 0px 10px; PADDING-RIGHT: 0px; font-size-adjust: none; font-stretch: normal'&gt;The Load Method&lt;/H3&gt;
&lt;P style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; PADDING-RIGHT: 0px"&gt;After the setup method is called by the game-manager. &amp;nbsp;It will then call the load method coroutine that is also on the SceneManager. This is a great place to create any root views (if any) that need to be dynamically instantiated when the scene loads. &amp;nbsp;This is also a great place to load a serialized state of a game. (See:&amp;nbsp;&lt;A style="CURSOR: text; TEXT-DECORATION: none; COLOR: rgb(16,92,182)" href="http://www.invertgamestudios.com/home/element-designer/scene-state-saving-loading"&gt;Scene State Saving &amp;amp; Loading&lt;/A&gt;&amp;nbsp;)&lt;BR&gt;&lt;BR&gt;During this load method coroutines execution the Scene is also loading. &amp;nbsp;When each view loads it will call RequestViewModel on the SceneManager. &amp;nbsp;So lets take a look at whats going on here.&lt;BR&gt;&lt;BR&gt;&lt;BR&gt;&lt;/P&gt;
&lt;H3 style='BORDER-BOTTOM: rgb(204,204,204) 1px solid; TEXT-TRANSFORM: capitalize; PADDING-BOTTOM: 5px; PADDING-TOP: 0px; FONT: bold 1.28em/1.4em "Open Sans", sans-serif; PADDING-LEFT: 0px; MARGIN: 30px 0px 10px; PADDING-RIGHT: 0px; font-size-adjust: none; font-stretch: normal'&gt;The RequestViewModel Method&lt;/H3&gt;
&lt;P style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; PADDING-RIGHT: 0px"&gt;This method provides view-models to all of the views in a scene on load. &amp;nbsp;The view will pass itself, the controller it should use, as well as the identifier for the view-model as well.&amp;nbsp;&lt;BR&gt;&lt;BR&gt;Then the method will take the identifier, search for it in the context first, then in the dependency container, and if nothing is found it will create a new one. &amp;nbsp;This is why when you set the same identifier or "ResolveName" on two different views they will get the same instance of the view-model and thus both re-act as the view-model properties and collections change.&lt;BR&gt;&lt;BR&gt;&amp;nbsp;This method will always ensure that the view-model exists in the context. &amp;nbsp;This allows any view-model to be located very easily by its identifier.&amp;nbsp;&lt;BR&gt;&lt;BR&gt;As a last and final step it will check if the view is marked as "Save &amp;amp; Load". &amp;nbsp;If it is it will add it to a separated "PersitableViews" dictionary that can easily be iterated and serialized for saving and loading a scenes state.&lt;BR&gt;&lt;/P&gt;
&lt;P style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; PADDING-RIGHT: 0px"&gt;In the last step before returning the requested view-model it will invoke "InitializeData" on the view which simply maps the properties specified in the view's inspector directly to the view-model. &amp;nbsp;Then it will call the Initialize{ElementName} on the controller passing the reference to the view-model. &amp;nbsp;This gives the controller the ultimate initialization power. &amp;nbsp;Anything applied in this method will override anything that has been set in the inspector.&lt;BR&gt;&lt;/P&gt;
&lt;P style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; PADDING-RIGHT: 0px"&gt;After a view has received it's view-model from the scene manager, the Bind method on the view will be called which will appropriately wire up the various binding methods to the property and collection change events.&lt;BR&gt;&lt;/P&gt;
&lt;P style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; PADDING-RIGHT: 0px"&gt;Note: When using uFrame InstantiateView method you can pass in a ViewModel directly in which it will skip this method entirely.&lt;BR&gt;&lt;/P&gt;
&lt;H3 style='BORDER-BOTTOM: rgb(204,204,204) 1px solid; TEXT-TRANSFORM: capitalize; PADDING-BOTTOM: 5px; PADDING-TOP: 0px; FONT: bold 1.28em/1.4em "Open Sans", sans-serif; PADDING-LEFT: 0px; MARGIN: 30px 0px 10px; PADDING-RIGHT: 0px; font-size-adjust: none; font-stretch: normal'&gt;The OnLoaded Method&lt;/H3&gt;
&lt;P style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; PADDING-RIGHT: 0px"&gt;So after all of this has been completed the OnLoaded method will be called. &amp;nbsp;There isn't much to note about its implementation because it doesn't have one. &amp;nbsp;It is simply for your own use to know when everything has been properly loaded and the game is ready to begin.&lt;/P&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="15bc489a-f456-4def-ba39-62629d322612" Status="New Topic" CreatedOn="2014-10-16T20:40:54.0271616Z" ModifiedOn="2014-11-02T04:28:55.0810676Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Element Controllers" BuildFlags="">
            <Title />
            <ContentsTitle m="2014-11-02T04:28:55.0770649Z">Element Controllers</ContentsTitle>
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-26T17:07:43.2389509Z">&lt;P&gt;&lt;SPAN style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); TEXT-ALIGN: left; FONT: 14px/21px "Open Sans", Arial, sans-serif; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;&amp;nbsp;A controller is designed to implement the data-driven logic and rules behind an element and could be considered just a "group" of commands for a view-model. The Element Designer has enough information about an element to implement most of the controller itself&lt;/SPAN&gt; &lt;SPAN style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); TEXT-ALIGN: left; FONT: 14px/21px "Open Sans", Arial, sans-serif; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;In most instances, you only need to apply the logic and rules to each method.&amp;nbsp; Controllers also allow you to easily work with other controllers and view-models without creating any hard dependencies on the view-model class itself.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); TEXT-ALIGN: left; FONT: 14px/21px "Open Sans", Arial, sans-serif; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;When a view-model is constructed with a controller passed to the first parameter, it will call Initialize on the controller as well for any additional initialization that you wan't to be specific to the controller.&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Include Topic" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="source"&gt;eaced210-4f32-4f73-8455-404cf8a36564&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="5282f69d-509a-48c2-a820-5ac63a688825" Status="New Topic" CreatedOn="2014-10-16T20:41:50.018257Z" ModifiedOn="2014-10-26T17:07:33.6735554Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Element View-Models" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-26T17:07:33.6735554Z">&lt;P&gt;View-Models in the context of uFrame usually have a very minimal implementation if any at all. View-Models is simply a container for an instance of an element.&amp;nbsp; It stores data and very minimal implementation logic like computed property implementations.&lt;/P&gt;
&lt;P&gt;View-Models are the representation of an element in code form and are meant to describe the data required by a view or views.&amp;nbsp; They are generated by the uFrame Designer to minimize the effort required to create subscribable properties and properly following the uFrame's command model.&lt;/P&gt;&lt;innovasys:widget type="Include Topic" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="source"&gt;01c935c5-717a-4d66-b8e2-1064b7ac150d&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="743c2fc4-194f-4f89-a32f-a3d9e2e70d68" Status="New Topic" CreatedOn="2014-10-16T21:05:21.9337707Z" ModifiedOn="2014-10-16T21:05:28.644517Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Customizing Transitions" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-16T21:05:21.9337707Z">&lt;p&gt; &lt;/p&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="c30e8c87-9490-4500-96d6-6a41b786b158" Status="New Topic" CreatedOn="2014-10-16T21:22:00.0289423Z" ModifiedOn="2014-10-26T17:01:32.949332Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="View Bindings" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-26T17:01:32.949332Z">&lt;innovasys:widget type="Include Topic" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="source"&gt;68e5ef59-c521-4583-b817-6401fc77e30a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="72f02312-f677-46d4-b99d-e01cbb6b6b1e" Status="New Topic" CreatedOn="2014-10-16T21:22:12.4957596Z" ModifiedOn="2014-10-31T18:03:47.0972725Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Standard Property Bindings" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-31T18:03:47.0972725Z">&lt;P&gt;Standard property binding allow you to easily bind to a property.&amp;nbsp; &lt;/P&gt;&lt;innovasys:widget type="Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Tab Item" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;View Class&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;EditableStandardPropertyBinding&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /// Subscribes to the property and is notified anytime the value changes.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void FirstNameChanged(String value) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.FirstNameChanged(value);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tab Item" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;View Base Class&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;GeneratedStandardPropertyBinding&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN id=Content class=WidgetProperty contentEditable=true style="BORDER-TOP: rgb(224,224,224) 1px dotted; BORDER-RIGHT: rgb(224,224,224) 1px dotted; WIDTH: 100%; VERTICAL-ALIGN: top; BORDER-BOTTOM: rgb(224,224,224) 1px dotted; PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 5px; BORDER-LEFT: rgb(224,224,224) 1px dotted; PADDING-RIGHT: 4px; BACKGROUND-COLOR: white"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void Bind() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.Bind();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (this._BindFirstName) { // If this binding checkbox is checked in the inspector (True by default)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.BindProperty(BindingsElement._FirstNameProperty, this.FirstNameChanged);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="ad08f057-8008-420b-b346-7d872a9eb590" Status="New Topic" CreatedOn="2014-10-16T21:22:57.9489066Z" ModifiedOn="2014-10-31T17:58:17.6101028Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Standard Collection Bindings" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-31T17:58:17.6101028Z">&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/StandardCollectionBinding.png"&gt;&lt;/P&gt;&lt;innovasys:widget type="Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Tab Item" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;View Class&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;Tab content goes here.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tab Item" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;View Base Class&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="ddee4f49-e08e-4626-86d7-f8172bb80a68" Status="New Topic" CreatedOn="2014-10-16T21:23:14.6757378Z" ModifiedOn="2014-10-16T21:23:20.8881312Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="View Property Bindings" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-16T21:23:14.6757378Z">&lt;p&gt; &lt;/p&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="15fea1be-94ab-4e58-bc17-407c80498c0b" Status="New Topic" CreatedOn="2014-10-16T21:23:24.0853929Z" ModifiedOn="2014-10-31T18:29:31.4133398Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="View Collection Bindings" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-31T18:29:31.4133398Z">&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Tab Item" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;View Class&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /// This binding will add or remove views based on an element/viewmodel collection.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override ViewBase CreateChildrenView(BindingsElementViewModel item) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return base.CreateChildrenView(item);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /// This binding will add or remove views based on an element/viewmodel collection.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void ChildrenAdded(ViewBase item) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.ChildrenAdded(item);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /// This binding will add or remove views based on an element/viewmodel collection.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void ChildrenRemoved(ViewBase item) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.ChildrenRemoved(item);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tab Item" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;View Base Class&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp; public override void Bind() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.Bind();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (this._BindChildren) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.BindToViewCollection( BindingsElement._ChildrenProperty, viewModel=&amp;gt;{ return CreateChildrenView(viewModel as BindingsElementViewModel); }, ChildrenAdded, ChildrenRemoved, _ChildrenContainer, _ChildrenSceneFirst);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /// This binding will add or remove views based on an element/viewmodel collection.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public virtual ViewBase CreateChildrenView(BindingsElementViewModel item) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return this.InstantiateView(item);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /// This binding will add or remove views based on an element/viewmodel collection.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public virtual void ChildrenAdded(ViewBase item) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /// This binding will add or remove views based on an element/viewmodel collection.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public virtual void ChildrenRemoved(ViewBase item) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="abc30a82-9c31-48ef-8229-3d71b222f156" Status="New Topic" CreatedOn="2014-10-16T21:23:34.4697382Z" ModifiedOn="2014-10-31T18:03:47.2683862Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="State Machine Bindings" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-31T18:03:47.2683862Z">&lt;P&gt;The state machine binding allows any view of an element subscribe to notifications of a state change direct the scene to update accordingly.&amp;nbsp; This binding is only available for state machines and will create a nice little method that is invoked on each state.&amp;nbsp; There is also the Standard Property Changed method where more generic implementations can be applied.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/FPSShooterGamePlay.png"&gt;&lt;/P&gt;
&lt;P&gt;In this example, this very basic state machine defines the high-level game play of the FPSShooter example. For each state the binding will generate methods for each state:&lt;/P&gt;&lt;innovasys:widget type="Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Tab Item" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;View Class&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;Tab content goes here.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tab Item" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;View Base Class&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;StateMachineBinding&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /// Subscribes to the state machine property and executes a method for each state.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void WavesStateChanged(Invert.StateMachine.State value) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.WavesStateChanged(value);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void OnWave() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.OnWave();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void OnGameOver() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.OnGameOver();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void OnWaitForNextWave() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.OnWaitForNextWave();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks>
              <TopicLink Id="21e2c636-c987-40db-878c-4aa5f7bce540" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e8c51d6a-5c73-463c-993e-743967b92141" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
              <TopicLink Id="0367ba43-eb80-492e-bf7b-54eb56fca50b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c30e8c87-9490-4500-96d6-6a41b786b158" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
            </TopicLinks>
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="744f3a47-dfc5-46c0-a89e-7e3f316ab3e1" Status="New Topic" CreatedOn="2014-10-16T21:24:04.6230633Z" ModifiedOn="2014-10-31T18:22:29.3854262Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Command Execution Bindings" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-31T18:22:29.3854262Z">&lt;innovasys:widget type="Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Tab Item" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;View Class&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tab Item" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;View Base Class&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void Bind() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.Bind();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (this._BindGiveBirth) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.BindCommandExecuted(BindingsElement.GiveBirth, GiveBirthExecuted);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="610cdbf6-7f3d-4106-bc73-b74e55dab5f7" Status="New Topic" CreatedOn="2014-10-17T18:21:02.5020321Z" ModifiedOn="2014-10-26T17:05:09.0068135Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="State Machines With Elements" BuildFlags="">
            <Title />
            <ContentsTitle m="2014-10-17T18:21:52.8360034Z">Creating A State Machine</ContentsTitle>
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-17T18:42:06.4655644Z">&lt;P&gt;State machines can be create both as an external diagram that can be included into other diagrams, or they can be created directly in a element graph.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/AddExternalStateMachine.png"&gt;&lt;/P&gt;
&lt;P&gt;If created externally you can display it simply by navigating to an element that is going to use the statemachine and show the state machine node.&amp;nbsp;( See: &lt;A href="b51260b4-0c4e-4f21-90df-d971db93c767" style="auto-update-caption: true"&gt;Showing and Hiding Nodes&lt;/A&gt;&amp;nbsp;)&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/AddStateMachineLocal.png"&gt;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks>
              <TopicLink Id="bcafd49a-9d74-4101-8d40-db8b0ac3e425" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="d4b39ca7-948e-4d28-81bd-8386fe0a2f60" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
              <TopicLink Id="d97eedfc-7cdf-4fa4-a54e-466196499b2c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f01c64e6-c5f3-4ecc-a53b-8c753c8a299c" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
            </TopicLinks>
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="d4b39ca7-948e-4d28-81bd-8386fe0a2f60" Status="New Topic" CreatedOn="2014-10-17T18:22:03.7514731Z" ModifiedOn="2014-10-17T18:42:20.909992Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Using A State Machine" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-17T18:42:20.909992Z">&lt;P&gt;Once you have created a statemachine, it needs to be associated with an element.&amp;nbsp; This will give the state machine a context to work in.&amp;nbsp; For instance examine the following image:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/WavesElementStateMachine.png"&gt;&lt;/P&gt;
&lt;P&gt;In the above image the "FPSShooterGamePlayer" is a property on the "WavesFPSGame" element. This means for every instance of "WavesFPSGame" there will be one instance of FPSShooterGamePlayer.&amp;nbsp; When it is disposed so will the state machine.&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="c445d3d0-a7cc-4c29-9bcc-85f87c5c090c" Status="New Topic" CreatedOn="2014-10-17T18:22:30.0832877Z" ModifiedOn="2014-10-26T17:05:48.9755413Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="State Machines in Controllers" BuildFlags="">
            <Title />
            <ContentsTitle m="2014-10-26T17:05:34.7900549Z">State Machines in Controllers</ContentsTitle>
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-17T19:34:51.9988069Z">&lt;P&gt;Controllers are essentially a group of command implementations that modify's the data of an element.&amp;nbsp; But they are also a great place to initialize different things on a view-model that you want to be unique to the controller rather than the view-model itself.&amp;nbsp; State Machines are a great example of this.&amp;nbsp; Computed properties, and commands are a great way to create state machines, but these, by default,&amp;nbsp;haven't any sense of time.&amp;nbsp; Traditionally this would require a view to execute a command at the right time.&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;It's still a great idea to add commands even if that command might be invoked automatically from the controller.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;With the power of UniRX and it's Timer and Interval methods we can create time based state machines that are generic and can work in other environments as well.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;For Example lets look at one of the examples with uFrame.&amp;nbsp; In the controller we override the generated base method Initialize{ElementName}({ElementName}ViewModel vm)&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;InitializeFPSWeapon&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void InitializeFPSWeapon(FPSWeaponViewModel fpsWeapon)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fpsWeapon.StateProperty&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .Where(p =&amp;gt; p is Reloading) // Subscribe only to when the state is changed to reloading&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .Subscribe(r =&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // When we've entered the reloading state create a timer that moves it to finished reloading&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Observable.Timer(TimeSpan.FromSeconds(fpsWeapon.ReloadTime))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .Subscribe(l =&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fpsWeapon.Ammo = fpsWeapon.RoundSize;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ExecuteCommand(fpsWeapon.FinishedReloading);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }).DisposeWith(fpsWeapon); // Make sure this is disposed with the weapon&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In the above code we are subscribing to any state changes, when the state changes to reloading we create a timer.&amp;nbsp; When the timer completes we reset the ammo, and execute the command "FinishedReloading".&amp;nbsp; This comletely elimnates any need for a view to invoke a command, this is more of an internal operation and doesn't have much to do with how something is displayed.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks>
              <TopicLink Id="42c8f08d-c943-4fc0-b47b-2218705f14a7" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="809f74db-f53f-45c4-9391-f829eaa32536" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
              <TopicLink Id="314d291b-2b13-438c-92ce-590cf3177ef3" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="d4b39ca7-948e-4d28-81bd-8386fe0a2f60" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
              <TopicLink Id="fbe22bc8-2b58-47a7-a037-fa974f66f62d" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f01c64e6-c5f3-4ecc-a53b-8c753c8a299c" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
            </TopicLinks>
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="809f74db-f53f-45c4-9391-f829eaa32536" Status="New Topic" CreatedOn="2014-10-17T18:22:47.5379507Z" ModifiedOn="2014-10-17T18:23:21.0318415Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="State Machine's on Views" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-17T18:22:47.5379507Z">&lt;p&gt; &lt;/p&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks>
              <TopicLink Id="b91b1e4b-6824-47f7-aa6e-5e4ea6db1d28" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="abc30a82-9c31-48ef-8229-3d71b222f156" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
            </TopicLinks>
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="3278a347-f0b1-480b-88a9-9e6028184857" Status="New Topic" CreatedOn="2014-10-17T19:12:36.5439014Z" ModifiedOn="2014-10-17T19:41:00.9433955Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Computed Property Triggers" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-17T19:41:00.9433955Z">&lt;P&gt;Computed Properties can be used to trigger transitions on a statemachine, their implementation is somewhat unique, the computed must be a boolean value for it to be a state machine trigger.&lt;/P&gt;
&lt;P&gt;When a computed property trigger is recalculated, if it returns true, the trigger will be invoked. The computed will also be recalculated automatically when a state is entered.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/WavesElementStateMachine_markedup.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="c5917965-7b52-4578-930d-0561db7d148f" Status="New Topic" CreatedOn="2014-10-19T20:02:13.3088176Z" ModifiedOn="2014-10-31T16:14:59.1108056Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="uFrame Of Mind" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-31T16:14:59.1108056Z">&lt;SPAN style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: capitalize; COLOR: rgb(0,0,0); TEXT-ALIGN: left; FONT: bold 1.28em/1.4em "Open Sans", sans-serif; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;The UFrame Of Mind.&lt;/SPAN&gt; 
&lt;P style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/21px "Open Sans", Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;uFrame, specifically created for the Unity game engine, uses a pattern-based framework called MVVM (Model View ViewModel). It is designed to provide developers with the visual editing tools, code structure and knowledge to develop games faster and more efficiently. This “frame of mind” for creating games is different than what most Unity developers are used to, but once understood the possibilities of where an idea can go are limitless. So, let’s jump right into the “uFrame of mind”!&amp;nbsp;&lt;BR&gt;&lt;/P&gt;
&lt;H3 style='WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: rgb(204,204,204) 1px solid; TEXT-TRANSFORM: capitalize; COLOR: rgb(0,0,0); PADDING-BOTTOM: 5px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: bold 1.28em/1.4em "Open Sans", sans-serif; PADDING-LEFT: 0px; MARGIN: 30px 0px 10px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;Making Things Simple.&lt;/H3&gt;
&lt;P style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/21px "Open Sans", Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;Far too often game development begins with throwing a bunch of random game objects and components together and then retrofitting code in hopes of creating a masterpiece. Teams fail to focus on the basic concepts first and are left with trying to assemble pieces of a project that don’t quite fit together. Doesn’t make much sense does it?&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;BR&gt;&lt;/P&gt;
&lt;P style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/21px "Open Sans", Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;uFrame simplifies things by separating out the essential and peripheral parts of the Unity’s component model. It eliminates the visual noise (user-interface, HUD, transformers, positions, rotations, working with geometry, shaders, pathfinders, mouse events etc.) that can overwhelm and discourage many developers, and allows them to initially focus on the core logic.&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;BR&gt;&lt;/P&gt;
&lt;P style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/21px "Open Sans", Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;uFrame does this with the use of&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Elements&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;. Each element in a game has different parts, which consists of the ViewModel, Controller, View and possibly the View Component. A&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;ViewModel&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;serves as interface between the visual entities and logic of the game. These entities include properties (Score, Ammo, etc.), collections (Players, Environments etc.), and commands (PlayerHit, Upgrade etc.). A&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Controller&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;works with a ViewModel to initialize and modify data when a command is invoked and/or interaction occurs between an event and the user.&amp;nbsp;&lt;BR&gt;&lt;/P&gt;
&lt;H3 style='WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: rgb(204,204,204) 1px solid; TEXT-TRANSFORM: capitalize; COLOR: rgb(0,0,0); PADDING-BOTTOM: 5px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: bold 1.28em/1.4em "Open Sans", sans-serif; PADDING-LEFT: 0px; MARGIN: 30px 0px 10px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;Always Consider Portability.&amp;nbsp;&lt;/H3&gt;
&lt;P style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/21px "Open Sans", Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;In uFrame, both the Controller and the ViewModel are "portable" parts of a game. This means taking them outside of Unity and putting them into a separate environment, such as a terminal application or web server, will never be an issue. In fact, this is essential to providing proper support for the extended features of uFrame and is enforced by the Element Designer (which limit the types that are available). This should always be taken into consideration when developing or extending Controllers or ViewModels.&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;BR&gt;&lt;/P&gt;
&lt;P style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/21px "Open Sans", Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;&lt;STRONG&gt;Note:&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;Even if a game doesn't need portability it is still good to think in these terms. uFrame is built around this concept, which allows each piece to fit together more naturally.&amp;nbsp;&lt;BR&gt;&lt;/P&gt;
&lt;H3 style='WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: rgb(204,204,204) 1px solid; TEXT-TRANSFORM: capitalize; COLOR: rgb(0,0,0); PADDING-BOTTOM: 5px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: bold 1.28em/1.4em "Open Sans", sans-serif; PADDING-LEFT: 0px; MARGIN: 30px 0px 10px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;Making The Noise Sing.&lt;/H3&gt;
&lt;P style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/21px "Open Sans", Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;The other two parts of the element, the View and the View Component, connect the game logic with the visual noise. They are the key components that connect Unity to the Controllers and ViewModels, bringing the game to life.&amp;nbsp;A&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;View Component&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;can read and modify the real-time data of a ViewModel, but isn’t necessary for every element. It is only meant to provide an extra level of extendibility when needed. A&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;View&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/STRONG&gt;(which is technically a View Component, but with a larger role) binds to an element’s data so that it’s notified when something is changed. When these changes occur, it directs the View Component to execute the appropriate action. Views also execute the commands of events and interactions that occur in the scene (e.g. Collision, MouseClick, Hover).&amp;nbsp;&lt;BR&gt;&lt;/P&gt;
&lt;H3 style='WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: rgb(204,204,204) 1px solid; TEXT-TRANSFORM: capitalize; COLOR: rgb(0,0,0); PADDING-BOTTOM: 5px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: bold 1.28em/1.4em "Open Sans", sans-serif; PADDING-LEFT: 0px; MARGIN: 30px 0px 10px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;Naming Things.&lt;/H3&gt;
&lt;P style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/21px "Open Sans", Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;When creating elements, particularly element commands, it’s important to think about how things are being named. For instance, if a player can pick up an item when a game object collides with it and when the player clicks on it, then a developer would want to create a label such as “PickUpItem,” that describes both commands. This would more broadly explain its function and allow for items to be collected in a different way, if the developer so chooses.&amp;nbsp;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="e1dbc736-3e4c-4f4e-81ce-5a33c68ed2e4" Status="New Topic" CreatedOn="2014-10-19T20:07:01.2036612Z" ModifiedOn="2014-10-19T20:15:19.3664545Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Executing Commands From Controllers" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-19T20:15:19.3664545Z">&lt;P&gt;One thing to note about commands on controllers, calling a command method directly will not invoke any subscribers.&amp;nbsp; Sometimes this may be intended behaviour, in order to make sure a command is invoked properly simply use one of the "ExecuteCommand" overloads available to all controllers. To demonstrate the difference examing the following:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Executing Commands&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public void Hit(EnemyViewModel enemy, DamagerViewModel damager) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Won't notify subscribers&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; DamagerController.PowerUp(damager);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Will notify subscribers&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ExecuteCommand(damager.PowerUp);&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="7b5d5abb-f449-4e38-86e8-8b86c8edb835" Status="New Topic" CreatedOn="2014-10-19T20:29:23.2061069Z" ModifiedOn="2014-10-19T20:32:54.995762Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Extending Complex ViewModel's" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-19T20:32:54.995762Z">&lt;P&gt;In some cases View-Models will have more complex rules tied to them.&amp;nbsp; In some testing scenarios, you'll want the view-model to not be reliant on controllers for certain built-in functionality.&amp;nbsp;&amp;nbsp; Computed properties are a great example of this, but if you're view-model requires something more you can override the Bind method of the view-model.&amp;nbsp; This will allow you to initialize the view-model further with the confidence that all of the properties, computeds and other built-in initialization has been performed.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="abacd104-2550-4446-b17a-b2d1d098e991" Status="New Topic" CreatedOn="2014-10-28T17:48:09.7548141Z" ModifiedOn="2014-10-28T17:48:20.9467455Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="uFrame Startu" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-28T17:48:09.7548141Z">&lt;p&gt; &lt;/p&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="0a37bccf-fa89-4734-9440-24f8a22d383d" Status="New Topic" CreatedOn="2014-11-02T04:28:57.6364934Z" ModifiedOn="2014-11-02T04:30:55.0778928Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Implementing Commands" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-11-02T04:30:55.0778928Z">&lt;P style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/21px "Open Sans", Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px'&gt;Every command that is outlined on an element, in the Element Designer, will have a corresponding method in a controller (assuming the diagram is saved). &amp;nbsp;&lt;BR&gt;&lt;BR _moz_dirty="true"&gt;Here are the list of commands for the "FPSWeapon" Element, as defined in the FPSShooter example included with uFrame.&lt;BR style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-ALIGN: left; FONT: 14px/21px "Open Sans", Arial, sans-serif; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px'&gt;&lt;STRONG style='FONT-SIZE: 14px; FONT-FAMILY: "Open Sans", Arial, sans-serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; TEXT-ALIGN: left; LETTER-SPACING: normal; LINE-HEIGHT: 21px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px'&gt;Note:&lt;/STRONG&gt;&lt;SPAN style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); TEXT-ALIGN: left; FONT: 14px/21px "Open Sans", Arial, sans-serif; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px'&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;To access an element's controller, right-click on it and select&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;EM style='FONT-SIZE: 14px; FONT-FAMILY: "Open Sans", Arial, sans-serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); TEXT-ALIGN: left; LETTER-SPACING: normal; LINE-HEIGHT: 21px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px'&gt;"Open Controller File"&lt;/EM&gt;&lt;SPAN style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); TEXT-ALIGN: left; FONT: 14px/21px "Open Sans", Arial, sans-serif; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px'&gt;.&lt;/SPAN&gt;&lt;BR style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-ALIGN: left; FONT: 14px/21px "Open Sans", Arial, sans-serif; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px'&gt;&lt;BR style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-ALIGN: left; FONT: 14px/21px "Open Sans", Arial, sans-serif; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px'&gt;&lt;SPAN style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); TEXT-ALIGN: left; FONT: 14px/21px "Open Sans", Arial, sans-serif; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px'&gt;There are a few things to notice when looking at the code example below:&lt;/SPAN&gt;&lt;/P&gt;
&lt;UL style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/21px "Open Sans", Arial, sans-serif; PADDING-LEFT: 20px; MARGIN: 0px 0px 18px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px'&gt;
&lt;LI style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"&gt;The&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;EM&gt;"FPSWeaponController"&lt;/EM&gt;&amp;nbsp;is derived from&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;EM&gt;"FPSWeaponControllerBase",&amp;nbsp;&lt;/EM&gt;which is generated by the Element Designer.
&lt;LI style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"&gt;All of these methods are overrides, because the base class has implemented an empty "virtual method" for each command.
&lt;LI style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"&gt;The reload method has an IEnumerator result type, because is it is marked as a yield command (indicated by the yellow marker). &amp;nbsp;This can be achieved by right-clicking on a command and checking "Is Yield Command". It is used for simulating a co-routine.
&lt;LI style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"&gt;In each method we are simply processing rules by reading and modifying the FPSWeaponViewModel's instance data .&lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;FPSWeaponController&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;public class FPSWeaponController : FPSWeaponControllerBase&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void NextZoom(FPSWeaponViewModel fpsWeapon)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (fpsWeapon.MaxZooms - 1 == fpsWeapon.ZoomIndex)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fpsWeapon.ZoomIndex = 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; else&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fpsWeapon.ZoomIndex++;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void BeginFire(FPSWeaponViewModel weapon)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; weapon.State = FPSWeaponState.Firing;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (weapon.Ammo &amp;lt; 1)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; weapon.State = FPSWeaponState.Empty;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void EndFire(FPSWeaponViewModel weapon)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; weapon.State = FPSWeaponState.Active;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (weapon.Ammo &amp;lt; 1)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; weapon.State = FPSWeaponState.Empty;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override IEnumerator Reload(FPSWeaponViewModel fpsWeapon)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fpsWeapon.State = FPSWeaponState.Reloading;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yield return new WaitForSeconds(fpsWeapon.ReloadTime);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fpsWeapon.Ammo = fpsWeapon.RoundSize;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fpsWeapon.State = FPSWeaponState.Active;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="ac65c71e-b29d-4a54-89d0-4762c5fcba66" Status="New Topic" CreatedOn="2014-11-02T04:33:46.8264589Z" ModifiedOn="2014-11-02T04:45:24.8501906Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Instantiating View Models" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-11-02T04:45:24.8491896Z">&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="e95b8198-24d7-43f4-890f-f655bb845961" Status="New Topic" CreatedOn="2014-11-02T04:46:34.5617615Z" ModifiedOn="2014-11-02T04:49:59.0897037Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Initialize{ElementName} Method" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-11-02T04:49:59.0897037Z">&lt;P style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/21px "Open Sans", Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px'&gt;The initialize Method in a controller can be used to initialize an Element's ViewModel (similar to how it might be initialized in the inspector of a View). It is a great place to subscribe to "Real Time" property changes or track a list of ViewModel Instances, which act similar to a Manager.&lt;BR _moz_dirty="true"&gt;&lt;/P&gt;
&lt;P style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/21px "Open Sans", Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px'&gt;Every element controller has an Initialize{ElementName} method that can be overridden from the generated base class. For example:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;InitializeMethod&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void InitializeFPSWeapon(FPSWeaponViewModel fpsWeapon)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fpsWeapon.StateProperty&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .Where(p =&amp;gt; p is Reloading) // Subscribe only to when the state is changed to reloading&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .Subscribe(r =&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // When we've entered the reloading state create&amp;nbsp;a timer that executes a&amp;nbsp;command invoking a transition.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Observable.Timer(TimeSpan.FromSeconds(fpsWeapon.ReloadTime))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .Subscribe(l =&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fpsWeapon.Ammo = fpsWeapon.RoundSize;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ExecuteCommand(fpsWeapon.FinishedReloading);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }).DisposeWith(fpsWeapon); // Make sure this is disposed with the weapon&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
        </Topics>
      </TopicCategory>
      <TopicCategory Id="CONTENTSNIPPETS" AutoIndex="false">
        <Caption m="2014-10-13T18:12:28.499194Z">Content Snippets</Caption>
        <ChildTopicCategories />
        <Topics>
          <Topic Id="68e5ef59-c521-4583-b817-6401fc77e30a" Status="New Topic" CreatedOn="2014-10-26T16:59:13.8733297Z" ModifiedOn="2014-10-29T20:10:04.6861585Z" PageTypeName="for include.html" AutoIndex="true" HelpContextIds="" Name="ViewBindingsTutorial" BuildFlags="{4AAE0FD4-7313-4FEE-A25F-0785B885F736},{46CEF21D-3301-4517-A875-A0906828390E}">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-29T20:10:04.6861585Z">&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;pwZkQ0KDJHc&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="77179974-f5b3-4f1d-bd6a-d7ee12b89715" Status="New Topic" CreatedOn="2014-10-26T16:59:30.9587547Z" ModifiedOn="2014-10-29T20:10:43.8704088Z" PageTypeName="for include.html" AutoIndex="true" HelpContextIds="" Name="ComputedPropertiesTutorial" BuildFlags="{4AAE0FD4-7313-4FEE-A25F-0785B885F736},{46CEF21D-3301-4517-A875-A0906828390E}">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-29T20:10:43.8704088Z">&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;09gPdNbidDs&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="ac02c824-522e-4b62-a062-98e1cf116192" Status="New Topic" CreatedOn="2014-10-26T16:59:44.962119Z" ModifiedOn="2014-10-29T20:10:43.8774135Z" PageTypeName="for include.html" AutoIndex="true" HelpContextIds="" Name="InheritanceTutorial" BuildFlags="{4AAE0FD4-7313-4FEE-A25F-0785B885F736},{46CEF21D-3301-4517-A875-A0906828390E}">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-29T20:10:43.8774135Z">&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;gDtFChc5SQs&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="9c6b6b45-9f02-4815-af20-7c125862d330" Status="New Topic" CreatedOn="2014-10-26T17:00:03.8847729Z" ModifiedOn="2014-10-29T20:11:22.7338063Z" PageTypeName="for include.html" AutoIndex="true" HelpContextIds="" Name="1-5OverviewTutorial" BuildFlags="{4AAE0FD4-7313-4FEE-A25F-0785B885F736},{46CEF21D-3301-4517-A875-A0906828390E}">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-29T20:11:22.7338063Z">&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;KiTe5nyNXfQ&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="6cc6108f-c86f-4693-adcd-82f6ca177009" Status="New Topic" CreatedOn="2014-10-26T17:00:19.4381751Z" ModifiedOn="2014-10-29T20:11:22.740811Z" PageTypeName="for include.html" AutoIndex="true" HelpContextIds="" Name="ScenePropertiesTutorial" BuildFlags="{4AAE0FD4-7313-4FEE-A25F-0785B885F736},{46CEF21D-3301-4517-A875-A0906828390E}">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-29T20:11:22.740811Z">&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;shlvL6Fhq8o&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="c3d6baf8-2a3f-4530-b278-a693a7d95485" Status="New Topic" CreatedOn="2014-10-26T17:00:31.3191194Z" ModifiedOn="2014-10-29T20:11:50.3120039Z" PageTypeName="for include.html" AutoIndex="true" HelpContextIds="" Name="ReactiveStateMachinesTutorial" BuildFlags="{4AAE0FD4-7313-4FEE-A25F-0785B885F736},{46CEF21D-3301-4517-A875-A0906828390E}">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-29T20:11:50.3120039Z">&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;mVGyW0BKSTM&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="94d9d41a-43c1-4d1f-ab40-e4914ad1663a" Status="New Topic" CreatedOn="2014-10-26T17:00:43.035954Z" ModifiedOn="2014-10-29T20:11:50.3180079Z" PageTypeName="for include.html" AutoIndex="true" HelpContextIds="" Name="SubsystemsTutorial" BuildFlags="{4AAE0FD4-7313-4FEE-A25F-0785B885F736},{46CEF21D-3301-4517-A875-A0906828390E}">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-29T20:11:50.3180079Z">&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;L9JIVFR-AFc&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="9bb84e0c-15b6-497f-aeb0-3052e917c2c5" Status="New Topic" CreatedOn="2014-10-26T17:00:54.4926156Z" ModifiedOn="2014-10-29T20:12:04.1758082Z" PageTypeName="for include.html" AutoIndex="true" HelpContextIds="" Name="TargetingSystemTutorial" BuildFlags="{4AAE0FD4-7313-4FEE-A25F-0785B885F736},{46CEF21D-3301-4517-A875-A0906828390E}">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-29T20:12:04.1758082Z">&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;PDs3PMl_Zdw&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="01c935c5-717a-4d66-b8e2-1064b7ac150d" Status="New Topic" CreatedOn="2014-10-26T17:01:04.8525431Z" ModifiedOn="2014-10-29T20:12:15.0196015Z" PageTypeName="for include.html" AutoIndex="true" HelpContextIds="" Name="ViewModelsTutorial" BuildFlags="{4AAE0FD4-7313-4FEE-A25F-0785B885F736},{46CEF21D-3301-4517-A875-A0906828390E}">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-29T20:12:15.0196015Z">&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;ZoO_B517QMc&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="eaced210-4f32-4f73-8455-404cf8a36564" Status="New Topic" CreatedOn="2014-10-26T17:07:24.2432485Z" ModifiedOn="2014-10-29T20:12:32.3391321Z" PageTypeName="for include.html" AutoIndex="true" HelpContextIds="" Name="ControllersTutorial" BuildFlags="{4AAE0FD4-7313-4FEE-A25F-0785B885F736},{46CEF21D-3301-4517-A875-A0906828390E}">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-29T20:12:32.3391321Z">&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;4Xs_u5lJiyg&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="31270023-32c3-4b70-aa3e-7a1e2cb49911" Status="New Topic" CreatedOn="2014-10-26T18:08:57.9102703Z" ModifiedOn="2014-10-29T20:12:53.8062395Z" PageTypeName="for include.html" AutoIndex="true" HelpContextIds="" Name="SceneManagersTutorial" BuildFlags="{4AAE0FD4-7313-4FEE-A25F-0785B885F736},{46CEF21D-3301-4517-A875-A0906828390E}">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-29T20:12:53.8062395Z">&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;5jcM4isMZmc&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="35e7df17-cfe4-4679-81e2-22c8c82ce925" Status="New Topic" CreatedOn="2014-10-28T16:47:34.9625301Z" ModifiedOn="2014-10-29T20:13:06.3773158Z" PageTypeName="for include.html" AutoIndex="true" HelpContextIds="" Name="ViewsTutorial" BuildFlags="{4AAE0FD4-7313-4FEE-A25F-0785B885F736},{46CEF21D-3301-4517-A875-A0906828390E}">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-29T20:13:06.3773158Z">&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;P4BX0SI9wBk&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="c2f0c02d-27f8-4461-b479-55fa2f816d10" Status="New Topic" CreatedOn="2014-10-28T16:52:38.6300623Z" ModifiedOn="2014-10-28T16:52:38.6310627Z" PageTypeName="for include.html" AutoIndex="true" HelpContextIds="" Name="New Content Snippet 8" BuildFlags="{4AAE0FD4-7313-4FEE-A25F-0785B885F736},{46CEF21D-3301-4517-A875-A0906828390E}">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-28T16:52:38.6300623Z">&lt;p&gt; &lt;/p&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
        </Topics>
      </TopicCategory>
      <TopicCategory Id="9aa4d754-bfad-4554-b08f-115f86f6c989" AutoIndex="true">
        <Caption m="2014-10-13T18:24:47.4251822Z">Project</Caption>
        <ChildTopicCategories />
        <Topics />
      </TopicCategory>
      <TopicCategory Id="192b8021-82bd-4c01-8549-c38339429ec8" AutoIndex="false">
        <Caption m="2015-01-30T09:20:23.2983752Z">Unused Leftover</Caption>
        <ChildTopicCategories />
        <Topics>
          <Topic Id="7c6f1cc0-2fe3-4aaa-af9a-b630b05a6941" Status="New Topic" CreatedOn="2014-10-30T15:59:52.9954679Z" ModifiedOn="2015-01-30T04:10:58.6694391Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Dependency Injection" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2015-01-30T04:10:58.6694391Z">&lt;P&gt;&lt;SPAN style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); TEXT-ALIGN: left; FONT: 13px/19px Arial, Verdana, sans-serif; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px"&gt;Dependency injection is a core concept in uFrame. &amp;nbsp;It decouples the various parts of a project from being solely "dependent" on others. Classes are not directly instantiated but "Resolved" by the dependency container. &amp;nbsp;This allows a class to only rely on a simple interface or abstract class rather than any concrete implementation it might need.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); TEXT-ALIGN: left; FONT: 13px/19px Arial, Verdana, sans-serif; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px"&gt;&lt;SPAN style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); TEXT-ALIGN: left; FONT: 13px/19px Arial, Verdana, sans-serif; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px"&gt;In uFrame there is a custom class called "uFrameContainer" that is the dependency container. &amp;nbsp;This class stores type mappings and even instances for a type.&lt;/SPAN&gt;&lt;BR style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-ALIGN: left; FONT: 13px/19px Arial, Verdana, sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px"&gt;&lt;BR style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-ALIGN: left; FONT: 13px/19px Arial, Verdana, sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px"&gt;&lt;SPAN style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); TEXT-ALIGN: left; FONT: 13px/19px Arial, Verdana, sans-serif; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px"&gt;When a game is loaded the first thing to happen is the creation of this dependency container. &amp;nbsp;This is available statically from&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;uFrame Dependency Container Access&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;GameManager.Container&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;SPAN style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); TEXT-ALIGN: left; FONT: 13px/19px Arial, Verdana, sans-serif; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px"&gt;&lt;SPAN style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); TEXT-ALIGN: left; FONT: 13px/19px Arial, Verdana, sans-serif; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px"&gt;&lt;SPAN style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); TEXT-ALIGN: left; FONT: 13px/19px Arial, Verdana, sans-serif; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px"&gt;Within SceneManagers there is a wrapper Property called "Container" for cleaner encapsulated access.&amp;nbsp; A scene manager is the first thing loaded by the GameManager, and it's setup method is the first thing to be invoked.&amp;nbsp; When it is invoked it has the responsibility have registering and dependencies that will be used in the context of the scene that the scene manager belongs to.&amp;nbsp; By default uFrame generates this method for you based on your subsystems and their Registered Instances.&amp;nbsp; However understanding how it works can greatly decouple your application.&amp;nbsp; This also allows you to manually work within uFrames core to access some of its powerful features.&amp;nbsp; To learn more visit the topics the below list.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks>
              <TopicLink Id="dab7d72e-cdfe-4264-981d-a4a592cbcd2d" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="611ba270-3498-4b75-a555-f7a16574dc04" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
              <TopicLink Id="93310949-08bc-4b64-9755-8311879f5233" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="28181020-f6c3-4772-97a7-fe1761a650ad" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
              <TopicLink Id="13de8cbf-f787-4b2e-a379-5f97b593889c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="d0365577-9a6f-43d8-ab64-ed30062ba4a8" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
            </TopicLinks>
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="fff0c043-05aa-43c7-b574-016c61c1d4f6" Status="New Topic" CreatedOn="2014-10-16T21:08:00.6490262Z" ModifiedOn="2015-02-05T10:51:23.5671676Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Generated Scene Managers" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2015-02-05T10:51:23.5671676Z">&lt;P&gt;When a SceneManager is generated it will automatically create properties for all registered instances and element controllers defined in connected subsystems.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;SceneManagerGeneratedProperties&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [Inject("FPSMenu")]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public virtual FPSMenuViewModel FPSMenu {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; get {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if ((this._FPSMenu == null)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this._FPSMenu = SetupViewModel&amp;lt;FPSMenuViewModel&amp;gt;(FPSMenuController, "FPSMenu");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return this._FPSMenu;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; set {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _FPSMenu = value;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [Inject("LocalPlayer")]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public virtual FPSPlayerViewModel LocalPlayer {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; get {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if ((this._LocalPlayer == null)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this._LocalPlayer = SetupViewModel&amp;lt;FPSPlayerViewModel&amp;gt;(FPSPlayerController, "LocalPlayer");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return this._LocalPlayer;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; set {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _LocalPlayer = value;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [Inject("FPSGame")]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public virtual FPSGameViewModel FPSGame {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; get {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if ((this._FPSGame == null)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this._FPSGame = SetupViewModel&amp;lt;FPSGameViewModel&amp;gt;(FPSGameController, "FPSGame");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return this._FPSGame;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; set {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _FPSGame = value;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [Inject()]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public virtual FPSMenuController FPSMenuController {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; get {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if ((this._FPSMenuController == null)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this._FPSMenuController = new FPSMenuController() { Container = Container };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return this._FPSMenuController;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; set {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _FPSMenuController = value;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [Inject()]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public virtual FPSDamageableController FPSDamageableController {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; get {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if ((this._FPSDamageableController == null)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this._FPSDamageableController = new FPSDamageableController() { Container = Container };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return this._FPSDamageableController;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; set {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _FPSDamageableController = value;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [Inject()]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public virtual FPSEnemyController FPSEnemyController {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; get {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if ((this._FPSEnemyController == null)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this._FPSEnemyController = new FPSEnemyController() { Container = Container };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return this._FPSEnemyController;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; set {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _FPSEnemyController = value;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [Inject()]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public virtual FPSGameController FPSGameController {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; get {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if ((this._FPSGameController == null)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this._FPSGameController = new FPSGameController() { Container = Container };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return this._FPSGameController;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; set {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _FPSGameController = value;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [Inject()]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public virtual FPSPlayerController FPSPlayerController {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; get {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if ((this._FPSPlayerController == null)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this._FPSPlayerController = new FPSPlayerController() { Container = Container };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return this._FPSPlayerController;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; set {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _FPSPlayerController = value;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [Inject()]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public virtual FPSWeaponController FPSWeaponController {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; get {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if ((this._FPSWeaponController == null)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this._FPSWeaponController = new FPSWeaponController() { Container = Container };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return this._FPSWeaponController;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; set {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _FPSWeaponController = value;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
        </Topics>
      </TopicCategory>
      <TopicCategory Id="21cbb0fb-46c4-47d5-bce8-c4fab87a70c7" AutoIndex="false">
        <Caption m="2014-10-24T17:22:49.9643772Z">Video Tutorials</Caption>
        <ChildTopicCategories />
        <Topics>
          <Topic Id="e8c51d6a-5c73-463c-993e-743967b92141" Status="New Topic" CreatedOn="2014-10-26T16:49:46.0437322Z" ModifiedOn="2014-10-26T16:50:12.6034932Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="View Bindings Tutorial" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-26T16:50:12.6034932Z">&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;BM6Tk-LP5aA&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="cfb007ad-c46a-4db4-a5b9-3d863d67be01" Status="New Topic" CreatedOn="2014-10-26T16:50:36.7266251Z" ModifiedOn="2014-10-26T16:50:59.9841778Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Computed Properties Tutorial" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-26T16:50:59.9841778Z">&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;mkyQF2TS5Jg&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="981f89d2-5b0d-4ceb-baff-5707b805ffe3" Status="New Topic" CreatedOn="2014-10-26T16:51:03.0362188Z" ModifiedOn="2014-10-26T16:52:53.3559916Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Inheritance Tutorial" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-26T16:51:34.328145Z">&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;sUFKP9xCIq8&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="258a43a6-826c-4f5e-8575-c2f96a1b5900" Status="New Topic" CreatedOn="2014-10-26T16:51:39.1603753Z" ModifiedOn="2014-10-26T16:52:07.9676393Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="uFrame 1.5 Overview" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-26T16:52:07.9676393Z">&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;KJLOjIlTkNo&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="31e4332e-ad04-444a-a94d-03c018e4cccd" Status="New Topic" CreatedOn="2014-10-26T16:52:27.5427298Z" ModifiedOn="2014-10-26T16:53:38.6652908Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Scene Properties Tutorial" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-26T16:53:38.6652908Z">&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;QVEukPmN3pU&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="f01c64e6-c5f3-4ecc-a53b-8c753c8a299c" Status="New Topic" CreatedOn="2014-10-26T16:53:12.6919219Z" ModifiedOn="2014-10-26T16:53:38.6742964Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Reactive State Machines Tutorial" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-26T16:53:38.6742964Z">&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;QE_TYbnWs4I&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="91afe810-6a1b-40cf-ad84-1e54797bdb67" Status="New Topic" CreatedOn="2014-10-26T16:53:53.5102175Z" ModifiedOn="2014-10-26T16:54:23.7064102Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Subsystems Tutorial" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-26T16:54:23.7064102Z">&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;RdcKynXfZyU&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="1acbb409-eed7-49e9-b884-b99016e5ec36" Status="New Topic" CreatedOn="2014-10-26T16:54:52.4036012Z" ModifiedOn="2014-10-26T16:55:18.1618259Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="View Components - Targeting System Tutorial" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-26T16:55:18.1618259Z">&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;Xh9x9EoZb7E&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="abc5a31a-ca02-487d-8809-187acdc81fe8" Status="New Topic" CreatedOn="2014-10-26T16:55:59.0121432Z" ModifiedOn="2014-10-26T16:56:13.7209793Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="View Models Tutorial" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-26T16:56:13.7209793Z">&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;pBfaELnve9M&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="04c14482-98e8-40bf-97e6-7409cde33af1" Status="New Topic" CreatedOn="2014-10-26T17:08:10.2440101Z" ModifiedOn="2014-10-26T17:08:45.5546226Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="uFrame 1.5 Overview Video" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-26T17:08:45.5546226Z">&lt;innovasys:widget type="Include Topic" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="source"&gt;9c6b6b45-9f02-4815-af20-7c125862d330&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="549bf522-56d1-49f5-8390-55d7e756a53e" Status="New Topic" CreatedOn="2014-10-26T18:09:18.5540748Z" ModifiedOn="2014-10-26T18:09:30.6791827Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Scene Managers Tutorial" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-26T18:09:30.6791827Z">&lt;innovasys:widget type="Include Topic" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="source"&gt;31270023-32c3-4b70-aa3e-7a1e2cb49911&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="583badfd-f0f4-4b77-bd3c-d400e36ca4c5" Status="New Topic" CreatedOn="2014-10-28T16:54:57.6587116Z" ModifiedOn="2014-11-01T15:19:28.1904872Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="What's New In 1.5" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-11-01T15:19:28.1904872Z">&lt;P&gt;&lt;STRONG&gt;Overview:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;uFrame 1.5 is out. Even though is a minor version step, there are a lot of new exciting features,&lt;BR&gt;changes and bugfixes. This version addresses almost all of the issues&amp;nbsp;in 1.4. Let's see what's new:&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Editor and Project:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;1.5 brings a completely new theme, with new cool UI features that make editor more responsive.&lt;BR&gt;Not only does&amp;nbsp;it looks more professional, but the usability is greatly improved.&lt;/P&gt;
&lt;P&gt;Thanks to the new project system, you can now separate your project into as many graphs as you want, keeping it&lt;BR&gt;all under control. New workflow features, project level namespaces, and even code generation settings have arrived!&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Framework:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp; &lt;STRONG&gt;RX&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; In 1.5 you will be able to unleash the power of Reactive Extensions!&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; UniRX implementation of RX is now shipped with uFrame. Special thanks to Neuecc for this great addition to Unity.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Almost everything now is observable: viewmodels, properties, commands, collections and more!&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Reactive extension methods are integrated seamlessly into your code and definitely will save you&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; incredible amount of time.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Bindings have been converted to the RX model.&lt;/P&gt;
&lt;P&gt;&amp;nbsp; &lt;STRONG&gt;Computed Properties:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1.5 introduces&amp;nbsp;computed properties. They are simply properties which depend on other properties.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; A property will subscribe to the dependant properties and recalculate its value when they change.&lt;BR&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp; &lt;STRONG&gt;Reactive State Machines:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1.5 brings a brand new approach to FSM's called Reactive State Machines directly into your diagrams.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; You can rapidly design states, transitions and triggers.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Then you can generate view bindings for the states with a few mouse clicks. Finally&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; you can easily setup any additional logic in the code.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; uFrame State Machines do not use any dirty checks! This can save a lot of performance&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; to let other amazing things run inside your game.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; You can easily debug your states right in the diagram or from the View Inspector.&lt;/P&gt;
&lt;P&gt;&amp;nbsp; &lt;STRONG&gt;Class Nodes:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Now you can easily create regular classes right inside of your diagram.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; You can use those as property types or command argument types&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Generated class automagically implements INotifyPropertyChanged interface, which makes it&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; compatible with other cool assets, libraries and frameworks.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Moreover, you can now use any type which does not inherit from Unity Object as a type for ViewModel property&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; or command argument.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; Registered Instances:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Subsystems now can export instances of ViewModels which will be shared around you application.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; No more problems with transferring small pieces of data around your scenes. It's all done automagically&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; and only requires a few clicks in the diagram editor!&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; It also plays nicely with the inheritance, allowing you to&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; substitute certain instances with different implementations.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Finally, you can register several instances under different names,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; and instantly get access to those in your controllers and scene managers!&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Major Changes:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp; &lt;STRONG&gt;SIE:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; No more single instance elements!&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Since you can now register any ViewModel instance in the subsystem,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; you have ultimate control over your shared instances. That's why Single Instance Elements are removed from uFrame.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; This also brings consistency into controller code, as now every command receives a sender.&lt;/P&gt;
&lt;P&gt;&amp;nbsp; &lt;STRONG&gt;Scene Transitions&lt;/STRONG&gt;:&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Scene transitions have been reworked to become as user-friendly as possible.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; You can still use inspector to define linear transition logic.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; But as soon as it comes to transitions based on command arguments / shared instances data,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; you can easily do it in the code, by just overriding a couple of methods.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; You can set scenes and scene manager settings with any condition you want.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; Scene Persistence:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Save'n'Load functionality was greatly solidified. Now every user has an ability&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; to implement saving and loading without worrying too much about the low-level functionality.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ViewModel saving/loading is already there. But you also have an ability persist some of your view data&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; like transforms, states and so on.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; You can access Read and Write methods in your View and operate over any data you want.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&amp;nbsp; 2-Way-Bindings&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2-Way-Bindings were completely reworked and are now called Scene Properties.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Those little handy things allow you to access specific View information, like positions and distances.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Scene properties rely heavily on Observables. This means you get exceptional control over you performance.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; You define how and when those things are calculated. The rest is automagically done by uFrame.&lt;/P&gt;
&lt;P&gt;&amp;nbsp; 1.5 includes lots of other changes and bug fixes. And even more will come in the future versions. So stay tuned!&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks>
              <TopicLink Id="9907bd95-d2d8-481d-995b-4b624f3c7938" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="437a5b4b-327e-42a3-af18-baed8011c184" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
            </TopicLinks>
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="8aeb927a-0644-41f0-98ff-794cec3b1286" Status="New Topic" CreatedOn="2014-10-29T14:20:05.889211Z" ModifiedOn="2014-10-29T14:20:20.8305887Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Views Tutorial" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-29T14:20:20.8305887Z">&lt;innovasys:widget type="Include Topic" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="source"&gt;35e7df17-cfe4-4679-81e2-22c8c82ce925&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="cc78d8ca-2640-4a6f-9fd4-70ac45c2ae3a" Status="New Topic" CreatedOn="2014-10-29T14:20:36.3835958Z" ModifiedOn="2014-10-29T14:20:51.724984Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Controllers Tutorial" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-29T14:20:51.724984Z">&lt;innovasys:widget type="Include Topic" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="source"&gt;eaced210-4f32-4f73-8455-404cf8a36564&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="766162f3-1c66-4fd9-a52c-8cb75e142e19" Status="New Topic" CreatedOn="2015-02-03T17:41:13.8823276Z" ModifiedOn="2015-02-05T10:51:24.1392003Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Timers, Intervals, and Observable Coroutines" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2015-02-05T10:51:24.1392003Z">&lt;P&gt;When desiring specific functionality that occurs at a specific time or interval of time, UniRx has implemented several convenient schedulers to which you can create and subscribe.&lt;/P&gt;
&lt;HR&gt;

&lt;H2&gt;Timers&lt;/H2&gt;
&lt;P&gt;Timers are used almost like alarm clocks.&amp;nbsp; Basically&amp;nbsp;you set a time in the future when&amp;nbsp;the Timer&amp;nbsp;should finish, and once that time passes,&amp;nbsp;it sends out a single&amp;nbsp;notification to&amp;nbsp;whatever handler you have subscribed to it, and then it disposes itself.&amp;nbsp; Example usage:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example: Observable.Timer&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public void SomeMagicalFunction() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Observable.Timer(TimeSpan.FromSeconds(5)).Subscribe(_ =&amp;gt; Debug.Log("This happens after 5 seconds."));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Observable.Timer(TimeSpan.FromSeconds(10)).Subscribe(_ =&amp;gt; DoSomethingLater());&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;
&lt;P&gt;public void DoSomethingLater() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Debug.Log("This happens after 10 seconds.");&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;HR&gt;

&lt;H2&gt;Intervals&lt;/H2&gt;
&lt;P&gt;Intervals are used when you need something to happen every N seconds, and &lt;EM&gt;do not automatically dispose themselves&lt;/EM&gt;.&amp;nbsp; You must always specify when this observable should be disposed, otherwise it will continue indefinitely.&amp;nbsp; Example usage:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example: Observable.Interval&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Player is standing in&amp;nbsp;fire and taking 10 damage every 1 second&lt;/P&gt;
&lt;P&gt;Observable.Interval(TimeSpan.FromSeconds(1))&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; .Subscribe(_ =&amp;gt; ExecuteCommand(player.TakeDamage, 10))&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; .DisposeWhenChanged(player.IsStandingInFire);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Somewhat contrived example demonstrating both Timer and Interval&lt;/P&gt;
&lt;P&gt;// Deals initial 10 damage, and then further Damage over Time for 4 ticks&lt;/P&gt;
&lt;P&gt;ExecuteCommand(player.TakeDamage, 10);&lt;/P&gt;
&lt;P&gt;var DoTDamage = Observable.Interval(TimeSpan.FromSeconds(1))&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; .Subscribe(_ =&amp;gt; ExecuteCommand(player.TakeDamage, 2));&lt;/P&gt;
&lt;P&gt;Observable.Timer(TimeSpan.FromSeconds(5)).Subscribe(_ =&amp;gt; DoTDamage.Dispose());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Time-based functionality without coroutines in Controller to trigger waves&lt;/P&gt;
&lt;P&gt;if(state is Wave) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Wait for allotted amount of time&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Observable.Interval(TimeSpan.FromSeconds(wavesFPSGame.SpawnWaitSeconds))&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .Where(_ =&amp;gt; wavesFPSGame.WavesState is Wave)&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .Take(wavesFPSGame.KillsToNextWave)&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .Subscribe(_ =&amp;gt; SpawnEnemy());&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;HR&gt;

&lt;H2&gt;Observable Coroutines&lt;/H2&gt;
&lt;P&gt;Normally with Unity, to do any kind of asynchronous logic that happens outside of the game's&amp;nbsp;Update loop, you would typically use IEnumerators and Coroutines.&amp;nbsp; Unity Coroutines can be unwieldy to use and have&amp;nbsp;several problems however, chiefly the inability to use return values and lack of error handling.&amp;nbsp; Let's start with a short snippet from the RTS example:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;GameCoreController.cs&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// A command to trigger start of the game&lt;/P&gt;
&lt;P&gt;public override void BeginGame(GameCoreViewModel gameCore) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; gameCore.State = CoreGameState.GeneratingMap;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Turn a GenerateMap&amp;nbsp;IEnumerator, located in the CoreMapController, into an Observable&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Observable.FromCoroutine(() =&amp;gt; CoreMapController.GenerateMap(gameCore.Map)&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .Subscribe(_ =&amp;gt; /* unused OnNext */ }, DoneGenerating);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // There are several signatures for FromCoroutine, here we're using a subscription that gives&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&amp;nbsp;&amp;nbsp; Subscribe(OnNext, OnComplete)&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;private void DoneGenerating() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Observable.FromCoroutine(InitializePlayers)&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;.Subscribe(_ =&amp;gt; { /* unused OnNext */ }, () =&amp;gt; GameCore.State = CoreGameState.Playing);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Below is an alternate method of doing the same as the above ^&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; InitializePlayers.AsObservable()&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .Subscribe(_ =&amp;gt; { /* unused OnNext */ }, () =&amp;gt; GameCore.State = CoreGameState.Playing);&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;
&lt;P&gt;private IEnumerator InitializePlayers() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Do initializing players logic based on menu settings, AI player count, etc.&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The above logic is all triggered from a single BeginGame command, which sets off a series of chained observable IEnumerators.&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;The BeginGame command immediately sets the game's state to GeneratingMap, and then creates an Observable sequence using the IEnumerator GenerateMap, located in the CoreMapController. 
&lt;LI&gt;Because this is an observable, we subscribe to it and tell it to let us know when it is &lt;EM&gt;complete&lt;/EM&gt;, at which point it will call DoneGenerating. 
&lt;LI&gt;DoneGenerating is a simple function separated out for readability.&amp;nbsp; It creates another Observable sequence using the IEnumerator InitializePlayers, which would handle creating AI players, spawning units, etc. 
&lt;LI&gt;When this Observable is complete, it simply changes the game's state to Playing, at which point&amp;nbsp;the game actually begins. &lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;Now that we have some familiarity with how to implement similar functionality as Unity's StartCoroutine when using IEnumerators, let's briefly look at one of the ways to utilize return values from these Observable IEnumerators.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example: Observable.FromCoroutineValue&amp;lt;int&amp;gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public override void Awake() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.Awake();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Simply output the IEnumerators yielded values to the Debug console&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Observable.FromCoroutineValue&amp;lt;int&amp;gt;(DoStuff)&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .Subscribe(i =&amp;gt; Debug.Log(i), () =&amp;gt; Debug.Log("Done."));&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;
&lt;P&gt;private IEnumerator&amp;lt;int&amp;gt; DoStuff() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yield return 1;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yield return 2;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yield return 42;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yield return 7;&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;
&lt;P&gt;/* Results in Debug.Log messages to the console, reading:&lt;/P&gt;
&lt;P&gt;1&lt;/P&gt;
&lt;P&gt;2&lt;/P&gt;
&lt;P&gt;42&lt;/P&gt;
&lt;P&gt;7&lt;/P&gt;
&lt;P&gt;Done.&lt;/P&gt;
&lt;P&gt;*/&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;More Examples can be found on the&amp;nbsp;&lt;A href="https://github.com/neuecc/UniRx" target=_blank&gt;UniRx GitHub&lt;/A&gt;.&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
        </Topics>
      </TopicCategory>
      <TopicCategory Id="ff0171e1-7e09-469b-ab48-1567f1c3ca97" AutoIndex="false">
        <Caption m="2015-01-08T05:51:35.1013109Z">Aahz</Caption>
        <ChildTopicCategories>
          <TopicCategory Id="5fa7c125-f2b4-448b-adc8-ab5a9c1093d8" AutoIndex="false">
            <Caption m="2015-01-08T05:53:13.3679314Z">Editor</Caption>
            <ChildTopicCategories>
              <TopicCategory Id="f1eb8ab7-668b-4345-ac29-a8644e62f014" AutoIndex="true">
                <Caption m="2014-10-13T18:22:56.0422375Z">Elements</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="452e9bb9-272b-42a4-9cec-214581b8d33c" Status="New Topic" CreatedOn="2015-01-08T06:32:16.2939391Z" ModifiedOn="2015-01-12T21:49:11.1004829Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Project Repositories" BuildFlags="">
                    <Title m="2015-01-08T06:34:11.4785273Z">Project Repositories</Title>
                    <ContentsTitle m="2015-01-12T21:11:57.0526521Z">Project Repositories</ContentsTitle>
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2015-01-08T06:32:16.2939391Z">&lt;p&gt; &lt;/p&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
            </ChildTopicCategories>
            <Topics>
              <Topic Id="86c9f298-3f7e-4cf8-beb4-fc5550dcfdfa" Status="New Topic" CreatedOn="2015-01-06T21:37:57.4054077Z" ModifiedOn="2015-01-08T06:06:43.3322587Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Standard Graph" BuildFlags="">
                <Title m="2015-01-08T06:04:19.692043Z">Standard Graph</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2015-01-07T17:26:43.7131608Z">&lt;P&gt;&lt;IMG border=0 alt="" src="Snags/StandardGraph.png"&gt;&lt;/P&gt;
&lt;P&gt;Graph Explained:&lt;/P&gt;
&lt;P&gt;A: &lt;/P&gt;
&lt;P&gt;B: &lt;/P&gt;
&lt;P&gt;C: &lt;/P&gt;
&lt;P&gt;D: &lt;/P&gt;
&lt;P&gt;E: &lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="dfbf597b-8ee8-44d0-b1a2-d34722c0e4ee" Status="New Topic" CreatedOn="2015-01-06T21:46:10.4461172Z" ModifiedOn="2015-01-08T06:07:05.4565241Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="State Machine Graph" BuildFlags="">
                <Title m="2015-01-08T06:04:07.4493427Z">State Machine Graph</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2015-01-06T21:47:54.4921551Z">&lt;P&gt;&lt;IMG border=0 alt="" src="Snags/StateMachine.png"&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="9796cd9e-935d-4c3b-8537-f40af5d83dcd" Status="New Topic" CreatedOn="2015-01-06T21:46:42.0639323Z" ModifiedOn="2015-01-08T06:07:40.2135121Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Subsystem Graphs" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2015-01-06T21:47:54.4991608Z">&lt;P&gt;&lt;IMG border=0 alt="" src="Snags/Subsystem.png"&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="eb2f17be-8cc4-4e59-ad38-6e77265a4ed4" Status="New Topic" CreatedOn="2015-01-06T21:46:57.8876803Z" ModifiedOn="2015-01-08T06:07:58.8875802Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Element Graphs" BuildFlags="">
                <Title m="2015-01-08T06:07:56.6684533Z">Element Graphs</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2015-01-06T21:47:54.5051628Z">&lt;P&gt;&lt;IMG border=0 alt="" src="Snags/ElementGraph.png"&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="9f451649-9eec-4608-99fc-420d0d3e045e" Status="New Topic" CreatedOn="2015-01-06T21:47:16.3482639Z" ModifiedOn="2015-01-08T06:08:23.9040111Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="View Binding" BuildFlags="">
                <Title m="2015-01-08T06:08:20.7508307Z">View Binding</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2015-01-06T21:47:54.5081648Z">&lt;P&gt;&lt;IMG border=0 alt="" src="Snags/Bindings.png"&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="5d77e4e8-76d6-4c9f-bce7-a90aab111480" AutoIndex="true">
            <Caption m="2014-10-13T18:23:49.5310413Z">Classes</Caption>
            <ChildTopicCategories />
            <Topics />
          </TopicCategory>
          <TopicCategory Id="b971bf6b-12e5-4e04-84c9-900a4df271f0" AutoIndex="true">
            <Caption m="2014-10-13T18:23:20.3161487Z">Views</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="76bb978a-9044-4be5-a4b3-dd3bc891eb24" Status="New Topic" CreatedOn="2015-01-08T05:55:25.8095066Z" ModifiedOn="2015-02-05T03:50:27.3742028Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="View" BuildFlags="">
                <Title m="2015-01-08T05:55:34.1889859Z">Views</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2015-02-05T03:50:27.3742028Z">&lt;H1&gt;What is it?&lt;/H1&gt;
&lt;P&gt;Views are perhaps the easiest layer to understand in the context of Unity,&amp;nbsp;due to the fact that they exist specifically to interact with the UnityEngine namespace and environment.&amp;nbsp; Views are the "presentation" layer, where the data of ViewModels are represented through the implementation of bindings.&amp;nbsp; The idea is that for the most part, ViewModel data exists somewhere already, and Views merely "bind" to that data in order to represent changes in a way that Unity and players can understand.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H1&gt;Where does it exist in Unity?&lt;/H1&gt;
&lt;P&gt;Views generated by uFrame inherit from Monobehaviour, and therefore are much like normal Unity components.&amp;nbsp; Building on top of Monobehaviour, uFrame ties into Unity methods like Update, Start, OnEnable, and OnDestroy in order to implement necessary MVCVM functionality within the Unity environment.&amp;nbsp; Every View that uFrame generates is meant to exist as a component on a particular GameObject.&amp;nbsp;&amp;nbsp;For instance, a PlayerView should probably exist on some kind of Player GameObject, and a PlayerHUDView should probably exist on some kind of GUI GameObject to bind to and express a player's stats and other&amp;nbsp;properties.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H1&gt;What else?&lt;/H1&gt;
&lt;H3&gt;The Presentation Layer&lt;/H3&gt;
&lt;P&gt;Views are the so-called "presentation" layer, where a programmer will implement the logic of how the abstracted ViewModel data is represented in a particular environment.&amp;nbsp; So if you have a PlayerViewModel, you may decide to represent that in any number of ways, including:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;a PlayerView that represents the player as an animated character moving in space 
&lt;LI&gt;a PlayerHUDView that represents the player's health, stamina, energy and other stats in your GUI 
&lt;LI&gt;and maybe a PlayerMapView that represents your player's position relative to some kind of GUI Map object &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;All of these would typically want to bind to the same player&amp;nbsp;ViewModel&amp;nbsp;"instance", such that they are said to &lt;EM&gt;share&lt;/EM&gt; the same ViewModel, representing the data in different ways.&amp;nbsp; The most important distinction is that each of these views should concern themselves with ONLY their own representation, meaning that the PlayerView in the above example should not be updating GUI elements, but rather leave that to the PlayerHUDView or possibly PlayerMapView.&amp;nbsp; Views should be as independent as possible, handling just themselves and their own interactions.&amp;nbsp; Since any number of Views can bind to the same ViewModel instance, it is up to you to determine how many Views are needed and what their individual responsibilities will be in representing that data inside Unity.&lt;/P&gt;
&lt;P&gt;It is also extremely important that none of these views contains core game logic, as that would mean other parts of your game would not function without that particular view.&amp;nbsp; Consider that for testing HUD purposes, you have removed the PlayerView GameObject that contains presentation logic for an animated Mecanim character.&amp;nbsp; Everything else in your scene should still function as normal, nothing should immediately error, and your other Views of that PlayerViewModel instance should still function.&amp;nbsp; For more information, see Separating Logic.&lt;/P&gt;
&lt;H3&gt;Bindings&lt;/H3&gt;
&lt;P&gt;With the ViewModel as a single source of truth, Views bind to a particular ViewModel instance and react to events such as property/collection changes and command executions.&amp;nbsp; So the common example seen is usually something like a Player element with a Health property, and a view of that player will bind to the Health property, and instantly be notified whenever that HealthChanged event occurs.&lt;/P&gt;
&lt;H4&gt;Why does there seem to be three different ways of accessing the same value?&lt;/H4&gt;
&lt;P&gt;For those looking into the actual code uFrame generates on Views, there may&amp;nbsp;appear to be around three variables that are confusingly similarly named.&amp;nbsp; For example on a PlayerView with a Health property,&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;this._Health&lt;/STRONG&gt;: This is the underscored local PlayerView's Health field, which appears in the Unity inspector when the Player GameObject or&amp;nbsp;prefab&amp;nbsp;is selected. 
&lt;LI&gt;&lt;STRONG&gt;this.Player.HealthProperty&lt;/STRONG&gt;: This is the observable Health property, accessed directly through the associated PlayerViewModel instance. 
&lt;LI&gt;&lt;STRONG&gt;this.Player.Health&lt;/STRONG&gt;: This is the actual Health value, accessed directly through the associated PlayerViewModel instance.&amp;nbsp; It's worth noting that this is exactly the same as accessing through the observable, like&amp;nbsp;&lt;EM&gt;this.Player.HealthProperty.Value&lt;/EM&gt;. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="3375264e-cc07-4607-9d0d-9fb39199078d" Status="New Topic" CreatedOn="2015-01-08T06:10:39.3667591Z" ModifiedOn="2015-02-05T06:26:58.1732622Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="View Bindings In-Depth" BuildFlags="">
                <Title m="2015-01-08T06:11:00.7209805Z">View Bindings In-Depth</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2015-02-05T06:26:58.1722621Z">&lt;P&gt;Bindings are how you subscribe to things in order to be notified of changes.&amp;nbsp; This is much like the idea of&amp;nbsp;&lt;A href="d17135f4-edee-4d30-80fe-c80d8bd02cc2" style="auto-update-caption: true"&gt;The Observer Pattern&lt;/A&gt;, and in fact uFrame uses Observables (via UniRx) for almost everything, allowing you a great deal of flexibility in the ability to subscribe to just about any change event you could imagine.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Before beginning, you must&amp;nbsp;understand that bindings are IDisposable, and should always be disposed of when the subscription is no longer needed.&amp;nbsp; Views in uFrame automatically keep track of a List&amp;lt;IDisposable&amp;gt; collection called Bindings, which will automatically be disposed of on a View when UnBind happens.&amp;nbsp; To add to this Bindings collection on a View for automatic disposal, use the AddBinding(IDisposable) method, or one of the ViewBase&amp;nbsp;extension methods in ViewBindings.cs, for example:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;On a generated View, typically in a Bind() method&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public UILabel NameLabel;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;public override void Bind() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.Bind();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Manual bindings, added simply for example&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.BindKey(Player.Jump, KeyCode.Space);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.BindInputButton(Player.Shoot, "Fire1", InputButtonEventType.ButtonDown);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.AddBinding(Player.HealthProperty.Subscribe(HealthChanged));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.AddBinding(Player.NameProperty.Subscribe( name =&amp;gt; {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if(NameLabel != null)&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; NameLabel.text = name;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}));&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;
&lt;P&gt;public void HealthChanged(int health) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Do something based on new health value&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;There are many convenience extension methods like BindKey and BindInputButton in ViewBindings.cs, and more will likely be added later, so it is recommended to check the file itself to see the current bindings available.&lt;/P&gt;
&lt;HR&gt;

&lt;H2&gt;Default View Bindings Available in the Diagram&lt;/H2&gt;
&lt;H3&gt;&lt;IMG border=0 alt="" src="Snags/Bindings.png"&gt;&lt;/H3&gt;
&lt;HR&gt;

&lt;H3&gt;A. Property Bindings&lt;/H3&gt;
&lt;P&gt;Property Bindings simply alert you to changed values.&amp;nbsp; Manually they are achieved in code by either:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Property Bindings example&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// On a View, binding to a property and automatically adding it to that View's Bindings&lt;/P&gt;
&lt;P&gt;this.BindProperty(Player.HealthProperty, HealthChanged);&lt;/P&gt;
&lt;P&gt;// Subscribing, can happen just about anywhere you have access to the observable property&lt;/P&gt;
&lt;P&gt;Player.HealthProperty.Subscribe(HealthChanged).DisposeWith(this);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;public void HealthChanged(int health) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Do something based on new health value&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;HR&gt;

&lt;H3&gt;B. State Machine Bindings&lt;/H3&gt;
&lt;P&gt;These bindings allow Views to react to state changes from ViewModels.&amp;nbsp; It is extremely important to realize that these bindings are still on the View layer, and as such should still only be used for presentation logic; for example, they should not be executing commands or changing properties.&amp;nbsp; These View bindings are particularly useful for triggering animation states, altering input key bindings,&amp;nbsp;and syncing with other Unity assets.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;HR&gt;

&lt;H3&gt;C. View Collection Bindings&lt;/H3&gt;
&lt;P&gt;These will be the most common collection bindings, and selecting&amp;nbsp;them will generate 3 default bindings: Create{Collection}View, {Collection}Added, and&amp;nbsp;{Collection}Removed.&amp;nbsp; This will allow you to react to adding/removing ViewModels&amp;nbsp;to/from a collection, while the Create{Collection}View binding gives the ability to instantiate child collection View GameObjects&amp;nbsp;as needed.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H3&gt;D. Standard Collection Bindings&lt;/H3&gt;
&lt;P&gt;Standard Collection bindings allow notification of standard CollectionChanged events, such as&amp;nbsp;when a&amp;nbsp;ViewModel is added/removed.&amp;nbsp;Add, Remove, Reset, Replace, Move.&amp;nbsp; Generally collection bindings on Views in the uFrame diagram are sufficient for most needs, such as ItemAdded and&amp;nbsp;ItemRemoved, while also allowing you to CreateItemView when handling the creation of child View GameObjects matching newly added collection ViewModels.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H3&gt;Bonus: Manual Collection Bindings with UniRx&lt;/H3&gt;
&lt;P&gt;For the most part, it's rare to need to manually bind to a collection, and it can get slightly complicated at first glance.&amp;nbsp; The full extent of collection changed events available is:&amp;nbsp;&amp;nbsp;Add, Remove, Reset, Replace, and&amp;nbsp;Move.&amp;nbsp; Here is a simplistic example of observing and reacting to CollectionChanged events, in this case Reset, using a Map ViewModel with a VisibleTiles collection:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;MapController.cs&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public override void InitializeMap(MapViewModel map) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Subscribe only when collection is reset&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; map.VisibleTiles.Where(args =&amp;gt; args.Action == NotifyCollectionChangedAction.Reset)&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .Subscribe(_ =&amp;gt; TilesReset())&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .DisposeWith(map);&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;
&lt;P&gt;private void TilesReset() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Debug.Log("VisibleTiles collection has been reset.");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Perhaps regenerate map?&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;HR&gt;

&lt;H3&gt;E. Command Bindings&lt;/H3&gt;
&lt;P&gt;Commands are also observable, and binding to commands notifies you when those commands are executed.&amp;nbsp; These are available on Views, and are most easily added via the uFrame diagram.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Tip: By default, generated command bindings do NOT send the parameter, if there is a parameter.&amp;nbsp; If you absolutely need the parameter, for example when an RTS unit takes damage and you need to display damage numbers above the unit, you can do something similar to the below code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;RTSUnitView.cs&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public HUDText unitHUDText;&amp;nbsp;// Component that displays damage numbers&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;public override void TakeDamageExecuted() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var health = (int)(this.RTSUnit.TakeDamage.Parameter);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; unitHUDText.Add(health, Color.red);&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Simply access the observable command's Parameter property, which is set to the current parameter value whenever the command is executed.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="54b6b859-4c29-4fa3-a0e8-3dadefd40e50" Status="New Topic" CreatedOn="2015-01-08T06:11:28.8965921Z" ModifiedOn="2015-02-05T06:32:47.0652263Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Important Methods and Execution Order" BuildFlags="">
                <Title m="2015-02-02T08:17:05.8860353Z">Important Methods and Execution Order</Title>
                <ContentsTitle m="2015-02-02T08:16:15.2561394Z">Important Methods</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2015-02-05T06:32:47.0652263Z">&lt;P&gt;This section deals with&amp;nbsp;important View methods&amp;nbsp;available to be overridden and the general order of execution for those methods.&lt;/P&gt;
&lt;HR&gt;

&lt;H2&gt;Execution Order&lt;/H2&gt;
&lt;P&gt;There are actually several different entry points on generated&amp;nbsp;Views.&amp;nbsp; The usual order is:&lt;/P&gt;
&lt;H3&gt;For Views instantiated at runtime&lt;/H3&gt;
&lt;P&gt;Awake &amp;gt; OnEnable &amp;gt; PreBind &amp;gt; Bind &amp;gt; AfterBind &amp;gt; InitializeViewModel &amp;gt; Start &amp;gt; Update loop begins&lt;/P&gt;
&lt;H3&gt;For Views existing "SceneFirst" before runtime&lt;/H3&gt;
&lt;P&gt;Awake &amp;gt; OnEnable &amp;gt; CreateModel &amp;gt; InitializeViewModel &amp;gt; Start (before base call) &amp;gt; PreBind &amp;gt; Bind &amp;gt; AfterBind &amp;gt; Start (after base call)&lt;/P&gt;
&lt;H3&gt;When Destroying an object,&lt;/H3&gt;
&lt;P&gt;OnDisable &amp;gt; OnDestroy (before base.OnDestroy() call) &amp;gt; UnBind &amp;gt; OnDestroy (after base.OnDestroy() call)&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;HR&gt;
&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;There are a few methods that ALWAYS need their base.Method() calls intact, otherwise uFrame can easily&amp;nbsp; produce unexpected results, including the common &lt;STRONG&gt;"Help, my bindings have stopped working!"&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;These methods include a majority of the overridden standard Unity methods:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Awake(), Start(), OnEnable(), OnDisable(), OnDestroy(), Update(), LateUpdate() 
&lt;LI&gt;PreBind(), Bind(), AfterBind(), UnBind(), InitializeViewModel() &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;HR&gt;

&lt;H2&gt;Important Methods&lt;/H2&gt;
&lt;P&gt;When looking for more clarity on how uFrame builds upon Monobehaviour, it can be fairly useful to look through ViewBase.cs, as this is what all uFrame Views inherit from.&lt;/P&gt;
&lt;H4&gt;PreBind()&lt;/H4&gt;
&lt;P&gt;This happens before the View begins creating&amp;nbsp;bindings&amp;nbsp;to its given ViewModel.&lt;/P&gt;
&lt;H4&gt;Bind()&lt;/H4&gt;
&lt;P&gt;This is where the View actually creates property bindings, collection bindings, and command&amp;nbsp;bindings to the given ViewModel.&amp;nbsp; The base.Bind() call will automatically create the bindings specified in the uFrame diagram for this specific View type.&amp;nbsp; If you have any further manual bindings you need to do, this&amp;nbsp;can be a good place to implement them.&lt;/P&gt;
&lt;H4&gt;AfterBind()&lt;/H4&gt;
&lt;P&gt;This is called immediately after the View creates bindings to its ViewModel.&lt;/P&gt;
&lt;H4&gt;CreateModel()&lt;/H4&gt;
&lt;P&gt;This is when SceneFirst Views request a proper ViewModel from the scene's Dependency Container.&amp;nbsp; For the most part, this should be left alone.&lt;/P&gt;
&lt;H4&gt;InitializeViewModel()&lt;/H4&gt;
&lt;P&gt;On a View, when the Initialize ViewModel option is checked in the inspector, this is where the base.InitializeViewModel() call will set the ViewModel's properties&amp;nbsp;to the values of the View's matching properties (which are underscored in code on the View).&amp;nbsp; This will usually never need to be overridden.&lt;/P&gt;
&lt;H4&gt;Awake(), Start(), OnEnable(), OnDisable(), OnDestroy(), Update(), LateUpdate()&lt;/H4&gt;
&lt;P&gt;These are all the same as their Unity counterparts, and &lt;STRONG&gt;must&lt;/STRONG&gt; retain their base calls if you override them, in order for uFrame to function properly.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="6c9333f4-a2c4-4528-91e8-131393de1732" AutoIndex="true">
            <Caption m="2014-10-13T18:23:30.0574132Z">ViewComponents</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="47b69744-b74d-4ef3-9a00-7d5d19d3371a" Status="New Topic" CreatedOn="2015-01-08T13:38:27.4838412Z" ModifiedOn="2015-02-05T10:19:16.1599262Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="ViewComponents" BuildFlags="">
                <Title m="2015-01-08T13:38:35.1102774Z">ViewComponents</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2015-02-05T10:19:16.1599262Z">&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/ViewComponents.png"&gt;&lt;/P&gt;
&lt;P&gt;ViewComponents can be used for a wide variety of things, and are meant to provide a further level of extensibility to Views.&amp;nbsp; They are derived from MonoBehaviour, and require a View in order to function.&amp;nbsp; A ViewComponent will bind to the same ViewModel instance to which its corresponding View is bound.&amp;nbsp; In essence, they are extremely simplistic, offering these things:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Access to a particular View to which it is bound 
&lt;UL&gt;
&lt;LI&gt;Access to that&amp;nbsp;specific&amp;nbsp;ViewModel instance &lt;/LI&gt;&lt;/UL&gt;
&lt;LI&gt;Matching execute methods for the corresponding View's commands 
&lt;LI&gt;Awake, Bind, and Unbind methods 
&lt;UL&gt;
&lt;LI&gt;These can be used to implement manual bindings where desired, among other things &lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;While entirely optional, there are a lot of creative uses for&amp;nbsp;ViewComponents, including interchangeable behaviours, toggleable logic,&amp;nbsp;and even extending logical ownership&amp;nbsp;for a View.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;For example, we'll outline a scenario where you wish to have a system that detects hit damage&amp;nbsp;to specific player body parts in an FPS game, in order to have damage multipliers.&amp;nbsp; In the example diagram below, we have separated out ViewComponents for each type of body part.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="Snags/ViewComponentExampleDiagram.png"&gt;&lt;/P&gt;
&lt;P&gt;On the Player GameObject, we would attach the PlayerView.&amp;nbsp;&amp;nbsp;Assuming that we have a rigged character model parented to that Player GameObject, we would want to set up Colliders on the joint references of&amp;nbsp;each of the corresponding body parts, similar to the screenshot below:&lt;/P&gt;&lt;innovasys:widget type="Dynamic Image" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="ThumbnailURL"&gt;Snags/ViewComponentExampleColliders_thumb.png&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ImageTitle"&gt;ViewComponent Example: Setting up colliders on all body parts&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;We can either add ViewComponents at runtime, or assign them directly to each Collider individually:&lt;/P&gt;&lt;innovasys:widget type="Dynamic Image" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="ThumbnailURL"&gt;Snags/ViewComponentExampleArmArrows_thumb.png&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ImageTitle"&gt;ViewComponent Example: Assigning main PlayerView to each BodyPart ViewComponent&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Once this is done, we simply need to add a short piece of code to each ViewComponent to detect collisions and execute TakeDamage, something like:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;PlayerArmViewComponent.cs&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public partial class PlayerArmComponent {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; void OnCollisionEnter(Collision collision) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Check if collision is with a bullet; if not, quickly return&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; var bulletVM = collision.gameObject.GetViewModel&amp;lt;BulletViewModel&amp;gt;();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (bulletVM == null) return;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // We've been hit by a bullet!&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; var damageInfo = new BodyPartDamageInfo()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; BodyPart = PlayerBodyParts.Arm,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Damage = bulletVM.BaseDamage&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ExecuteTakeDamage(damageInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;So now with similar code on all of our body part GameObjects, they will each provide separate collision checks for individual body parts.&amp;nbsp; If a body part is hit by a bullet GameObject with a BulletView on it, the damage of that&amp;nbsp;BulletViewModel instance will be passed, along with the type of body part hit, to the TakeDamage command on the PlayerController.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="98d3468b-aae2-4883-bc43-47fa653dd598" AutoIndex="false">
            <Caption m="2014-10-13T18:26:33.6952446Z">Plug Ins</Caption>
            <ChildTopicCategories />
            <Topics />
          </TopicCategory>
          <TopicCategory Id="fae1aee8-dcab-4101-9fc3-573d271b3239" AutoIndex="true">
            <Caption m="2015-01-30T09:37:08.4818684Z">Managers</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="92c7fe99-ece7-45c9-a6d2-4be43f1d913e" Status="New Topic" CreatedOn="2015-01-21T00:54:38.2888689Z" ModifiedOn="2015-01-30T07:36:27.0966848Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="GameManager" BuildFlags="">
                <Title m="2015-01-30T05:47:40.5863459Z">Game Manager and Scene Managers</Title>
                <ContentsTitle m="2015-01-30T05:48:10.7410722Z">GameManager and SceneManagers</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2015-01-30T07:36:27.0956848Z">&lt;H1&gt;Game Manager&lt;/H1&gt;
&lt;P&gt;The&amp;nbsp;GameManager has the longest lifecycle of all the uFrame classes, remaining throughout the entire lifetime of a game.&amp;nbsp; It persists from scene to scene and is always available (though rarely directly needed) through&amp;nbsp;its static GameManager.Instance property.&amp;nbsp; Its main responsibility is to maintain the current SceneManager and process the appropriate setup required by the rest of uFrame.&amp;nbsp; In most cases you won't even need to directly&amp;nbsp;touch the GameManager.&lt;/P&gt;
&lt;H1&gt;Scene Managers&lt;/H1&gt;
&lt;P&gt;SceneManagers ultimately provide context to a scene, defining how it loads, unloads, and transitions to other scenes.&amp;nbsp; There can be many SceneManagers, but there will only ever be one active at a time.&amp;nbsp; While all parts of uFrame contain a reference to the current SceneManager, this can also be accessed by the static property of GameManager.ActiveSceneManager.&lt;/P&gt;
&lt;P&gt;Every SceneManager requires an appropriate subsystem to&amp;nbsp;be attached to it, which defines how uFrame generates its "boot loader" when a scene starts.&amp;nbsp; Every element&amp;nbsp;defined in the subsystem will&amp;nbsp;have its Controller registered to the SceneManager's Dependency Container along with any defined Registered ViewModel&amp;nbsp;Instances.&amp;nbsp; This will also include any subsystems that are included into the attached subsystem.&lt;/P&gt;
&lt;P&gt;In short, if a scene&amp;nbsp;is going to&amp;nbsp;use an element,&amp;nbsp;make sure it's included in a subsystem that leads into that SceneManager.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/FPSSceneFlow_SceneManagers.png"&gt;&lt;/P&gt;
&lt;P&gt;A SceneManager is the first thing loaded by the GameManager, and its Setup method is the first thing to be invoked.&amp;nbsp; SceneManagers have several important methods that can be overridden.&lt;/P&gt;
&lt;H3&gt;SceneManager.Setup()&lt;/H3&gt;
&lt;P&gt;When a SceneManager's Setup() is invoked, it has the responsibility of registering any dependencies that will be used in the context of the scene to which that particular SceneManager belongs.&amp;nbsp; By default, uFrame generates this method for you based on your subsystems and their Registered Instances, but if you have any further necessary dependencies to register, this is where to do it.&amp;nbsp; The main article is here: &lt;A href="7d754988-6cf9-4b70-af5b-6c90edfcbacb" style="auto-update-caption: true"&gt;Scene Manager Setup&lt;/A&gt;&lt;/P&gt;
&lt;H3&gt;SceneManager.Load()&lt;/H3&gt;
&lt;P&gt;This is the IEnumerator that is responsible for loading resources, initializing, and instantiating objects if needed.&amp;nbsp; The main article is here:&amp;nbsp;&lt;A href="dfb72a29-0102-4bdf-bfc5-0f32cdf66a77" style="auto-update-caption: true"&gt;Scene Manager Loading&lt;/A&gt;&lt;/P&gt;
&lt;H3&gt;SceneManager.Reload()&lt;/H3&gt;
&lt;P&gt;If a transition to another scene is not needed, any logic that needs to happen in order to reset the scene should go here.&lt;/P&gt;
&lt;H3&gt;SceneManager.OnLoaded()&lt;/H3&gt;
&lt;P&gt;After a scene is loaded this method is called, and overriding it can be useful for triggering starting game logic if necessary.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="7d754988-6cf9-4b70-af5b-6c90edfcbacb" Status="New Topic" CreatedOn="2014-10-16T21:06:12.7036789Z" ModifiedOn="2014-10-29T15:17:14.4143707Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Scene Manager Setup" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2014-10-29T15:17:14.4143707Z">&lt;P&gt;The scene manager setup method is the first to be invoked when it is loaded.&amp;nbsp; Its responsibility is to register any dependencies required for this scene. To Demonstrate this take a look at how uFrame has created this default setup method for us.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;SceneManagerSetup&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void Setup() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.Setup();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Container.RegisterInstance&amp;lt;FPSMenuViewModel&amp;gt;(FPSMenu,"FPSMenu");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Container.RegisterInstance&amp;lt;FPSPlayerViewModel&amp;gt;(LocalPlayer,"LocalPlayer");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Container.RegisterInstance&amp;lt;FPSGameViewModel&amp;gt;(FPSGame,"FPSGame");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Container.RegisterInstance(FPSMenuController,false);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Container.RegisterInstance(FPSDamageableController,false);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Container.RegisterInstance(FPSEnemyController,false);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Container.RegisterInstance(FPSGameController,false);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Container.RegisterInstance(FPSPlayerController,false);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Container.RegisterInstance(FPSWeaponController,false);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.Container.InjectAll();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;We can always override any of these in our editable SceneManager file.&amp;nbsp; Since the registered instance is registered by using the Scene Managers very own property all we need to do is set the property before it is registered.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;SceneManagerSetupOverride&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void Setup() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; FPSEnemyController = new FPSEnemyTestController();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.Setup();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="620a3ed1-ebfe-45fc-87cf-abaa5b7dad4f" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="Assembly-CSharp~SceneManager" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="5a6a21f3-ff61-46be-8b36-cb2e331e3f31" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="Assembly-CSharp~SceneManager~Setup" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="dfb72a29-0102-4bdf-bfc5-0f32cdf66a77" Status="New Topic" CreatedOn="2014-10-16T21:05:54.70695Z" ModifiedOn="2015-01-30T09:17:20.8249383Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Scene Manager Loading" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2015-01-30T09:17:20.8249383Z">&lt;P style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/21px "Open Sans", Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 0.25in; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;&lt;SPAN style="FONT-SIZE: 13pt; FONT-FAMILY: Calibri"&gt;Sometimes a scene requires that it be loaded dynamically, rather than manually designing it in the editor before runtime. The load method is referred to as an IEnumerator, which provides a convenient place for adding this type of functionality, and can easily work with the loading screen. This method can be used for any type of scene initialization, including (but not limited to):&lt;/SPAN&gt;&lt;/P&gt;
&lt;UL style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/21px "Open Sans", Arial, sans-serif; PADDING-LEFT: 20px; MARGIN: 0px 0px 18px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;
&lt;LI style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"&gt;Logging in a user 
&lt;LI style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"&gt;Instantiating any Views that need to be created dynamically 
&lt;LI style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"&gt;Loading a user map 
&lt;LI style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"&gt;Waiting for network connections 
&lt;LI style="PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px"&gt;etc... &lt;/LI&gt;&lt;/UL&gt;
&lt;P style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/21px "Open Sans", Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;To demonstrate this, simply override the Load() method in any Scene Manager and paste in the below code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;SceneManagerLoadMethod&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override IEnumerator Load(UpdateProgressDelegate progress)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; progress("Scene A Controller - Step 1", 0.2f);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yield return new WaitForSeconds(1f);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; progress("Scene A Controller - Step 2", 0.4f);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yield return new WaitForSeconds(1f);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; progress("Scene A Controller - Step 3", 0.6f);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yield return new WaitForSeconds(1f);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; progress("Scene A Controller - Step 4", 0.8f);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yield return new WaitForSeconds(1f);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; progress("Scene A Controller - Step 5", 1f);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="a22c1df0-16cf-4c86-8a3c-a6a30b8eee96" Status="New Topic" CreatedOn="2014-10-16T20:19:44.1207594Z" ModifiedOn="2014-10-29T14:55:22.1024497Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Scene Transitions" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2014-10-29T14:55:12.2622879Z">&lt;P&gt;Scene Transitions allow you to easily set-up transitioning from one scene to another.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Scene transitions require a registered instance in a connected subsystem.&amp;nbsp; The commands of this registered instance be available for invoking transitions to other scenes.&lt;/P&gt;
&lt;P&gt;When you click on the '+' button these commands will be displayed in a list in order to add them as transitions.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;When the code is generated it will subscribe to the command and begin the transition when executed, just like any other command.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/FPSSceneFlow_SceneManagers.png"&gt;&lt;/P&gt;
&lt;P&gt;Here is an example of the Play transition as generated code in the FPSMainMenuManagerBase class.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;GeneratedSceneTransition&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void Initialize() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.Initialize();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; FPSMenu.Play.Subscribe(_=&amp;gt; Play()).DisposeWith(this.gameObject);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public virtual System.Collections.Generic.IEnumerable&amp;lt;string&amp;gt; GetPlayScenes() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return this._PlayTransition._Scenes;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public virtual void Play() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; GameManager.TransitionLevel&amp;lt;WavesFPSGameManager&amp;gt;((container) =&amp;gt;{container._WavesFPSGameManagerSettings = _PlayTransition;&amp;nbsp;&amp;nbsp; PlayTransitionComplete(container); }, this.GetPlayScenes().ToArray());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="cc1c7b23-bb3c-4999-823f-12a1a51b6fc7" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="549bf522-56d1-49f5-8390-55d7e756a53e" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="f45958cc-2582-4735-9125-ab4b258d9be1" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="56f421fb-9245-44f3-881f-2540fcbefeb3" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="3ab89dc0-1ac3-4685-bd2f-0624a480d1bc" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="a37ff8ec-f4e5-4c61-931e-dbdc3d17e72f" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="4b7a76f5-a935-4854-96d7-4fc797759853" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="bfc96d33-fd78-44dd-a495-9d5de2cbd348" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="56f421fb-9245-44f3-881f-2540fcbefeb3" Status="New Topic" CreatedOn="2014-10-29T14:50:49.6835741Z" ModifiedOn="2014-10-29T15:39:08.1475922Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Get{TransitionName} Method" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2014-10-29T15:39:08.1475922Z">&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Get{TransitionName}&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public virtual System.Collections.Generic.IEnumerable&amp;lt;string&amp;gt; GetPlayScenes() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return this._PlayTransition._Scenes;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="a37ff8ec-f4e5-4c61-931e-dbdc3d17e72f" Status="New Topic" CreatedOn="2014-10-29T14:51:56.9053923Z" ModifiedOn="2014-10-29T15:22:06.5885209Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="{TransitionName} Method" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2014-10-29T15:22:06.5885209Z">&lt;P&gt;The {TransitionName} method is generated and invoked when the command is invoked.&amp;nbsp; this method can be overridden if you want to completely change how the transition is implemented.&amp;nbsp; You can also call this method from your scene manager manually if needed.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;PlayTransition&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public virtual void Play() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; GameManager.TransitionLevel&amp;lt;WavesFPSGameManager&amp;gt;((container) =&amp;gt;{container._WavesFPSGameManagerSettings = _PlayTransition; PlayTransitionComplete(container); }, this.GetPlayScenes().ToArray());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="bfc96d33-fd78-44dd-a495-9d5de2cbd348" Status="New Topic" CreatedOn="2014-10-29T14:52:42.4971035Z" ModifiedOn="2014-10-29T14:53:47.7093393Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="{TransitionName}TransitionComplete Method" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2014-10-29T14:53:47.7093393Z">&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;PlayTransitionComplete &lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public virtual void PlayTransitionComplete(WavesFPSGameManager sceneManager) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="c052d127-00c9-4df7-a384-577f3901d8cf" Status="New Topic" CreatedOn="2014-10-15T00:28:47.3062531Z" ModifiedOn="2014-10-29T15:09:58.8798289Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Scene Manager Inspectors" BuildFlags="">
                <Title m="2014-10-24T17:01:22.0586687Z">Configuring Scenes For Transitions</Title>
                <ContentsTitle m="2014-10-24T17:01:33.3073167Z">Configuring Scenes For Transitions</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2014-10-29T15:09:47.8711989Z">&lt;P&gt;For every transition there will be a generated array of scenes that define the scenes to be loaded during a transition.&amp;nbsp; This can be found by clicking on the SceneManager of the source scene and defining the target scenes to load when transitioning. For example in the below image there is a GameSceneSettings group with a list of scenes.&amp;nbsp; This is for the transition into the game scene from the main menu scene.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/SceneManagerInspector.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;There should always be at least one scene specified that is also in the Build Settings&amp;nbsp;for the transition to work.&amp;nbsp; Any additional scenes will be loaded additively.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="6d135f6f-3b81-416c-82e1-4ad61c63680b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="a22c1df0-16cf-4c86-8a3c-a6a30b8eee96" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="4c853e5b-33f6-4c61-ad95-79ccfffad5fa" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="743c2fc4-194f-4f89-a32f-a3d9e2e70d68" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="46040daa-dcc6-492c-a721-5cd6d4a273bc" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="56f421fb-9245-44f3-881f-2540fcbefeb3" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="660b1fdb-b41c-41e0-be7e-81bf13801c9b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="a37ff8ec-f4e5-4c61-931e-dbdc3d17e72f" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="013a01fc-4950-46b6-982a-bb8bcaf30ada" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="bfc96d33-fd78-44dd-a495-9d5de2cbd348" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="7eb1a7c5-b876-434e-ae5c-e1aab2d5ec43" Status="New Topic" CreatedOn="2014-10-16T20:37:43.9123449Z" ModifiedOn="2014-10-29T15:08:12.8476033Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Scene Transition Loading Screen" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2014-10-29T15:08:12.8476033Z">&lt;P&gt;uFrame ships with a predefined loading screen that consist of nothing more than a view.&amp;nbsp; This view has a view-model that&amp;nbsp;is directly connecting to the loading/transition mechanism of uFrame.&amp;nbsp; The LoadingScreenView in the below image is a single object that has the pre-made UnityGUILevelLoaderView.&amp;nbsp; The "LoadingScreenObject" is a Unity component that does nothing more than mark the object for removal when the loading of a transition has completed.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/LoadingScreenSceneDetails_markedup.png"&gt;&lt;/P&gt;
&lt;P&gt;If you want to create your own custom loading screen with a different loading screen you must create a class that derives from LevelLoaderView and implement the methods as shown below.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;CustomLoadingScreenView&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public class DebugLoaderView : LevelLoaderView&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected override void ProgressChanged(float progressValue)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.ProgressChanged(progressValue);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Debug.Log("Progress has changed to: " + progressValue);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected override void StatusChanged(string statusMessage)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.StatusChanged(statusMessage);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Debug.Log("Status has changed to: " + progressValue);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="aa2c5e43-7df2-4f88-b66c-6613c6f1bbb1" AutoIndex="true">
            <Caption m="2014-10-13T18:14:15.02743Z">Subsystems</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="19471c2a-5a8c-4057-bd6d-a240e3b7d591" Status="New Topic" CreatedOn="2014-10-13T18:14:23.4194107Z" ModifiedOn="2014-10-30T15:57:40.5710627Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Registerd Instances" BuildFlags="">
                <Title m="2014-10-13T18:18:32.9677262Z">Registered Instances</Title>
                <ContentsTitle m="2014-10-13T19:43:34.7962023Z">Registered Instances</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2014-10-30T15:57:40.5710627Z">&lt;P&gt;&amp;nbsp;Registered Instances allow you to make an element highly accessible throughout the project.&amp;nbsp; All controllers within the subsystem or subsequent subsystems will gain access to this instance via properties on the SceneManagers and properties on each controller.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/FPSSceneFlow_RegisterdInstances2.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="dd741fbd-cb18-487a-b117-282bcf815cd7" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="91afe810-6a1b-40cf-ad84-1e54797bdb67" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="1bd39002-76ff-4e66-aabf-6116e93d6531" Status="New Topic" CreatedOn="2014-10-13T18:17:44.7607474Z" ModifiedOn="2014-10-30T15:57:40.5850696Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Subsystem Usage" BuildFlags="">
                <Title />
                <ContentsTitle m="2014-10-13T20:35:45.7042662Z">Subsystem Usage</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2014-10-30T15:57:40.5850696Z">&lt;P style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/21px "Open Sans", Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;Subsystems are used to organize various aspects of a project into logical sections. Each subsystem must be linked either to another subsystem and/or a Scene Manager. Subsystems are only allowed at the root level of a diagram.&lt;/P&gt;
&lt;P style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/21px "Open Sans", Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 18px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;When a subsystem is linked to another sub-system all of the items from the source subsystem will be imported into the target system an ultimately will be used to generate the scene managers boot loader.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/FPSSceneFlow.png"&gt;&lt;/P&gt;
&lt;H3 style='WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: rgb(204,204,204) 1px solid; TEXT-TRANSFORM: capitalize; COLOR: rgb(0,0,0); PADDING-BOTTOM: 5px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: bold 1.28em/1.4em "Open Sans", sans-serif; PADDING-LEFT: 0px; MARGIN: 30px 0px 10px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;Organizing Subsystems&lt;/H3&gt;
&lt;P style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/21px "Open Sans", Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 0.25in; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px'&gt;&lt;SPAN style="FONT-SIZE: 13pt; FONT-FAMILY: Calibri"&gt;It is important to keep in mind when organizing and connecting subsystems that all of the elements in each of the subsystems when linked to the Scene Manager will be included. The Scene Manager will then properly setup the element parts needed for running the scene. To better understand&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&lt;SPAN style="FONT-SIZE: 17px; LINE-HEIGHT: 26px"&gt;this, let's examine the following example:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;BR _moz_dirty="true"&gt;&lt;/P&gt;
&lt;P style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; FONT: 14px/21px "Open Sans", Arial, sans-serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 0.25in; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px'&gt;&lt;SPAN style="FONT-SIZE: 13pt; FONT-FAMILY: Calibri"&gt;We have an “ExampleSceneManager” which is connected to “SubSystem2” and indirectly connected to “SubSystem1”.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="8578b5b2-6ec3-4c6e-81a3-e10829a6e2a7" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="91afe810-6a1b-40cf-ad84-1e54797bdb67" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="fd1a0a34-2b0e-44d7-a4af-17ea1f742925" Status="New Topic" CreatedOn="2014-10-13T18:18:16.6274582Z" ModifiedOn="2014-10-30T15:57:40.5760657Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Using External Subsystems" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2014-10-30T15:57:40.5760657Z">&lt;P&gt;External subsystems allow you to keep a piece of an application separate from the rest of your project.&amp;nbsp; This means the subsystem can easily be export into another project.&amp;nbsp; &lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="885358bc-5c32-4ca4-a02d-7815303db5b7" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="91afe810-6a1b-40cf-ad84-1e54797bdb67" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="9fc091c3-1879-49cd-a866-f4eaa54d6c53" AutoIndex="false">
            <Caption m="2015-01-30T09:33:41.8990525Z">Controllers</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="f2680e3d-e92c-4f71-a91a-bdaed65a31d6" Status="New Topic" CreatedOn="2015-01-08T05:54:48.5113733Z" ModifiedOn="2015-01-27T16:10:22.8962697Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Controllers" BuildFlags="">
                <Title m="2015-01-08T05:55:04.5682917Z">Controllers</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2015-01-27T16:10:22.8962697Z">&lt;H1&gt;What is it?&lt;/H1&gt;
&lt;P&gt;Controllers dictate the rules of your game and,&amp;nbsp;like ViewModels, do not inherit from Unity's&amp;nbsp;Monobehaviour.&amp;nbsp; As they only handle logic, there only ever needs to be one Controller&amp;nbsp;for each type of ViewModel.&amp;nbsp; For example, when a PlayerViewModel performs the PickupItem command, the PlayerController would simply need to know which PlayerViewModel to execute that command logic on, and the logic remains the same whether there are&amp;nbsp;4 players or one.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H1&gt;Where does it exist in Unity?&lt;/H1&gt;
&lt;P&gt;At runtime, the&amp;nbsp;current SceneManager&amp;nbsp;automatically creates instances of each type of Controller used in all linked subsystems, and stores a reference to each of these Controllers in its&amp;nbsp;Dependency Container.&amp;nbsp; Just like with any C# class that is instantiated, it will exist until garbage collection determines it is no longer being referenced or used.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H1&gt;What else?&lt;/H1&gt;
&lt;H3&gt;Separating Logic&lt;/H3&gt;
&lt;P&gt;Perhaps the most important part of uFrame is separating out the two types of logic: core game logic, and presentation logic.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;Core game logic&lt;/STRONG&gt; is what goes into Controllers, and it is simply the conceptual idea of what actually happens when events occur.&amp;nbsp; If a player takes damage, the TakeDamage command on the PlayerController will decrement that player's health.&amp;nbsp; In this example it is obvious, but in other situations it can be difficult to separate this core logic from the rest of your game's necessary code.&amp;nbsp; This core logic does not care about particle effects, collisions, animations, sounds, or any GUI elements. 
&lt;LI&gt;&lt;STRONG&gt;Presentation logic&lt;/STRONG&gt; is what goes into Views, and it is simply how you represent your abstract game in a particular game engine or environment.&amp;nbsp; This is done by &lt;EM&gt;binding&lt;/EM&gt; a View to a particular ViewModel.&amp;nbsp; Binding allows your View to know when a property changes or an event happens, in order to represent this change/event in Unity.&amp;nbsp; For instance, a PlayerHUDView may bind to a particular PlayerViewModel instance called "LocalPlayer", and create a property binding for Health, to be notified when&amp;nbsp;LocalPlayer's&amp;nbsp;Health&amp;nbsp;changes.&amp;nbsp; In this property binding, you may do any number of things in Unity to represent that change, including updating a HealthGauge and/or briefly shaking the main camera.&amp;nbsp; Also, you may have another main PlayerView resolved to use/bind to that same "LocalPlayer" instance and be attached to the actual player's GameObject mesh, in which case you can represent a change in Health as a brief spray of red particles. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;By allowing and almost forcing you to think through this separation of logic, uFrame is attempting to assist you&amp;nbsp;in creating more flexible and robust code.&amp;nbsp; As long as the data is there, presentation logic will function and can even be changed freely according to however you choose to represent it.&amp;nbsp; The core game logic will always function correctly, as long as you&amp;nbsp;pass it the correct data types and dependencies it is expecting.&amp;nbsp; By abstracting and separating out concerns, you should be able to develop games with greater reusability, stability, and&amp;nbsp;flexibility.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="1556ba05-2036-493e-9c02-d1c355cd2cb1" Status="New Topic" CreatedOn="2015-01-08T06:26:20.4535862Z" ModifiedOn="2015-02-05T09:36:28.587005Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Controller Dependency Injection" BuildFlags="">
                <Title m="2015-01-12T21:48:12.6981425Z">Dependency Injection</Title>
                <ContentsTitle m="2015-01-08T06:27:04.2840932Z">Dependency Injection</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2015-02-05T09:36:28.587005Z">&lt;P&gt;For times when you do not appear to have a particular Controller reference available, you can always use a public property injection to get a reference, which will be filled by the Dependency Container at runtime:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;In a Controller Class&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;[Inject] public WorkerUnitController WorkerUnitController { get; set; }&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This is exactly how uFrame injects them behind the scene, but by default uFrame will only automatically inject the "nearby" controllers, those&amp;nbsp;elements in your diagram&amp;nbsp;which are immediately linked to each other.&amp;nbsp; You will undoubtedly need access to other Controllers and perhaps even specific named ViewModel instances in order to implement gameplay interactions, so feel free to inject the specific things you need.&amp;nbsp; However, &lt;STRONG&gt;always&lt;/STRONG&gt; be aware of the dependencies you introduce, and carefully consider potential impact and consequences you may incur from future changes to those dependencies.&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="ddc024a7-f654-48b3-8bb5-437273463677" AutoIndex="false">
            <Caption m="2015-01-30T09:34:30.6158389Z">ViewModels</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="d940e93f-1a9a-4e7b-9886-375863d2376e" Status="New Topic" CreatedOn="2015-01-08T05:37:19.0673464Z" ModifiedOn="2015-02-03T11:42:22.0647672Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="View Models" BuildFlags="">
                <Title m="2015-01-08T06:09:14.6059111Z">ViewModels</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2015-02-03T11:42:22.0647672Z">&lt;H1&gt;What is it?&lt;/H1&gt;
&lt;P&gt;ViewModels are the theoretical objects in your game.&amp;nbsp; They consist of data in the form of properties and collections, and also define the available commands for that object.&amp;nbsp; Because they&amp;nbsp;are regular C# classes and do not inherit from Monobehaviour,&amp;nbsp;ViewModels&amp;nbsp;are very portable.&amp;nbsp; Although they do not require a View in order to exist, if you would like to represent a ViewModel's data in Unity, you would create a View and bind it to that ViewModel.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H1&gt;Where does it exist in Unity?&lt;/H1&gt;
&lt;P&gt;ViewModels don't technically exist until runtime, at which point they are instantiated into memory as needed.&amp;nbsp; If a View exists in your scene, at runtime it asks the SceneManager for the specific ViewModel it wants to bind to, at which point the SceneManager will return the ViewModel with the matching given identifier, creating it if it doesn't exist.&amp;nbsp; When defining single instances of a particular&amp;nbsp;ViewModel through the uFrame Editor window on a subsystem, these instances are also created at runtime and will be readily available in the SceneManager's Dependency Container for any Views requesting them.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H1&gt;What else?&lt;/H1&gt;
&lt;H3&gt;More on Commands&lt;/H3&gt;
&lt;P&gt;It's important to understand that although commands exist on the ViewModel, when executed, they defer to their relative Controller to perform that command logic.&amp;nbsp; For example, given a Player element with a Health integer property and&amp;nbsp;a TakeDamage command that accepts an integer parameter, imagine that we want to execute that TakeDamage command on a particular&amp;nbsp;PlayerViewModel instance.&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;On any Controller or View&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Anywhere you have access to a&amp;nbsp;viewmodel (on a controller or view)&lt;/P&gt;
&lt;P&gt;this.ExecuteCommand(player.TakeDamage, 10);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;There's a little magic that happens behind the scenes, but the basic idea is that it goes through the GameManager's CommandDispatcher to ensure&amp;nbsp;commands are executed properly.&amp;nbsp; As long as a ViewModel is created correctly using its associated Controller, the CommandDispatcher will call the appropriately named command on that Controller.&amp;nbsp; So in this example,&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;PlayerController.cs&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public override void TakeDamage(PlayerViewModel player, int arg) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; player.Health -= arg;&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="6f5c9720-828c-42e0-b28d-88a3d01a9ede" Status="New Topic" CreatedOn="2015-01-08T06:13:25.2992499Z" ModifiedOn="2015-01-30T05:22:49.9260686Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Creation and Initialization" BuildFlags="">
                <Title m="2015-01-08T06:14:29.7839382Z">Creation and Initialization</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2015-01-30T05:22:49.9260686Z">&lt;H3&gt;General Creation&lt;/H3&gt;
&lt;P&gt;For the most part, ViewModels will be created by Controllers.&amp;nbsp; This can be done in either of two ways:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;In any Controller Command&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;var&amp;nbsp;player = new PlayerViewModel(PlayerController);&lt;/P&gt;
&lt;P&gt;var&amp;nbsp;player2 = PlayerController.CreatePlayer();&lt;/P&gt;
&lt;P&gt;// Note that this PlayerController is a reference to an instance&lt;/P&gt;
&lt;P&gt;//&amp;nbsp;&amp;nbsp;&amp;nbsp; of PlayerController, not the class itself.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Both of these methods create a new PlayerViewModel instance, with a unique Identifier, and use the PlayerController's Initialize function by default.&amp;nbsp; Usually the first method is sufficient, but the second option is also available for more flexibility and can be overridden on the relevant controller for implementing custom saving/loading of model data.&lt;/P&gt;&lt;innovasys:widget type="Include Topic" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="source"&gt;1556ba05-2036-493e-9c02-d1c355cd2cb1&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H3&gt;Note about "SceneFirst" Views&lt;/H3&gt;
&lt;P&gt;ViewModels do not exist until runtime, and any Views existing&amp;nbsp;in your scene before then are usually considered SceneFirst.&amp;nbsp; At runtime these Views will request a particular ViewModel instance, according to its identifier, &amp;nbsp;from the SceneManager's Dependency Container.&amp;nbsp; Unless force resolved to a particular identifier, a random unique identifier will be chosen by the View.&amp;nbsp; No matter what identifier is requested, if the dependency container does not already have that particular ViewModel instance, it will create it and return that reference.&lt;/P&gt;
&lt;H3&gt;Initialization by Controllers&lt;/H3&gt;
&lt;P&gt;Typically you will use the relevant Controller's Initialize{ElementName} function to initialize a newly created ViewModel with default values and references.&amp;nbsp; It's a great place to subscribe to state changes and&amp;nbsp;"scene property"&amp;nbsp;changes, or possibly track a list of ViewModel instances when acting similarly to a manager.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;InitializeMethod&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void InitializeFPSWeapon(FPSWeaponViewModel fpsWeapon)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fpsWeapon.StateProperty&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .Where(p =&amp;gt; p is Reloading) // Subscribe only to when the state is changed to reloading&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .Subscribe(r =&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // When we've entered the reloading state create&amp;nbsp;a timer that executes a&amp;nbsp;command invoking a transition.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Observable.Timer(TimeSpan.FromSeconds(fpsWeapon.ReloadTime))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .Subscribe(l =&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fpsWeapon.Ammo = fpsWeapon.RoundSize;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ExecuteCommand(fpsWeapon.FinishedReloading);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }).DisposeWith(fpsWeapon); // Make sure this is disposed with the weapon&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H3&gt;Initialization by Views&lt;/H3&gt;
&lt;P&gt;For convenience, you also have the option of Initializing a ViewModel from a particular View, by checking Initialize ViewModel on the View.&amp;nbsp; This is particularly useful when setting up a scene before runtime or creating prefabs.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="2cef6d8e-c22b-4187-a58e-64b622698676" AutoIndex="false">
            <Caption m="2015-01-30T09:38:06.5361889Z">Concepts</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="f18e15aa-5018-4752-ba7d-0464a3b81a10" Status="New Topic" CreatedOn="2015-01-08T06:25:37.1881116Z" ModifiedOn="2015-02-05T10:33:59.3794434Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="How It Works Together" BuildFlags="">
                <Title />
                <ContentsTitle m="2015-01-08T06:25:52.3859808Z">How It Works Together</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2015-02-05T10:33:59.3794434Z">&lt;P&gt;So if you've made games in Unity before, you may have noticed how easy it is to end up with a mess of components with heavy dependencies.&amp;nbsp; Unit testing is impossible.&amp;nbsp; Adding/removing properties or changing the game logic of one&amp;nbsp;component may break components on one, two, or half a dozen other Gameobjects and/or UI elements.&amp;nbsp; It can easily become a nightmare.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;In uFrame, an emphasis is placed on separating out the pieces of your game into certain categories (often referred to as "layers"), based on this hybrid MVCVM pattern.&amp;nbsp; The reasoning behind this is to help enforce separation of concerns, and allow you to quickly split things into these categories and think about them up-front.&amp;nbsp; These parts are defined as:&lt;/P&gt;&lt;innovasys:widget type="Dynamic Image" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="ThumbnailURL"&gt;Snags/AahzAbstractOverview_thumb.png&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ImageTitle"&gt;Basic Separation of MVCVM&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;ViewModels:&lt;/STRONG&gt; The objects, including properties and available commands 
&lt;LI&gt;&lt;STRONG&gt;Controllers:&lt;/STRONG&gt; The rules, where you implement logic of commands 
&lt;LI&gt;&lt;STRONG&gt;Views:&lt;/STRONG&gt; The visual/auditory representation of your objects in a game engine environment &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;It gets a little more complicated with the actual implementation, but the chart above is the core concept.&amp;nbsp; Ideas are always theoretical.&amp;nbsp; The idea of your game and everything that defines it should technically be able to exist in any environment, whether it's a game engine, a console app, or a physical board game.&amp;nbsp; A player takes damage and health is decremented; this concept can be represented any number of ways, as a UI health gauge, a damage printout message in a console, or loss of health tokens from a board game player.&lt;/P&gt;
&lt;HR&gt;

&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;In the previous example the Player would be a ViewModel, an object in your game, with a Health property.&amp;nbsp; There would most likely be a TakeDamage command defined in the PlayerController, which would handle the rule of decrementing the playerViewModel's Health.&amp;nbsp; When the value changes on the Health property, you may have it trigger a view binding on the PlayerHUDView which updates a health gauge according to this new value.&amp;nbsp; The fun part is that all it takes to trigger this chain of events is something like:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code Section" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;ExecuteCommand(playerVM.TakeDamage, 10); // player takes 10 damage&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This command can be executed from any controller, or any view that has access to that particular PlayerViewModel instance, usually through some kind of interaction,&amp;nbsp;such as&amp;nbsp;a collision with spikes or an enemy's weapon.&amp;nbsp; Furthermore, it is important to make a distinction of game logic (which goes on the Controller layer of the design) and visual/auditory/engine-specific logic (which belongs on the View layer).&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Instead of an EnemyView detecting that it has hit the PlayerView, taking its PlayerViewModel instance, and executing the TakeDamage command on it directly from that EnemyView, it's important to make the distinction that this is game logic and belongs in the Controller layer.&amp;nbsp; The correct approach that most follows the MVCVM pattern would be to implement&amp;nbsp;some kind of AttackPlayer command on the Enemy element, and pass the playerViewModel of the PlayerView that the EnemyView has hit.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;An EnemyView, wherever hit was detected&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Collision detected from enemy's weapon when hitting a player&lt;/P&gt;
&lt;P&gt;ExecuteCommand(this.Enemy.AttackPlayer, playerVM);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// OR&lt;/P&gt;
&lt;P&gt;ExecuteAttackPlayer(playerVM);&lt;/P&gt;
&lt;P&gt;// ^ This is&amp;nbsp;a shortcut convenience&amp;nbsp;method that also works in this&lt;/P&gt;
&lt;P&gt;//&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; case, because we are within this Enemy Element's View&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now that you're handling the game logic properly on the Controller layer,&amp;nbsp;the actual logic is&amp;nbsp;no longer dependent on that specific view, and is available to anything that tells the EnemyViewModel to AttackPlayer.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;EnemyController, the AttackPlayer command logic&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public override void AttackPlayer(EnemyViewModel enemy, PlayerViewModel player) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // More complex damage multipliers and checks can go here&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // For now, simply use the enemy's AttackPower property:&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ExecuteCommand(player.TakeDamage, enemy.AttackPower);&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;PlayerController, the TakeDamage command logic&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public override void TakeDamage(PlayerViewModel player, int damage) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var mitigatedDamage = damage - player.Defense;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; if(mitigatedDamage &amp;gt; 0)&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; player.Health -= mitigatedDamage;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // else damage is completely mitigated by player's defense&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; if(player.Health &amp;lt;= 0)&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ExecuteCommand(player.Die);&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;As you can see, there's a method to the madness.&amp;nbsp; Separating the core logic and state from the "Monobehaviour" side of things allows any number of Views to use this data.&amp;nbsp; Under the hood, uFrame manages the state and helps centralize logic.&amp;nbsp; Everything else is just an expression of that state, a Player getting attacked or taking damage and losing health.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="2dd53c97-d129-430b-8252-d86db7175b91" Status="New Topic" CreatedOn="2015-01-08T06:31:30.2863076Z" ModifiedOn="2015-01-30T09:13:21.8352688Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Dependency Containers" BuildFlags="">
                <Title />
                <ContentsTitle m="2015-01-08T06:31:41.3749418Z">Dependency Containers</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2015-01-30T09:13:21.8352688Z">&lt;P&gt;The recommended way of accessing a scene's Dependency Container is through the SceneManager's Container property.&amp;nbsp; This container stores the currently used Controller and ViewModel instances in your scene, among other things.&amp;nbsp; It can be used to register, inject, and resolve other dependencies as well, and understanding how it works can greatly decouple the&amp;nbsp;various parts&amp;nbsp;of your game.&amp;nbsp; See the&amp;nbsp;&lt;A href="483159df-5850-4689-b63a-7d0b9f9b81d7" style="auto-update-caption: true"&gt;Main Article&lt;/A&gt;&amp;nbsp;for a better idea of how Dependency Injection works, or browse this topic's sub-sections for more info on example uFrame implementations.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="9e8d989e-5739-4bb6-b59f-31eaa7a00358" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="483159df-5850-4689-b63a-7d0b9f9b81d7" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="483159df-5850-4689-b63a-7d0b9f9b81d7" Status="New Topic" CreatedOn="2015-01-21T06:47:33.4589657Z" ModifiedOn="2015-01-30T04:10:58.6634388Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="IoC and DI" BuildFlags="">
                <Title m="2015-01-21T06:48:11.7021531Z">Inversion of Control and Dependency Injection</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2015-01-30T04:10:58.6634388Z">&lt;P&gt;These are labeled as intermediate/advanced topics by some, and for a large majority of Unity developers they are fuzzy stumbling blocks that are hard to wrap the mind around.&amp;nbsp; It's recommended to read through a few external learning resources to get a better idea of these concepts, as they are at the heart of uFrame and how it works.&amp;nbsp; There are plenty across the internet, but these should give the basic idea:&lt;/P&gt;&lt;A href="http://stackoverflow.com/questions/3058/what-is-inversion-of-control"&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="http://stackoverflow.com/questions/3058/what-is-inversion-of-control"&gt;http://stackoverflow.com/questions/3058/what-is-inversion-of-control&lt;/A&gt;
&lt;LI&gt;&lt;A href="http://www.codeproject.com/Articles/615139/An-Absolute-Beginners-Tutorial-on-Dependency-Inver"&gt;http://www.codeproject.com/Articles/615139/An-Absolute-Beginners-Tutorial-on-Dependency-Inver&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/A&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H3&gt;What is a dependency?&lt;/H3&gt;
&lt;P&gt;Dependencies are what your code relies on in order to complete its task.&amp;nbsp; Often classes are created with a large variety of hard-coded dependencies, usually without a second thought regarding possible consequences.&amp;nbsp; It's typically because of this lack of thought towards dependencies that there can be fairly heavy impacts when changing even small things.&amp;nbsp; Having tons of dependencies littered throughout your entire game can make adding new things and changing existing things a complete nightmare.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H3&gt;How&amp;nbsp;does uFrame handle&amp;nbsp;dependencies?&lt;/H3&gt;
&lt;P&gt;Basically there is a Dependency Container on SceneManagers that exists as the central place to register, resolve, and create the things uFrame and your game needs.&amp;nbsp; The container is simply a bag of instances, usually named with unique&amp;nbsp;identifiers, that can be referenced ("resolved") on-demand by whatever requires that dependency.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Caution Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;It's at this point where certain keen minds realize that they have the power to inject and resolve almost anything anywhere, and bad ideas may be coming to mind... perhaps (DO NOT DO THIS!) resolving Controller references in your Views (DO NOT DO THIS!) for example, with the intention of being able to create ViewModels (&lt;EM&gt;Please DON'T DO THIS!&lt;/EM&gt;).&amp;nbsp; While this is indeed possible, it would greatly break the uFrame pattern because Views and Controllers should not know about each other, so you even though you &lt;EM&gt;can&lt;/EM&gt; do this, you &lt;STRONG&gt;should not&lt;/STRONG&gt;.&amp;nbsp; With great power comes great responsibility, and uFrame can only do so much to protect and guide you.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="611ba270-3498-4b75-a555-f7a16574dc04" Status="New Topic" CreatedOn="2014-10-30T22:09:33.4021016Z" ModifiedOn="2015-01-30T09:05:31.1063447Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Registering Instances" BuildFlags="">
                <Title />
                <ContentsTitle m="2015-01-30T09:04:18.0231646Z">Registering Instances</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2015-01-30T09:05:31.1063447Z">&lt;P&gt;Registering instances allow you to use an implementation that is already been manually initialized.&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;using System;&lt;/P&gt;
&lt;P&gt;public class SampleSceneManager : SceneManager&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void Setup()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.Setup();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // You can access by [Inject] attribute&amp;nbsp;or container.Resolve&amp;lt;IMessenger&amp;gt;();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Container.RegisterInstance&amp;lt;IMessenger&amp;gt;(new FacebookMessenger("asdf1234"));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // This will register the instance under the name "Yahoo".&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // You can access by [Inject("Yahoo")] or container.Resolve&amp;lt;IMessenger&amp;gt;("Yahoo");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Container.RegisterInstance&amp;lt;IMessenger&amp;gt;(new YahooMessenger("asdf1234"), "Yahoo");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;public class SampleController : Controller&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [Inject]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public IMessenger Messenger { get; set; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [Inject("Yahoo")]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public IMessenger YahooMessenger { get; set; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void SendMessage(string message)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Messenger.SendMessage(DateTime.Now, message);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void SendMessageToAll(string message)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Resolve all will resolve all named instance excluding any direct instances like the Facebook messenger in this example.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var messengers = GameManager.Container.ResolveAll&amp;lt;IMessenger&amp;gt;();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; foreach (var messenger in messengers)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; messenger.SendMessage(DateTime.Now, message);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="28181020-f6c3-4772-97a7-fe1761a650ad" Status="New Topic" CreatedOn="2014-10-30T22:09:48.0728764Z" ModifiedOn="2015-01-30T09:05:31.111345Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Registered Type Mappings" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2015-01-30T09:05:31.111345Z">&lt;P&gt;Type mapping allow you to specify types that should resolve to new instances of an interface.&amp;nbsp; So each time they are resolved or injected a new instance will be created.&amp;nbsp; If there is a registered instance it will return that instead.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;RegisterTypeMappings&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public class SampleSceneManager : SceneManager&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public override void Setup()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.Setup();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Registers the facebook messenger as the default type for IMessenger&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Container.Register&amp;lt;IMessenger,FacebookMessenger&amp;gt;();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; var result = Container.Resolve&amp;lt;IMessenger&amp;gt;();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Debug.Log(result.GetType().Name); // Results as "FacebookMessenger"&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Container.Register&amp;lt;IMessenger,FacebookMessenger&amp;gt;("Facebook");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; result = Container.Resolve&amp;lt;IMessenger&amp;gt;("Facebook");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Debug.Log(result.GetType().Name); // Results as "FacebookMessenger"&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Container.Register&amp;lt;IMessenger,YahooMessenger&amp;gt;("Yahoo");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; result = Container.Resolve&amp;lt;IMessenger&amp;gt;("Yahoo");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Debug.Log(result.GetType().Name); // Results as "YahooMessenger"&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="d0365577-9a6f-43d8-ab64-ed30062ba4a8" Status="New Topic" CreatedOn="2014-10-30T22:10:00.6092297Z" ModifiedOn="2015-01-30T09:05:31.1163453Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Related Type Mappings" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2015-01-30T09:05:31.1163453Z">&lt;P&gt;Registering a related types make it easy to associate types with other types.&amp;nbsp; For instance you might have a Player class and a player will have a calculator for its health. But the health implementation may vary depending on difficulty levels.&amp;nbsp; For Example:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Container.RegisterRelation&amp;lt;PlayerData, IHealthCalculator, NoviceHealthCalculator&amp;gt;();&lt;/P&gt;
&lt;P&gt;var result = Container.ResolveRelation&amp;lt;PlayerData, IHealthCalculator&amp;gt;();&lt;/P&gt;
&lt;P&gt;Debug.Log(result.GetType().Name); // Results - "NoviceHealthCalculator"&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="bcf295bb-b5fb-4b57-972f-36329e959738" AutoIndex="false">
            <Caption m="2015-01-30T09:38:20.7139998Z">UniRx</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="f307612c-2136-4019-927c-0528ae13febc" Status="New Topic" CreatedOn="2015-01-08T06:27:21.0470519Z" ModifiedOn="2015-01-12T21:48:01.3634942Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="UniRx and Observables" BuildFlags="">
                <Title m="2015-01-12T21:48:01.3634942Z">UniRx and Observables</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2015-01-08T06:27:21.048052Z">&lt;p&gt; &lt;/p&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="d17135f4-edee-4d30-80fe-c80d8bd02cc2" Status="New Topic" CreatedOn="2015-01-08T06:28:42.5727149Z" ModifiedOn="2015-02-05T02:16:04.9105426Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Observer Pattern" BuildFlags="">
                <Title />
                <ContentsTitle m="2015-01-08T06:28:49.3861046Z">The Observer Pattern</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2015-02-05T02:16:04.9075425Z">&lt;P&gt;At the heart of Reactive Programming is the Observer pattern.&amp;nbsp; Things that can be observed are Observables, and things that can observe those Observables are Observers.&amp;nbsp; Simple, right?&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;This pattern&amp;nbsp;simply&amp;nbsp;suggests&amp;nbsp;a&amp;nbsp;loose coupling system whereby&amp;nbsp;an Observable&amp;nbsp;object allows for notification events for "subscribers", also known as Observers.&amp;nbsp; Whenever the&amp;nbsp;Observable object changes, this subscription notifies the Observer of the event, allowing the Observer to react in any way it chooses.&amp;nbsp; This is very similar to a mailing list, where users will subscribe to a website and receive emails when the site wishes to notify users of changes and new/recent events.&amp;nbsp; There is a noticeable inversion compared to the normal method of constantly "polling" an object or property to check if it has changed, instead allowing for the object itself&amp;nbsp;to send out a notification event to anyone listening for that specific change.&amp;nbsp; The Observer pattern is also explained somewhat humorously as &lt;EM&gt;The Hollywood Principle&lt;/EM&gt;, as in "Don't call us, we'll call you."&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;The specific notification&amp;nbsp;events are generally classified into 3 categories:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;&lt;STRONG&gt;OnNext:&lt;/STRONG&gt; This is the most common event, typically happening every time a new value occurs on an Observable property, or every time an Observable&amp;nbsp;command is executed. 
&lt;LI&gt;&lt;STRONG&gt;OnError:&lt;/STRONG&gt; This rarely happens, but can also be subscribed to in most cases, where an error notification event is sent out. 
&lt;LI&gt;&lt;STRONG&gt;OnCompleted:&lt;/STRONG&gt; This is the final event before disposing itself, when an Observable is signaling that there will be no further updates. &lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;Disposing is a necessary part of the subscription process, and deals with freeing up allocations and removing&amp;nbsp;event listeners.&amp;nbsp;&amp;nbsp;Every subscription results in an IDisposable, which is very important when defining when your subscription is no longer necessary and can be disposed.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="2d0cf95b-6da0-4ecc-8d48-196fd5edf742" Status="New Topic" CreatedOn="2015-01-08T06:28:53.7253528Z" ModifiedOn="2015-02-05T10:51:24.0591957Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="UniRx Overview" BuildFlags="">
                <Title />
                <ContentsTitle m="2015-01-08T06:29:09.0142273Z">UniRx Overview</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2015-02-05T10:51:24.0591957Z">&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;The following section, while not&amp;nbsp;technically inaccurate, is written specifically to ease an almost complete beginner into important Rx thought processes, and&amp;nbsp;provide a solid foundation to build upon.&amp;nbsp; The underlying complexity and design patterns involved are&amp;nbsp;slightly more complicated.&amp;nbsp;&amp;nbsp;The idea here is to introduce the &lt;EM&gt;intent&lt;/EM&gt; of Rx and build a working knowledge of common ways to utilize its power within uFrame and the general game development environment&amp;nbsp;as quickly as possible.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;UniRx is a re-implementation of Microsoft's .NET Reactive extensions&amp;nbsp;in Unity, designed by neuecc (Yoshifumi Kawai) to be more cross-platform and Unity-friendly.&amp;nbsp; Reactive extensions are used on Observables in order to implement logic in a more declarative way.&amp;nbsp; This Rx-style of programming leads to extremely flexible and powerful code, that can be easily defined, more legible, and more responsive.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H3&gt;"Okay, My Eyes are Starting to Glaze Over... Get to the Point!"&lt;/H3&gt;
&lt;P&gt;Well, using what we know of the&amp;nbsp;&lt;A href="d17135f4-edee-4d30-80fe-c80d8bd02cc2" style="auto-update-caption: true"&gt;The Observer Pattern&lt;/A&gt;, we understand that we can easily subscribe to be notified of "change" events.&amp;nbsp; Reactive programming is where you not only define that you &lt;EM&gt;want to be notified&lt;/EM&gt; of a change, but also define &lt;EM&gt;how you want to react&lt;/EM&gt; to such notifications.&amp;nbsp; So let's quickly get to an example while that sinks in:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;On a PlayerHUDView.cs&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public UILabel HealthLabel;&amp;nbsp; // Assigned in Inspector&lt;/P&gt;
&lt;P&gt;public UILabel HealthLabel2; // Assigned in Inspector&lt;/P&gt;
&lt;P&gt;public override void Bind() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.Bind()&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;STRONG&gt;this.Player.HealthProperty.Subscribe(health =&amp;gt; HealthLabel.text = health.ToString()).DisposeWith(this);&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;STRONG&gt;this.Player.HealthProperty.Subscribe(HealthChanged).DisposeWith(this);&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Note: These subscriptions are provided for sake of example, recommended way is with BindProperty or AddBinding,&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&amp;nbsp;&amp;nbsp;&amp;nbsp; although all of these methods of binding/subscribing are essentially exactly the same.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // this.BindProperty(Player.HealthProperty, HealthChanged);&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;
&lt;P&gt;// Receives new health values whenever the HealthProperty Subscription is "pushed" a new value&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;private void HealthChanged(int health) {&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; HealthLabel2.text = health.ToString();&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;}&lt;/STRONG&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Both of the above subscriptions tie into the same Player.Health property, both of them receive the same new integer value notifications, and both of them update their individual UILabels according to this new value.&amp;nbsp; They do exactly the same thing, just with two separate UILabels in order to display example use of both lambdas and Actions for defining how we want to &lt;STRONG&gt;react&lt;/STRONG&gt; to this subscription.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;A Little Further into the Rx&amp;nbsp;Concept&lt;/H2&gt;
&lt;P&gt;Many explanations of reactive programming will also introduce the idea of async streams, which can be a troublesome entry point for beginners.&amp;nbsp; Breaking things down, the concept of asynchronous is simply that things are not happening at a steady time&amp;nbsp;interval, and communication or events may happen intermittently.&amp;nbsp; Coming back to Rx with the idea of async streams, this is again&amp;nbsp;referring to the fact that instead of polling for property changes every frame, Observable&amp;nbsp;subscriptions will only notify you when a change occurs.&amp;nbsp; This notification may happen in the first second of the subscription, but not again for the next 5 seconds, and then it may not change for entire minutes.&amp;nbsp; Since you are only receiving notifications of changes, these notifications are happening at irregular intervals instead of a steady stream of "pushed" values.&amp;nbsp; Therefore compared to the normal, steady, synchronous stream of regular game Update events, these subscriptions offer a parallel asynchronous stream of &lt;EM&gt;pushed&lt;/EM&gt; values and events.&amp;nbsp; Time for a quick hypothetical example before moving on:&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Imagine&amp;nbsp;a Player with a Health property, the standard go-to example.&amp;nbsp; Let's say we subscribe to that, so now we are receiving HealthChanged events.&amp;nbsp; We may receive an initial notification at 0 seconds, that the Player's Health has been initialized to 100.&amp;nbsp; For whatever reason, let's say the player ran head-first into an enemy and lost 10 health at 5 seconds into the game.&amp;nbsp; Because of our subscription, we will now be sent a HealthChanged notification with the new value of 90.&amp;nbsp; Another 7 seconds later, the player hits spikes and loses 5 health, and yet another 12 seconds after that the player somehow manages to trip and fall on his own sword, taking another 30 points of damage.&amp;nbsp; Let's take a second and try to look at that stream of notifications as a collection of values:&lt;/P&gt;
&lt;TABLE style="BORDER-TOP-STYLE: solid; HEIGHT: 133px; WIDTH: 19.91%; BORDER-BOTTOM-STYLE: solid; BORDER-RIGHT-STYLE: solid; BORDER-LEFT-STYLE: solid"&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD class=InlineCodeStyle&gt;Time&lt;/TD&gt;
&lt;TD class=InlineCodeStyle style="VERTICAL-ALIGN: top"&gt;Player.Health&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD class=InlineCodeStyle&gt;0&lt;/TD&gt;
&lt;TD class=InlineCodeStyle style="VERTICAL-ALIGN: top"&gt;100&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD class=InlineCodeStyle&gt;5&lt;/TD&gt;
&lt;TD class=InlineCodeStyle style="VERTICAL-ALIGN: top"&gt;90&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD class=InlineCodeStyle&gt;12&lt;/TD&gt;
&lt;TD class=InlineCodeStyle style="VERTICAL-ALIGN: top"&gt;85&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD class=InlineCodeStyle&gt;24&lt;/TD&gt;
&lt;TD class=InlineCodeStyle style="VERTICAL-ALIGN: top"&gt;55&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;A player's health is always one specific value at any particular point in time.&amp;nbsp; Although it is not an actual collection, in the Reactive context of a data sequence, Player.Health could almost be thought of as&amp;nbsp;a List&amp;lt;int&amp;gt; however, where our subscription is continuing to Add values to the collection every time a new value is "pushed" to the subscription.&amp;nbsp; So if this were a collection of Player.Health values, the list would&amp;nbsp;contain the values&amp;nbsp;100, 90, 85, 55, and so on.&amp;nbsp; This frame of mind can be incredibly useful in the next section, where we combine this with the filtering and querying power of LINQ.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Reactive Rx Extensions&lt;/H2&gt;
&lt;P&gt;Let's get straight to the point, where we&amp;nbsp;blend everything to produce ultimate flexibility and phenomenal&amp;nbsp;cosmic power!&amp;nbsp; The idea is to combine the Observer pattern with Reactive&amp;nbsp;subscriptions, and add in the familiarity of LINQ&amp;nbsp;queries.&amp;nbsp; If you're not already familiar with it, there are tons of examples and answered questions on LINQ (&lt;STRONG&gt;L&lt;/STRONG&gt;anguage &lt;STRONG&gt;IN&lt;/STRONG&gt;tegrated &lt;STRONG&gt;Q&lt;/STRONG&gt;uery) you can explore online to learn more.&amp;nbsp; LINQ is mainly used to query collections, and works with Lists, arrays, and generic IEnumerables.&amp;nbsp; The greatest part of UniRx integration is quite possibly the mimicking of LINQ functionality with Reactive extensions, and once you are familiar with LINQ, much of Rx will seem very natural.&amp;nbsp; With the previous example of imagining a Player's observable Health as a collection of values over time, let's use some reactive power:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;On a PlayerHUDView.cs&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public override void Bind() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.Bind();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Let's subscribe to be notified ONLY when Health is divisible by 10&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;(using the modulus operator, when dividing by 10 leaves a remainder of 0&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.Player.HealthProperty.Where(health =&amp;gt; health % 10 == 0)&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .Subscribe(HealthDivisibleByTen)&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .DisposeWith;&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;
&lt;P&gt;public void HealthDivisibleByTen(int health) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Debug.Log(string.Format("Health was divisible by 10: {0}", health));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Given the previous Time vs Player.Health table above, this HealthDivisibleByTen&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&amp;nbsp;&amp;nbsp;&amp;nbsp; subscription will be notified of the 100 and 90 values, but NOT the 85 or 55&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The above example demonstrates the &lt;SPAN class=InlineCodeStyle&gt;.Where&lt;/SPAN&gt; LINQ filter query being used on our example theoretical "collection" of &lt;EM&gt;pushed&lt;/EM&gt; values, thanks to the magic of UniRx's Reactive extensions.&amp;nbsp; So because of that simple filter query, our subscription is only being notified of values that are divisible by 10.&amp;nbsp; The &lt;SPAN class=InlineCodeStyle&gt;.Where&lt;/SPAN&gt; filter can be used for many things, and simply needs to be provided with a comparison based on values it can receive,&amp;nbsp;where that comparison&amp;nbsp;results in either true or false.&amp;nbsp; There are many such reactive extensions and other powerful features provided by UniRx, and many are&amp;nbsp;explored in the sub-topic&amp;nbsp;&lt;A href="71f0d65a-57fd-40d3-853e-3235ac9e2b82" style="auto-update-caption: true"&gt;Common Uses and Examples&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
        </ChildTopicCategories>
        <Topics>
          <Topic Id="68250d2c-ebe7-4a11-905d-e893615d1d96" Status="New Topic" CreatedOn="2015-01-06T21:37:11.8759484Z" ModifiedOn="2015-01-27T16:10:22.8802688Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Aahz" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2015-01-27T16:10:22.8802688Z">&lt;DL&gt;
&lt;DD&gt;
&lt;H1&gt;Why uFrame?&lt;/H1&gt;
&lt;UL&gt;
&lt;LI&gt;Cleaner, structured, organized games 
&lt;LI&gt;Rapid&amp;nbsp;game development 
&lt;LI&gt;Mindmapping and clear definition of a game's intent through diagrams &lt;/LI&gt;&lt;/UL&gt;
&lt;DD&gt;
&lt;H1&gt;How?&lt;/H1&gt;
&lt;DD&gt;
&lt;H3&gt;The Non-Technical&lt;/H3&gt;&lt;/DD&gt;&lt;/DL&gt;
&lt;BLOCKQUOTE style="MARGIN-RIGHT: 0px" dir=ltr&gt;
&lt;P&gt;By allowing you to define your game as "elements" through nodes in a diagram, uFrame gives you the power to quickly decide and&amp;nbsp;specify the objects, properties, relations, and interactions of your game.&amp;nbsp; This can be invaluable when beginning your development process, as you are able to mentally work through how you want your game set up, before you even start coding or developing assets.&lt;/P&gt;
&lt;P&gt;From these diagrams and the nodes you design, uFrame is able to generate almost all the boilerplate code necessary for the foundation of your game.&amp;nbsp; It's important to note that uFrame still requires you to implement the logic portions of your game code, but uFrame will greatly help you articulate, lay out, organize, modularize, and sync your code.&lt;/P&gt;&lt;/BLOCKQUOTE&gt;
&lt;DL&gt;
&lt;DD&gt;
&lt;H3&gt;The Technical&lt;/H3&gt;
&lt;P&gt;Use of a hybrid MVVM and MVC software design pattern, dubbed MVCVM (&lt;STRONG&gt;M&lt;/STRONG&gt;odel - &lt;STRONG&gt;V&lt;/STRONG&gt;iew - &lt;STRONG&gt;C&lt;/STRONG&gt;ontroller - &lt;STRONG&gt;V&lt;/STRONG&gt;iew&lt;STRONG&gt;M&lt;/STRONG&gt;odel).&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Based on modern code generation techniques, uFrame will take the diagrams you design in the Unity editor and generate boilerplate code to make the MVCVM magic happen, and then present&amp;nbsp;you with nice, clean partial C# classes to work with as you implement your game. 
&lt;LI&gt;&lt;A href="http://en.wikipedia.org/wiki/Separation_of_concerns" target=_blank&gt;Separation of Concerns&lt;/A&gt;, 
&lt;UL&gt;
&lt;LI&gt;ViewModels: The data of your objects, simply the properties and available commands 
&lt;LI&gt;Controllers: The game logic of your objects (business logic, in a traditional sense), where you define the logic of commands 
&lt;LI&gt;Views: The visual/auditory logic and&amp;nbsp;binding components of your objects, all the fun Unity-specific integration &lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;
&lt;BLOCKQUOTE style="MARGIN-RIGHT: 0px" dir=ltr&gt;
&lt;BLOCKQUOTE style="MARGIN-RIGHT: 0px" dir=ltr&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Note about Models:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;It's worth noting that currently there are no readily available Models in uFrame.&amp;nbsp; As it stands, a ViewModel encapsulates your object's properties and defines the available commands, which in turn delegate to the ViewModel's Controller for the actual logic to perform when a command is executed.&amp;nbsp; From a technical standpoint,&amp;nbsp;Models would be ONLY the properties of your objects, and the ViewModel would wrap around the Model to implement logic on that data&amp;nbsp;through commands. 
&lt;LI&gt;Models are planned for a later version of uFrame, to more easily implement saving/loading stateful object data, allowing you to save/load to and from almost any source, including local and even&amp;nbsp;networked&amp;nbsp;files/databases.&amp;nbsp; For now, the current recommended approach is a repository pattern. &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/BLOCKQUOTE&gt;&lt;/BLOCKQUOTE&gt;
&lt;P class=InnovaContentWidget contentEditable=false style="BORDER-TOP: white 2px solid; BORDER-BOTTOM: white 1px solid; MARGIN-TOP: 2px" data-widget-type="Tip Box" data-source-widget-type="" data-widget-layout="block"&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Use of &lt;A href="http://en.wikipedia.org/wiki/Dependency_injection" target=_blank&gt;Dependency Injection&lt;/A&gt;&amp;nbsp;and emphasis on&amp;nbsp;&lt;A href="http://en.wikipedia.org/wiki/Inversion_of_control" target=_blank&gt;Inversion of Control&lt;/A&gt; 
&lt;LI&gt;Use&amp;nbsp;of Observer pattern in generated code and availability of Reactive Programming with UniRx integration &lt;/LI&gt;&lt;/UL&gt;&lt;/DD&gt;&lt;/DL&gt;
&lt;H1&gt;Overview&lt;/H1&gt;
&lt;P&gt;Placeholder&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="30c20df5-c0ca-4084-8229-97c5ad9ab8e4" Status="New Topic" CreatedOn="2015-01-30T09:35:30.6112705Z" ModifiedOn="2015-02-05T10:48:06.6149025Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Getting Started" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2015-02-05T10:48:06.6149025Z">&lt;innovasys:widget type="Dynamic Image" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="ThumbnailURL"&gt;Snags/AahzMVCVMExampleWorkflow_thumb.png&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ImageTitle"&gt;Basic Separation and Example Communication&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Neeeeeed mooooore info.&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="5319d3d7-68e3-4df9-9b42-c83e27c386de" Status="New Topic" CreatedOn="2015-01-21T06:19:25.2804074Z" ModifiedOn="2015-02-03T12:46:06.2945007Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Important Implementation Notes" BuildFlags="">
            <Title />
            <ContentsTitle m="2015-01-21T06:20:28.5480261Z">Important Implementation Notes</ContentsTitle>
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2015-02-03T12:46:06.2945007Z">&lt;P&gt;Although uFrame does its best to support and guide you to the creation of better games, it is extremely important to realize that the implementation is still always left to you.&amp;nbsp; While uFrame tries to separate things clearly, there are still countless ways you can circumvent and break the patterns put in place.&amp;nbsp; The most common violation is through mixing core game logic with representation logic, where some poor developer has created a nightmare trying to access fields on Views from Controllers or other Views.&amp;nbsp; These separations exist for a reason, so one puzzle piece can content itself with handling its own functionality and not worry how other pieces are handling themselves.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;There are also many situations with multiple valid solutions, and it all depends on how you decide to arrange your implementation.&amp;nbsp; When prototyping, many things are forgivable and easily redesigned as the project evolves and features are settled on.&amp;nbsp; It's very easy to bind/subscribe to properties in order to initiate logic, but you should always consider &lt;EM&gt;from where&lt;/EM&gt; you want that logic handled.&amp;nbsp; For example, imagine something odd happens and your RobotEnemy suddenly stops working correctly.&amp;nbsp; If all of your modifications are done in RobotEnemyController, then you've only got one place to look for the problem.&amp;nbsp; If you've allowed any parent, or child, or practically anything with a reference to RobotEnemy, to make modifications to it, then you've got more places to check...&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Above all, stick to the separation of &lt;STRONG&gt;Controller &amp;lt;-&amp;gt; ViewModel &amp;lt;- View.&lt;/STRONG&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;Controllers&lt;/STRONG&gt; handle the layer of&amp;nbsp;core game logic,
&lt;LI&gt;&lt;STRONG&gt;ViewModels&lt;/STRONG&gt; are effectively&amp;nbsp;the data layer,
&lt;LI&gt;and &lt;STRONG&gt;Views&lt;/STRONG&gt; are the presentation layer, handling how the game is displayed and represented in Unity&lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="71f0d65a-57fd-40d3-853e-3235ac9e2b82" Status="New Topic" CreatedOn="2015-01-08T06:29:20.1678653Z" ModifiedOn="2015-02-05T09:21:51.6653113Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Common Uses and Examples" BuildFlags="">
            <Title />
            <ContentsTitle m="2015-01-08T06:29:47.3284188Z">Common Uses and Examples</ContentsTitle>
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2015-02-05T09:21:51.6653113Z">&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;STRONG&gt;Avoiding Rube Goldberg-ian design of seemingly endless propagations&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;While you inherently have access to Rx anywhere you can see&amp;nbsp;an observable, it is of the utmost importance to limit the reach of your impact to implementing only what an element should logically take care of itself.&amp;nbsp; Defining an element's behaviour can become complex, and while this is not a problem itself, it can easily become a problem when the element begins affecting other elements, parents, or children.&amp;nbsp; Designing a system whereby elements are referencing a parent two or more levels above&amp;nbsp;themselves to&amp;nbsp;precipitate events, can quickly create troublesome headaches when debugging and tracking down any logic problems that may arise.&amp;nbsp; Wherever possible, limit the impact and reach of an element to itself, for sanity's sake.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;On Views, there are several convenience observables generated for you and available for easy subscription, including:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;UpdateAsObservable, TransformChangedObservable 
&lt;LI&gt;PositionAsObservable, LocalPositionAsObservable 
&lt;LI&gt;RotationAsObservable, LocalRotationAsObservable 
&lt;LI&gt;ScaleAsObservable &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Here are a few examples to get you started:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;On a View&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;this.UpdateAsObservable().Subscribe(_ =&amp;gt;{ Debug.Log("This is called every frame.")})&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.DisposeWith(this);&lt;/P&gt;
&lt;P&gt;this.UpdateAsObservable().Where(_ =&amp;gt; Input.GetMouseButtonDown(0))&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; .Subscribe(_ =&amp;gt;{ Debug.Log("This is called when the mouse button is down.")})&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; .DisposeWith(this);&lt;/P&gt;
&lt;P&gt;this.UpdateAsObservable().Where(_ =&amp;gt; Input.GetMouseButtonDown(0))&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; .Throttle(TimeSpan.FromSeconds(1))&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; .Subscribe(_ =&amp;gt;{ Debug.Log("This is called when clicked, but only once per second.")})&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; .DisposeWith(this);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="5fc7b311-c58d-40ee-a267-48b7f1a63b90" Status="New Topic" CreatedOn="2015-01-08T13:29:33.1632798Z" ModifiedOn="2015-02-05T10:51:24.2732079Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Troubleshooting" BuildFlags="">
            <Title m="2015-01-12T21:49:31.15663Z">Troubleshooting</Title>
            <ContentsTitle m="2015-01-12T21:49:34.145801Z">Troubleshooting</ContentsTitle>
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2015-02-05T10:51:24.2732079Z">&lt;P&gt;&lt;STRONG&gt;Problem Symptom:&lt;/STRONG&gt; View Bindings have stopped working&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Possible Causes:&lt;/STRONG&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;An important method on the View has been overridden, but the base call was accidentally removed, causing the View's bindings to not be created, initialized, or&amp;nbsp;updated.&amp;nbsp; See also:&amp;nbsp;&lt;A href="54b6b859-4c29-4fa3-a0e8-3dadefd40e50" style="auto-update-caption: true"&gt;Important Methods and Execution Order&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Problem Symptom:&lt;/STRONG&gt; Crashed on iOS build with an error stating, "Ran out of trampolines of type 2."&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Possible Solution:&lt;/STRONG&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;This is a known error due to the iOS environment, which must be resolved by changing AOT settings to increase the number of trampolines.&amp;nbsp; See&amp;nbsp;&lt;A href="http://answers.unity3d.com/questions/64909/ran-out-of-trampolines-of-type-2-ios.html" target=_blank&gt;these&lt;/A&gt;&amp;nbsp;&lt;A href="http://forum.unity3d.com/threads/ran-out-of-trampolines-type-2.84775/" target=_blank&gt;questions&lt;/A&gt; for more answers. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&lt;STRONG&gt;Problem Sympton:&lt;/STRONG&gt; Various AOT errors with iOS or other mobile builds.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Possible Solutions:&lt;/STRONG&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Neuecc has been kind enough to gather some&amp;nbsp;&lt;A href="https://github.com/neuecc/UniRx/wiki/AOT-Exception-Patterns-and-Hacks" target=_blank&gt;useful techniques&lt;/A&gt; when dealing with AOT problems. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="df1a5d0d-5ffc-4727-893f-7528b0488171" Status="New Topic" CreatedOn="2015-01-08T13:30:48.5055892Z" ModifiedOn="2015-02-05T09:23:52.6602362Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="External Learning Resources" BuildFlags="">
            <Title />
            <ContentsTitle m="2015-01-08T13:31:00.496275Z">External Learning Resources</ContentsTitle>
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2015-02-05T09:23:52.6602362Z">&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="ae1281a2-ab0b-4411-a4b6-e556db2a85c6" Status="New Topic" CreatedOn="2015-01-12T21:16:46.8742305Z" ModifiedOn="2015-02-16T14:53:04.4451947Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Computed Property" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2015-02-16T14:53:04.4451947Z">&lt;P&gt;&lt;IMG border=0 alt="" src="Snags/ComputedPropertyExample.png"&gt;&lt;/P&gt;
&lt;P&gt;A&amp;nbsp;Computed Property&amp;nbsp;is an extremely powerful feature added to uFrame's ViewModel layer.&amp;nbsp; These properties can calculate&amp;nbsp;their value based on other properties, and are recalculated&amp;nbsp;whenever&amp;nbsp;one of those&amp;nbsp;change.&amp;nbsp; So for example, if you have a boolean&amp;nbsp;IsDead computed property on a PlayerViewModel, dependent on a Player.Health property, uFrame will generate these three things on that PlayerViewModel for you to override:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;PlayerViewModel.cs&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Usually fine without overriding, used to set up the computed observable&lt;/P&gt;
&lt;P&gt;public override void ResetIsDead() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.ResetIsDead();&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;
&lt;P&gt;// A "getter" used to compute the property, based on dependents&lt;/P&gt;
&lt;P&gt;public override bool ComputeIsDead() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // true of above 0, false if less than or equal to 0&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return Health &amp;gt; 0;&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;
&lt;P&gt;// This where you would override and provide additional dependents, if needed&lt;/P&gt;
&lt;P&gt;public override&amp;nbsp;IEnumerable&amp;lt;IObservableProperty&amp;gt; GetIsDeadDepedents() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return base.GetIsDeadDependents();&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;It's important to correctly set all the dependents, because the computed only knows when it needs to be recalculated by observing these dependents for changes.&amp;nbsp; This is done in the diagram by dragging a link from a ViewModel's property to the computed, or in code by overriding the &lt;SPAN class=InlineCodeStyle&gt;Get{ComputedName}Dependents()&lt;/SPAN&gt; function.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;HR&gt;
&lt;innovasys:widget type="Include Topic" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="source"&gt;cfb007ad-c46a-4db4-a5b9-3d863d67be01&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="8a5a4b1e-5fca-47f9-9a6e-8420300482a6" Status="New Topic" CreatedOn="2015-01-12T21:17:25.1854246Z" ModifiedOn="2015-02-03T13:37:39.1924108Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Reactive State Machines" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2015-02-03T13:37:39.1924108Z">&lt;P&gt;Reactive State Machines are another new feature of uFrame, typically used to implement state machine behaviour based on transitions from&amp;nbsp;boolean computed properties.&amp;nbsp; Since this is a very flexible system, it's probably best to jump into a video example to get a better idea of how this can be set up.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Include Topic" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="source"&gt;f01c64e6-c5f3-4ecc-a53b-8c753c8a299c&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="09a1f62a-a29b-4093-9fe3-d8bd3b42cb51" Status="New Topic" CreatedOn="2015-01-12T21:20:41.0706307Z" ModifiedOn="2015-01-12T21:20:51.2792161Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Scene Properties" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2015-01-12T21:20:41.0716308Z">&lt;p&gt; &lt;/p&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="2f2e05f3-6173-4678-b804-354e6b7f8a3e" Status="New Topic" CreatedOn="2015-01-12T21:34:17.7873704Z" ModifiedOn="2015-02-03T12:50:54.7409989Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Simple Class Nodes" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2015-02-03T12:50:54.7409989Z">&lt;P&gt;These are basically simple classes that automatically implement INotifyPropertyChanged, which can help when quickly encapsulating portable data and bridging uFrame with other Unity assets, libraries, and frameworks.&amp;nbsp; Class nodes can be used as Element node properties and command parameters, which adds a whole new level of flexibility.&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="2f6e3256-0882-41c1-a390-15ec22cd6ca7" Status="New Topic" CreatedOn="2014-10-13T21:19:26.0916709Z" ModifiedOn="2015-01-30T09:31:23.4521338Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Computed Properties2" BuildFlags="">
            <Title m="2014-10-20T21:32:34.2522106Z">Computed Properties</Title>
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2014-10-26T17:07:33.6865631Z">&lt;P&gt;&lt;IMG border=0 alt="" src="images/Snagit/ComputedProperty.png"&gt;&lt;/P&gt;
&lt;P&gt;Computed properties allow you to have calculate another properties value when any of its dependants change.&amp;nbsp; When a View-Model is constructed it will subscribe to any other properties that the computed is dependant on.&amp;nbsp; When their values change the computed property is recalculated and set.&amp;nbsp; This allows for a very declaritive way of describing logic.&amp;nbsp; Computed Properties are just like regular properties with some additional functionality.&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Computeds can be bound to just like any other property.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;When you create a computed property node all the dependant properties should be connected to the computed's input.&amp;nbsp; You can also use computed properties as inputs to other computeds.&amp;nbsp; This gives you a lot of different options for other subscriptions as well.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Computed&amp;nbsp;Properties&amp;nbsp;are constructed in the View-Model's bind method.&amp;nbsp; There is a generated Reset{ComputedProperty} method that is invoked which sets up the computed property.&amp;nbsp; This looks like the following.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;IsEmpty_ComputedProperty&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public virtual void ResetIsEmpty()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (_IsEmptyDisposable != null) _IsEmptyDisposable.Dispose();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _IsEmptyDisposable = _IsEmptyProperty.ToComputed(ComputeIsEmpty, this.GetIsEmptyDependents().ToArray()).DisposeWith(this);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks>
              <TopicLink Id="999d67cd-f4dd-46dc-988d-e935da2d270d" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="cfb007ad-c46a-4db4-a5b9-3d863d67be01" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
            </TopicLinks>
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="4f07c8b5-2636-4ae7-8a32-caf63e8ab551" Status="New Topic" CreatedOn="2015-02-02T08:10:43.1821459Z" ModifiedOn="2015-02-05T10:48:06.6169027Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Creating Objects" BuildFlags="">
            <Title />
            <ContentsTitle m="2015-02-05T10:48:05.1588193Z">Creating Objects</ContentsTitle>
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2015-02-05T10:48:06.6159026Z">&lt;P&gt;Would be good to quickly describe the basics of collection creation bindings, and also handling InstantiateView/ReplaceView with VM&amp;nbsp;property bindings.&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="9ff4259c-c42d-41dd-9c1c-f6e2774be729" Status="New Topic" CreatedOn="2015-02-02T08:29:29.9115911Z" ModifiedOn="2015-02-05T06:34:09.3489327Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Scene Properties (Two-way Bindings)" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2015-02-05T06:34:09.3489327Z">&lt;P&gt;Usually a property binding is a&amp;nbsp;one-way stream of information, where a View is simply receiving information about a property's changing values.&amp;nbsp; In a game environment however, there are times where it makes sense to allow Views to actually&amp;nbsp;determine these values as well, for things like a GameObject's position, rotation, etc.&amp;nbsp; This is where two-way bindings are needed.&lt;/P&gt;
&lt;H2&gt;Scene Properties&lt;/H2&gt;
&lt;P&gt;Scene Properties are two-way bindings, and allows&amp;nbsp;for&amp;nbsp;a View to calculate and set a property on its ViewModel.&amp;nbsp; This is done in an observable way, and when adding a scene property to a view, 3 specific methods are made available.&amp;nbsp; For example, adding a Position scene property on a PlayerView will result in these underlying base methods:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;PlayerViewViewBase.cs&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;private IDisposable _PositionDisposable;&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;public virtual void ResetPosition() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (_PositionDisposable != null) _PositionDisposable.Dispose();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; _PositionDisposable = GetPositionObservable().Subscribe(Player._PositionProperty).DisposeWith(this);&lt;BR&gt;}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;protected virtual Vector3 CalculatePosition() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return default(Vector3);&lt;BR&gt;}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;protected virtual UniRx.IObservable&amp;lt;Vector3&amp;gt; GetPositionObservable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return this.UpdateAsObservable().Select(p =&amp;gt; CalculatePosition());&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;STRONG&gt;ResetPosition()&lt;/STRONG&gt; is mostly used to initialize the binding, is called in the View's base Bind() method, and typically doesn't need to be overridden and altered.&lt;/P&gt;
&lt;HR&gt;

&lt;P&gt;&lt;STRONG&gt;CalculatePosition()&lt;/STRONG&gt; is the main method you would override on your generated PlayerView, where you would return a Vector3 to give the player's position.&amp;nbsp; This commonly looks like:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;PlayerView.cs&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;protected override Vector3 CalculatePosition() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return transform.position;&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;HR&gt;

&lt;P&gt;&lt;STRONG&gt;GetPositionObservable()&lt;/STRONG&gt; should only be overridden in cases where you have a more convenient or performant method of observing the scene property change, because as you see, this calculation is happening every Update by default.&amp;nbsp; In this case, we know that ViewBase is already monitoring a TransformChangedObservable (and specifically a PositionChangedObservable as well), so on our PlayerView we would override the GetPositionObservable like this:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;PlayerView.cs&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Unnecessary to use CalculatePosition in this case, with the further code below&lt;/P&gt;
&lt;P&gt;// protected override Vector3 CalculatePosition() {&lt;/P&gt;
&lt;P&gt;// &amp;nbsp;&amp;nbsp;&amp;nbsp; return transform.position;&lt;/P&gt;
&lt;P&gt;// }&lt;/P&gt;
&lt;P&gt;protected override IObservable&amp;lt;Vector3&amp;gt; GetPositionObservable() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // base looks like:&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// return this.UpdateAsObservable().Select(p =&amp;gt; CalculatePosition());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return PositionAsObservable;&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;And now we are still monitoring the Position every Update technically, but at least we aren't creating extra unnecessary checks in the View's Update loop.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
        </Topics>
      </TopicCategory>
    </TopicCategories>
    <CustomTopicPropertyDefinitions />
    <PropertyDefinitionValues />
    <AutoNameDigits>0</AutoNameDigits>
    <AutoNameLastNumber>0</AutoNameLastNumber>
    <AutoNameEnabled>false</AutoNameEnabled>
    <AutoNamePrefix></AutoNamePrefix>
    <IncludeTopicNameInTitle>false</IncludeTopicNameInTitle>
    <TopicEditorState>
      <Attributes>
        <Attribute key="scrollPosition" valuetype="integer">0</Attribute>
      </Attributes>
    </TopicEditorState>
  </TopicsProjectPlugin>
  <WidgetsProjectPlugin>
    <WidgetTypes Version="2011.1" />
  </WidgetsProjectPlugin>
  <TemplateFileFeaturesProjectPlugin />
  <ProjectSearchProjectPlugin>
    <ProjectSearchDefinitions />
  </ProjectSearchProjectPlugin>
  <ProjectProfiles>
    <ProjectProfile Id="6b2cfb6d-7340-49af-9cfb-d31ec7a4a0d5" Name="Default">
      <DefaultItemQualifiedName></DefaultItemQualifiedName>
      <StripMetadata>false</StripMetadata>
      <AlwaysCopyTemplateFiles>true</AlwaysCopyTemplateFiles>
      <OutputFileExtension>.html</OutputFileExtension>
      <Title />
      <ClearOutputDirectoryBeforeBuild>false</ClearOutputDirectoryBeforeBuild>
      <IsNewIndicatorEnabled>false</IsNewIndicatorEnabled>
      <IsNewDateTime></IsNewDateTime>
      <PropertyDefinitionValues />
      <IsTidyXhtmlEnabled>false</IsTidyXhtmlEnabled>
      <CommunityOptions UseLocalProxyUrl="false" Enabled="false">
        <ServerType>PublicEvaluation</ServerType>
        <LocalProxyUrl></LocalProxyUrl>
        <HostingAccessKey></HostingAccessKey>
        <PrivateServerUrl></PrivateServerUrl>
        <PrivateServerAccessKey></PrivateServerAccessKey>
        <ProjectKey />
      </CommunityOptions>
      <DotNet>
        <IncludeRelationshipDiagrams>true</IncludeRelationshipDiagrams>
        <IncludeInheritanceHierarchies>true</IncludeInheritanceHierarchies>
        <IncludeSystemObjectMembers>false</IncludeSystemObjectMembers>
        <InterfacesToIgnoreInSyntax>System.*</InterfacesToIgnoreInSyntax>
        <NoInheritedMemberTopicsInternal>true</NoInheritedMemberTopicsInternal>
        <LinkToExternalDocs>true</LinkToExternalDocs>
        <UseXmlCommentFile>true</UseXmlCommentFile>
        <UseExternalXmlCommentFiles>false</UseExternalXmlCommentFiles>
        <NoInheritedMemberTopicsExternal>true</NoInheritedMemberTopicsExternal>
        <NoInheritedInLists>false</NoInheritedInLists>
        <ExcludeEditorBrowsable>true</ExcludeEditorBrowsable>
        <ExcludeBrowsableFalse>false</ExcludeBrowsableFalse>
        <ExcludeObsolete>false</ExcludeObsolete>
        <ExcludeCompilerGenerated>false</ExcludeCompilerGenerated>
        <ExcludeDebuggerNonUserCode>false</ExcludeDebuggerNonUserCode>
        <GenerateXmlCommentFile>false</GenerateXmlCommentFile>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <IncludeAssemblyBreadcrumb>false</IncludeAssemblyBreadcrumb>
        <IncludePrivateMembers>false</IncludePrivateMembers>
        <IncludeFriendMembers>false</IncludeFriendMembers>
        <IncludeProtectedFriendMembers>false</IncludeProtectedFriendMembers>
        <IncludeProtectedMembers>true</IncludeProtectedMembers>
        <IncludeAttributes>true</IncludeAttributes>
        <AttributeFilterType>Exclude</AttributeFilterType>
        <AttributeFilter></AttributeFilter>
        <XmlIsland></XmlIsland>
        <IdentifyAccessInTitles>false</IdentifyAccessInTitles>
        <XmlCommentUsage>UseIfBlank</XmlCommentUsage>
        <DiagramSettings OverviewNestingLevels="2" PageNestingLevels="2" DiagramStyleSource="Template">
          <SuppressSingleObjectDiagrams>true</SuppressSingleObjectDiagrams>
          <DiagramStyle>
            <CommonStyle OuterMargin="2" ShareSize="false">
              <IsNewBrush>#FFFF0000</IsNewBrush>
              <IsNewSize>6</IsNewSize>
              <UseDropShadow>false</UseDropShadow>
              <DropShadowOpacity>0.3</DropShadowOpacity>
              <DropShadowDepth>3</DropShadowDepth>
              <DropShadowColor>#FF000000</DropShadowColor>
              <DropShadowDirection>300</DropShadowDirection>
              <Connector Brush="#FFB2B2B2" Thickness="1.5" StyleName="Solid" Indent="16" />
            </CommonStyle>
            <ObjectItemStyle Font="Segoe UI" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="4" HorizontalAlignment="Left" BackgroundBrush="#FF99CCFF" BorderBrush="#FFFFFFFF" BorderThickness="0" EndCap="Rounded" />
            <CollectionItemStyle Font="Segoe UI" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="4" HorizontalAlignment="Left" BackgroundBrush="#FFFFCC66" BorderBrush="#FF000000" BorderThickness="-0" EndCap="Point" />
          </DiagramStyle>
          <DiagramRelationshipsFrom>PropertiesOnly</DiagramRelationshipsFrom>
          <IncludeFields>false</IncludeFields>
          <DiagramDefaultCollectionMemberOnly>true</DiagramDefaultCollectionMemberOnly>
        </DiagramSettings>
        <IncludeVbNetDefaultConstructor>false</IncludeVbNetDefaultConstructor>
        <UseOverloadSummaryForMasterSummary>true</UseOverloadSummaryForMasterSummary>
        <LinkOverriddenMembersToBaseImplementation>false</LinkOverriddenMembersToBaseImplementation>
        <GenericIndicator>ArgumentsInBrackets</GenericIndicator>
        <RootAssemblyName></RootAssemblyName>
        <IncludeConstructorsOnAbstractTypes>false</IncludeConstructorsOnAbstractTypes>
        <TemplateName>2012 Style</TemplateName>
        <ExcludeAllPrivateTypes>false</ExcludeAllPrivateTypes>
        <ExcludeAllFriendTypes>false</ExcludeAllFriendTypes>
        <ExcludeAllProtectedTypes>false</ExcludeAllProtectedTypes>
        <ExcludeAllProtectedFriendTypes>false</ExcludeAllProtectedFriendTypes>
        <SyntaxSectionStyle>TemplateDefault</SyntaxSectionStyle>
        <IsVbSyntaxMerged>true</IsVbSyntaxMerged>
        <IncludeMemberIndexKeywords>false</IncludeMemberIndexKeywords>
        <IncludeCodeContracts>false</IncludeCodeContracts>
        <GroupExamples>true</GroupExamples>
        <ColorizeSyntax>true</ColorizeSyntax>
        <IncludeExtensionMethods>true</IncludeExtensionMethods>
        <UseContentFromBaseMember>true</UseContentFromBaseMember>
        <ExcludedLanguages>
          <ExcludedLanguage>Delphi</ExcludedLanguage>
          <ExcludedLanguage>JScript</ExcludedLanguage>
          <ExcludedLanguage>CPP</ExcludedLanguage>
        </ExcludedLanguages>
      </DotNet>
      <Javascript>
        <IsBrowserCompatibilityIncluded>true</IsBrowserCompatibilityIncluded>
        <IsBrowserCompatibilityIncludedOnEveryPage>true</IsBrowserCompatibilityIncludedOnEveryPage>
        <UseDollarPrefix>true</UseDollarPrefix>
        <WrapInDomReady>false</WrapInDomReady>
        <IsIncludeParametersInUsageSyntaxEnabled>true</IsIncludeParametersInUsageSyntaxEnabled>
        <IsGenerateTypeMemberPagesEnabled>false</IsGenerateTypeMemberPagesEnabled>
        <SyntaxIndentParametersLength>60</SyntaxIndentParametersLength>
        <IncludeRelationshipDiagrams>true</IncludeRelationshipDiagrams>
        <IncludeInheritanceHierarchies>true</IncludeInheritanceHierarchies>
        <NoInheritedMemberTopicsInternal>true</NoInheritedMemberTopicsInternal>
        <UseXmlCommentFile>true</UseXmlCommentFile>
        <NoInheritedInLists>false</NoInheritedInLists>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <IncludeComponentBreadcrumb>false</IncludeComponentBreadcrumb>
        <XmlIsland></XmlIsland>
        <XmlCommentUsage>Merge</XmlCommentUsage>
        <DiagramSettings OverviewNestingLevels="0" PageNestingLevels="0" DiagramStyleSource="Template">
          <SuppressSingleObjectDiagrams>true</SuppressSingleObjectDiagrams>
          <DiagramStyle>
            <CommonStyle OuterMargin="10" ShareSize="true">
              <IsNewBrush>#FFFF0000</IsNewBrush>
              <IsNewSize>10</IsNewSize>
              <UseDropShadow>false</UseDropShadow>
              <DropShadowOpacity>0.3</DropShadowOpacity>
              <DropShadowDepth>3</DropShadowDepth>
              <DropShadowColor>#FF000000</DropShadowColor>
              <DropShadowDirection>300</DropShadowDirection>
              <Connector Brush="#FF808080" Thickness="1.5" StyleName="Solid" Indent="30" />
            </CommonStyle>
            <ObjectItemStyle Font="Tahoma" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FFADD8E6" BorderBrush="#FF808080" BorderThickness="0" EndCap="Rounded" />
            <CollectionItemStyle Font="Tahoma" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FFADD8E6" BorderBrush="#FF808080" BorderThickness="0" EndCap="Rounded" />
          </DiagramStyle>
          <DiagramRelationshipsFrom>All</DiagramRelationshipsFrom>
          <IncludeFields>false</IncludeFields>
          <DiagramDefaultCollectionMemberOnly>false</DiagramDefaultCollectionMemberOnly>
        </DiagramSettings>
        <RootComponentName></RootComponentName>
        <IncludeConstructorsOnAbstractTypes>false</IncludeConstructorsOnAbstractTypes>
        <TemplateName>2012 Style</TemplateName>
        <ExcludeAllPrivateTypes>true</ExcludeAllPrivateTypes>
        <ExcludeAllFriendTypes>true</ExcludeAllFriendTypes>
        <ExcludeAllProtectedTypes>false</ExcludeAllProtectedTypes>
        <ExcludeAllProtectedFriendTypes>false</ExcludeAllProtectedFriendTypes>
        <IncludeMemberIndexKeywords>false</IncludeMemberIndexKeywords>
        <GroupExamples>false</GroupExamples>
        <ColorizeSyntax>true</ColorizeSyntax>
      </Javascript>
      <Ajax>
        <IncludeRelationshipDiagrams>true</IncludeRelationshipDiagrams>
        <IncludeInheritanceHierarchies>true</IncludeInheritanceHierarchies>
        <NoInheritedMemberTopicsInternal>true</NoInheritedMemberTopicsInternal>
        <UseXmlCommentFile>true</UseXmlCommentFile>
        <NoInheritedInLists>false</NoInheritedInLists>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <IncludeComponentBreadcrumb>false</IncludeComponentBreadcrumb>
        <XmlIsland></XmlIsland>
        <XmlCommentUsage>Merge</XmlCommentUsage>
        <DiagramSettings OverviewNestingLevels="0" PageNestingLevels="0" DiagramStyleSource="Template">
          <SuppressSingleObjectDiagrams>false</SuppressSingleObjectDiagrams>
          <DiagramStyle>
            <CommonStyle OuterMargin="10" ShareSize="true">
              <IsNewBrush>#FFFF0000</IsNewBrush>
              <IsNewSize>10</IsNewSize>
              <UseDropShadow>false</UseDropShadow>
              <DropShadowOpacity>0.3</DropShadowOpacity>
              <DropShadowDepth>3</DropShadowDepth>
              <DropShadowColor>#FF000000</DropShadowColor>
              <DropShadowDirection>300</DropShadowDirection>
              <Connector Brush="#FF808080" Thickness="1.5" StyleName="Solid" Indent="30" />
            </CommonStyle>
            <ObjectItemStyle Font="Tahoma" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FFADD8E6" BorderBrush="#FF808080" BorderThickness="0" EndCap="Rounded" />
            <CollectionItemStyle Font="Tahoma" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FFADD8E6" BorderBrush="#FF808080" BorderThickness="0" EndCap="Rounded" />
          </DiagramStyle>
          <DiagramRelationshipsFrom>All</DiagramRelationshipsFrom>
          <IncludeFields>false</IncludeFields>
          <DiagramDefaultCollectionMemberOnly>false</DiagramDefaultCollectionMemberOnly>
        </DiagramSettings>
        <RootComponentName></RootComponentName>
        <IncludeConstructorsOnAbstractTypes>false</IncludeConstructorsOnAbstractTypes>
        <TemplateName>2012 Style</TemplateName>
        <ExcludeAllPrivateTypes>true</ExcludeAllPrivateTypes>
        <ExcludeAllFriendTypes>true</ExcludeAllFriendTypes>
        <ExcludeAllProtectedTypes>false</ExcludeAllProtectedTypes>
        <ExcludeAllProtectedFriendTypes>false</ExcludeAllProtectedFriendTypes>
        <IncludeMemberIndexKeywords>false</IncludeMemberIndexKeywords>
        <GroupExamples>false</GroupExamples>
        <ColorizeSyntax>true</ColorizeSyntax>
      </Ajax>
      <Java>
        <IncludeRelationshipDiagrams>true</IncludeRelationshipDiagrams>
        <IncludeInheritanceHierarchies>true</IncludeInheritanceHierarchies>
        <NoInheritedMemberTopicsInternal>true</NoInheritedMemberTopicsInternal>
        <UseXmlCommentFile>true</UseXmlCommentFile>
        <NoInheritedInLists>false</NoInheritedInLists>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <IncludeProjectBreadcrumb>false</IncludeProjectBreadcrumb>
        <IncludePrivateMembers>false</IncludePrivateMembers>
        <IncludeFriendMembers>false</IncludeFriendMembers>
        <IncludeProtectedFriendMembers>false</IncludeProtectedFriendMembers>
        <IncludeProtectedMembers>true</IncludeProtectedMembers>
        <XmlIsland></XmlIsland>
        <XmlCommentUsage>Merge</XmlCommentUsage>
        <DiagramSettings OverviewNestingLevels="3" PageNestingLevels="2" DiagramStyleSource="Template">
          <SuppressSingleObjectDiagrams>false</SuppressSingleObjectDiagrams>
          <DiagramStyle>
            <CommonStyle OuterMargin="10" ShareSize="true">
              <IsNewBrush>#FFFF0000</IsNewBrush>
              <IsNewSize>10</IsNewSize>
              <UseDropShadow>false</UseDropShadow>
              <DropShadowOpacity>0.3</DropShadowOpacity>
              <DropShadowDepth>3</DropShadowDepth>
              <DropShadowColor>#FF000000</DropShadowColor>
              <DropShadowDirection>300</DropShadowDirection>
              <Connector Brush="#FF808080" Thickness="1.5" StyleName="Solid" Indent="30" />
            </CommonStyle>
            <ObjectItemStyle Font="Tahoma" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FFADD8E6" BorderBrush="#FF808080" BorderThickness="0" EndCap="Rounded" />
            <CollectionItemStyle Font="Tahoma" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FFADD8E6" BorderBrush="#FF808080" BorderThickness="0" EndCap="Rounded" />
          </DiagramStyle>
          <DiagramRelationshipsFrom>MethodsOnly</DiagramRelationshipsFrom>
          <IncludeFields>false</IncludeFields>
          <DiagramDefaultCollectionMemberOnly>false</DiagramDefaultCollectionMemberOnly>
        </DiagramSettings>
        <UseOverloadSummaryForMasterSummary>true</UseOverloadSummaryForMasterSummary>
        <LinkOverriddenMembersToBaseImplementation>false</LinkOverriddenMembersToBaseImplementation>
        <GenericIndicator>ArgumentsInBrackets</GenericIndicator>
        <RootProjectName></RootProjectName>
        <IncludeConstructorsOnAbstractTypes>false</IncludeConstructorsOnAbstractTypes>
        <TemplateName>2012 Style</TemplateName>
        <ExcludeAllPrivateTypes>true</ExcludeAllPrivateTypes>
        <ExcludeAllFriendTypes>true</ExcludeAllFriendTypes>
        <ExcludeAllProtectedTypes>false</ExcludeAllProtectedTypes>
        <ExcludeAllProtectedFriendTypes>false</ExcludeAllProtectedFriendTypes>
        <IncludeMemberIndexKeywords>false</IncludeMemberIndexKeywords>
        <IncludeCodeContracts>false</IncludeCodeContracts>
        <GroupExamples>false</GroupExamples>
        <ColorizeSyntax>true</ColorizeSyntax>
      </Java>
      <Com>
        <IncludeRelationshipDiagrams>true</IncludeRelationshipDiagrams>
        <UseHelpStrings>true</UseHelpStrings>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <IncludeProjectBreadcrumb>false</IncludeProjectBreadcrumb>
        <IncludePrivateMembers>false</IncludePrivateMembers>
        <HelpStringUsage>Merge</HelpStringUsage>
        <DiagramSettings OverviewNestingLevels="2" PageNestingLevels="3" DiagramStyleSource="Template">
          <SuppressSingleObjectDiagrams>true</SuppressSingleObjectDiagrams>
          <DiagramStyle>
            <CommonStyle OuterMargin="10" ShareSize="true">
              <IsNewBrush>#FFFF0000</IsNewBrush>
              <IsNewSize>10</IsNewSize>
              <UseDropShadow>false</UseDropShadow>
              <DropShadowOpacity>0.3</DropShadowOpacity>
              <DropShadowDepth>3</DropShadowDepth>
              <DropShadowColor>#FF000000</DropShadowColor>
              <DropShadowDirection>300</DropShadowDirection>
              <Connector Brush="#FF808080" Thickness="1.5" StyleName="Solid" Indent="30" />
            </CommonStyle>
            <ObjectItemStyle Font="Tahoma" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FFADD8E6" BorderBrush="#FF808080" BorderThickness="0" EndCap="Rounded" />
            <CollectionItemStyle Font="Tahoma" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FFADD8E6" BorderBrush="#FF808080" BorderThickness="0" EndCap="Rounded" />
          </DiagramStyle>
          <DiagramRelationshipsFrom>All</DiagramRelationshipsFrom>
          <IncludeFields>false</IncludeFields>
          <DiagramDefaultCollectionMemberOnly>true</DiagramDefaultCollectionMemberOnly>
        </DiagramSettings>
        <RootProjectName></RootProjectName>
        <IncludeConstructorsOnAbstractTypes>false</IncludeConstructorsOnAbstractTypes>
        <TemplateName>2012 Style</TemplateName>
        <ExcludeAllPrivateTypes>true</ExcludeAllPrivateTypes>
        <IncludeMemberIndexKeywords>false</IncludeMemberIndexKeywords>
        <GroupExamples>false</GroupExamples>
        <ColorizeSyntax>true</ColorizeSyntax>
      </Com>
      <Database>
        <TemplateName>2012 Style</TemplateName>
        <IncludeSqlServerSystemObjects>false</IncludeSqlServerSystemObjects>
        <IncludeSourceForViews>true</IncludeSourceForViews>
        <IncludeSourceForTriggers>true</IncludeSourceForTriggers>
        <IncludeSourceForUserDefinedFunctions>true</IncludeSourceForUserDefinedFunctions>
        <IncludeSourceForStoredProcedures>true</IncludeSourceForStoredProcedures>
        <IncludeScriptForTables>true</IncludeScriptForTables>
        <IncludeScriptForOtherItems>true</IncludeScriptForOtherItems>
        <RemoveTaggedCommentsFromSource>true</RemoveTaggedCommentsFromSource>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <IncludeSchemaInformation>true</IncludeSchemaInformation>
        <CheckAllExtendedProperties>false</CheckAllExtendedProperties>
        <SourceContentUsage>Merge</SourceContentUsage>
        <UseSourceContent>true</UseSourceContent>
        <MaximumDependencyLevel>5</MaximumDependencyLevel>
        <UseSqlServerDataTypeNames>true</UseSqlServerDataTypeNames>
      </Database>
      <Xsd>
        <IncludeOverview>true</IncludeOverview>
        <IncludeOverviewReferencedChildren>false</IncludeOverviewReferencedChildren>
        <OverviewLevels>5</OverviewLevels>
        <DiagramStyle>
          <DefaultTextOptions></DefaultTextOptions>
          <Options></Options>
        </DiagramStyle>
        <IncludeAttributesInDiagrams>true</IncludeAttributesInDiagrams>
        <SuppressSingleObjectDiagrams>false</SuppressSingleObjectDiagrams>
        <DiagramItemMaxExtendedRecurse>3</DiagramItemMaxExtendedRecurse>
        <DiagramItemMaxRecurse>3</DiagramItemMaxRecurse>
        <GenerateDiagrams>true</GenerateDiagrams>
        <IsOverrideTemplateDiagramStyleEnabled>false</IsOverrideTemplateDiagramStyleEnabled>
        <TemplateName>2012 Style</TemplateName>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <SourceContentUsage>Merge</SourceContentUsage>
        <UseSourceContent>true</UseSourceContent>
      </Xsd>
      <Filters />
      <WebService>
        <GroupExamples>true</GroupExamples>
        <IncludeRequestBodyDiagram>true</IncludeRequestBodyDiagram>
        <IncludeResponseBodyDiagram>true</IncludeResponseBodyDiagram>
        <IncludeRequestBodyOverview>true</IncludeRequestBodyOverview>
        <IncludeResponseBodyOverview>true</IncludeResponseBodyOverview>
        <IncludeRequestBodySampleData>true</IncludeRequestBodySampleData>
        <IncludeResponseBodySampleData>true</IncludeResponseBodySampleData>
        <IsSampleDataColorized>true</IsSampleDataColorized>
        <ImplyJsonSchemas>true</ImplyJsonSchemas>
        <IsGroupedByResource>false</IsGroupedByResource>
        <IncludeFullResourceUriInOperationPages>true</IncludeFullResourceUriInOperationPages>
        <UseAbsolutePathForResourcePaths>true</UseAbsolutePathForResourcePaths>
        <TemplateName>2012 Style</TemplateName>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <SourceContentUsage>Merge</SourceContentUsage>
        <UseSourceContent>true</UseSourceContent>
      </WebService>
      <HelpCompiler CompileHelpFile="true" IsWebOutputEnabled="true" IsMarkOfTheWebEnabled="false">
        <MarkOfTheWebDomain>(0014)about:internet</MarkOfTheWebDomain>
        <HelpFileVersion>HtmlHelp1</HelpFileVersion>
        <Help2Namespace>newprojecttest1</Help2Namespace>
        <Help2FileId>Default</Help2FileId>
        <Help2PluginToNamespaces></Help2PluginToNamespaces>
        <Help2Plugin>false</Help2Plugin>
        <RuntimeMerge></RuntimeMerge>
        <IncludeTextPopupFile>false</IncludeTextPopupFile>
        <Help3BuildIdentifier></Help3BuildIdentifier>
        <Help3VendorName></Help3VendorName>
        <Help3CatalogName>VS</Help3CatalogName>
        <Help3CatalogVersion>100</Help3CatalogVersion>
        <Help3CatalogLocaleText>en-US</Help3CatalogLocaleText>
        <Help3TemplateName></Help3TemplateName>
        <Help3ProductName></Help3ProductName>
        <Help3BookName></Help3BookName>
        <IsHelp3CreateRegistrationScriptEnabled>true</IsHelp3CreateRegistrationScriptEnabled>
        <IsHelp3RegisterLocallyEnabled>true</IsHelp3RegisterLocallyEnabled>
        <IsHelp3SigningEnabled>false</IsHelp3SigningEnabled>
        <IsHelp3ValidationEnabled>false</IsHelp3ValidationEnabled>
        <IsHelp3KeywordsEnabled>false</IsHelp3KeywordsEnabled>
        <BrowserHelpTemplateName>2012 Style</BrowserHelpTemplateName>
        <IsCustomHtmlHelpWindowSettings>false</IsCustomHtmlHelpWindowSettings>
        <CustomHtmlHelpWindowSettings>
          <IsExpandVisible>true</IsExpandVisible>
          <IsBackVisible>true</IsBackVisible>
          <IsForwardVisible>true</IsForwardVisible>
          <IsStopVisible>false</IsStopVisible>
          <IsRefreshVisible>false</IsRefreshVisible>
          <IsHomeVisible>false</IsHomeVisible>
          <IsLocateVisible>true</IsLocateVisible>
          <IsOptionsVisible>true</IsOptionsVisible>
          <IsPrintVisible>true</IsPrintVisible>
          <IsZoomVisible>false</IsZoomVisible>
          <IsPreviousVisible>false</IsPreviousVisible>
          <IsNextVisible>false</IsNextVisible>
          <NavigationPaneWidth>200</NavigationPaneWidth>
          <IsNavigationPaneInitiallyClosed>false</IsNavigationPaneInitiallyClosed>
          <IsAutoSyncWithTocEnabled>true</IsAutoSyncWithTocEnabled>
          <IsSearchTabVisible>true</IsSearchTabVisible>
          <IsHistoryTabVisible>false</IsHistoryTabVisible>
          <IsFavoritesTabVisible>true</IsFavoritesTabVisible>
          <DefaultTab>Contents</DefaultTab>
          <IsSaveUserWindowSettingsEnabled>true</IsSaveUserWindowSettingsEnabled>
          <WindowSizeHeight>400</WindowSizeHeight>
          <WindowSizeWidth>600</WindowSizeWidth>
          <WindowLocationLeft>0</WindowLocationLeft>
          <WindowLocationTop>0</WindowLocationTop>
        </CustomHtmlHelpWindowSettings>
        <HelpFileName></HelpFileName>
      </HelpCompiler>
      <RuleEngine>
        <Rules Caption="" IsReadOnly="false" MatchType="All" Id="root">
          <Rules>
            <RuleGroup Caption="" IsReadOnly="false" MatchType="All" Id="standard">
              <Rules>
                <Rule Caption="" IsReadOnly="false" MatchType="All" Id="outputtype">
                  <Conditions>
                    <RuleCondition Caption="" IsReadOnly="false" BuildFlagMatchType="None" Id="4c7ca296-f253-4ae9-9d90-ef8cb42183a8" Designer="BUILDFLAGS">
                      <BuildFlags>{46CEF21D-3301-4517-A875-A0906828390E}</BuildFlags>
                    </RuleCondition>
                  </Conditions>
                </Rule>
              </Rules>
            </RuleGroup>
            <RuleGroup Caption="" IsReadOnly="false" MatchType="All" Id="custom">
              <Rules />
            </RuleGroup>
          </Rules>
        </Rules>
      </RuleEngine>
      <ShortFileNames GenerateShortFileNames="false" />
      <TopicsProjectProfilePlugin>
        <TemplateName>2012 Style</TemplateName>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <AutoGenerateTopicIndexEntries>true</AutoGenerateTopicIndexEntries>
        <AutoGenerateCategoryIndexEntries>true</AutoGenerateCategoryIndexEntries>
        <IncludeOnlyCompletedTopics>false</IncludeOnlyCompletedTopics>
        <IsNewSource>CreationDateTime</IsNewSource>
        <IsNewCustomTopicPropertyId></IsNewCustomTopicPropertyId>
        <IsAnchorParsingEnabled>false</IsAnchorParsingEnabled>
      </TopicsProjectProfilePlugin>
      <BookletsProjectProfilePlugin>
        <TemplateName></TemplateName>
      </BookletsProjectProfilePlugin>
      <WidgetsProjectProfilePlugin>
        <IsIncludeInThisTopicWidgetEnabled>false</IsIncludeInThisTopicWidgetEnabled>
        <InThisTopicWidgetHeadingsMinimum>5</InThisTopicWidgetHeadingsMinimum>
        <InThisTopicWidgetTagName>H1</InThisTopicWidgetTagName>
        <InThisTopicWidgetPrefix>$$In_This_Topic$$</InThisTopicWidgetPrefix>
        <WidgetTypes Version="2011.1" />
      </WidgetsProjectProfilePlugin>
      <OtherFiles>
        <IsLogoEnabled>false</IsLogoEnabled>
        <LogoOtherFileName></LogoOtherFileName>
        <IsGoogleAnalyticsEnabled>false</IsGoogleAnalyticsEnabled>
        <GoogleAnalyticsId></GoogleAnalyticsId>
        <IsOtherHeadContentEnabled>false</IsOtherHeadContentEnabled>
        <OtherHeadContent></OtherHeadContent>
      </OtherFiles>
      <OutputDirectory>..\..\InvertWeb\InvertWeb4\uFrameAPI\Default</OutputDirectory>
    </ProjectProfile>
  </ProjectProfiles>
  <HelpContextIDHeaderFile></HelpContextIDHeaderFile>
  <PrimaryLocale CultureId="-">
    <ExportDateTime></ExportDateTime>
    <Dictionary></Dictionary>
    <Notes></Notes>
    <PhraseCultureId></PhraseCultureId>
    <EncodingCulture></EncodingCulture>
    <IsEnhancedWordBreakAnalysisEnabled>false</IsEnhancedWordBreakAnalysisEnabled>
  </PrimaryLocale>
  <IsNewProject>false</IsNewProject>
</DocumentXProject>